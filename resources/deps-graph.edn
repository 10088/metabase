[[clojure.core]
 [clojure.walk #{clojure.core}]
 [clojure.tools.analyzer.env #{clojure.core}]
 [clojure.tools.analyzer.utils #{clojure.tools.analyzer.env clojure.core}]
 [clojure.tools.analyzer.ast #{clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.validate-recur
  #{clojure.tools.analyzer.ast clojure.core clojure.tools.analyzer.utils}]
 [clojure.core.async.impl.protocols #{clojure.core}]
 [clojure.core.async.impl.mutex #{clojure.core clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.concurrent #{clojure.core}]
 [clojure.core.async.impl.exec.threadpool
  #{clojure.core.async.impl.concurrent clojure.core clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.dispatch
  #{clojure.core clojure.core.async.impl.protocols clojure.core.async.impl.exec.threadpool}]
 [clojure.core.async.impl.channels
  #{clojure.core clojure.core.async.impl.protocols clojure.core.async.impl.dispatch clojure.core.async.impl.mutex}]
 [clojure.core.async.impl.timers #{clojure.core.async.impl.channels clojure.core clojure.core.async.impl.protocols}]
 [clojure.set #{clojure.core}]
 [metabase.types.coercion-hierarchies #{clojure.core clojure.set}]
 [metabase.types #{clojure.core clojure.set metabase.types.coercion-hierarchies}]
 [ring.util.parsing #{clojure.core}]
 [clojure.string #{clojure.core}]
 [clojure.java.io #{clojure.core clojure.string}]
 [ring.util.time #{clojure.core clojure.string}]
 [ring.util.io #{clojure.core clojure.java.io}]
 [ring.util.response #{ring.util.io clojure.core ring.util.time clojure.java.io clojure.string ring.util.parsing}]
 [ring.core.protocols #{clojure.core clojure.java.io ring.util.response}]
 [ring.util.servlet #{clojure.core clojure.java.io ring.core.protocols clojure.string}]
 [riddley.compiler #{clojure.core}]
 [riddley.walk #{riddley.compiler clojure.core}]
 [potemkin.walk #{clojure.core}]
 [potemkin.macros #{potemkin.walk riddley.walk clojure.core}]
 [potemkin.types #{potemkin.macros riddley.walk clojure.core clojure.set clojure.string}]
 [metabase.server.protocols #{potemkin.types clojure.core ring.util.servlet}]
 [dynapath.dynamic-classpath #{clojure.core}]
 [dynapath.defaults #{dynapath.dynamic-classpath clojure.core}]
 [clojure.math.numeric-tower #{clojure.core}]
 [medley.core #{clojure.core}]
 [clojure.tools.reader.default-data-readers #{clojure.core}]
 [clojure.edn #{clojure.core}]
 [environ.core #{clojure.core clojure.edn clojure.java.io clojure.string}]
 [clojure.tools.namespace.dependency #{clojure.core clojure.set}]
 [clojure.tools.namespace.track #{clojure.core clojure.set clojure.tools.namespace.dependency}]
 [schema.utils #{clojure.core clojure.string}]
 [clojure.tools.logging.impl #{clojure.core}]
 [clojure.data #{clojure.core clojure.set}]
 [clj-tuple #{clojure.core}]
 [clojure.tools.reader.impl.inspect #{clojure.core}]
 [schema.macros #{clojure.core clojure.string schema.utils}]
 [schema.spec.core #{schema.macros clojure.core schema.utils}]
 [schema.spec.leaf #{schema.spec.core clojure.core}]
 [clojure.pprint #{clojure.core clojure.walk}]
 [schema.spec.variant #{schema.macros schema.spec.core clojure.core schema.utils}]
 [dynapath.util #{dynapath.dynamic-classpath clojure.core dynapath.defaults}]
 [clojure.tools.reader.impl.utils #{clojure.core}]
 [clojure.tools.reader.reader-types #{clojure.tools.reader.impl.utils clojure.core}]
 [clojure.tools.reader.impl.errors #{clojure.tools.reader.reader-types clojure.core clojure.tools.reader.impl.inspect}]
 [clojure.tools.reader.impl.commons
  #{clojure.tools.reader.impl.utils clojure.tools.reader.impl.errors clojure.tools.reader.reader-types clojure.core}]
 [clojure.tools.reader
  #{clojure.tools.reader.impl.utils
    clojure.tools.reader.impl.commons
    clojure.tools.reader.impl.errors
    clojure.tools.reader.reader-types
    clojure.core
    clojure.tools.reader.default-data-readers}]
 [cheshire.generate #{clojure.core}]
 [clojure.tools.logging #{clojure.core clojure.pprint clojure.string clojure.tools.logging.impl}]
 [metabase.plugins.classloader #{clojure.tools.logging clojure.core dynapath.util clojure.string}]
 [potemkin.utils #{potemkin.macros clojure.core clj-tuple}]
 [potemkin.collections #{potemkin.utils potemkin.types potemkin.macros clojure.core}]
 [potemkin.namespaces #{clojure.core}]
 [potemkin #{potemkin.utils potemkin.types potemkin.macros potemkin.namespaces potemkin.collections clojure.core}]
 [clojure.tools.reader.edn
  #{clojure.tools.reader.impl.utils
    clojure.tools.reader.impl.commons
    clojure.tools.reader.impl.errors
    clojure.tools.reader.reader-types
    clojure.core
    clojure.tools.reader}]
 [schema.spec.collection #{schema.macros schema.spec.core clojure.core schema.utils}]
 [schema.core
  #{schema.macros
    schema.spec.collection
    schema.spec.core
    clojure.core
    schema.spec.variant
    clojure.pprint
    schema.spec.leaf
    clojure.string
    schema.utils}]
 [metabase.util.i18n.impl
  #{potemkin.types
    clojure.tools.reader.edn
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    clojure.java.io
    clojure.string}]
 [metabase.util.i18n
  #{metabase.util.i18n.impl
    potemkin.types
    schema.core
    potemkin
    clojure.tools.logging
    clojure.core
    cheshire.generate
    clojure.string
    clojure.walk}]
 [flatland.ordered.common #{clojure.core}]
 [flatland.ordered.set #{clojure.core flatland.ordered.common clojure.string}]
 [buddy.core.codecs #{clojure.core clojure.string}]
 [buddy.core.hash #{clojure.core buddy.core.codecs clojure.java.io}]
 [buddy.core.kdf #{buddy.core.hash clojure.core buddy.core.codecs}]
 [buddy.core.nonce #{clojure.core}]
 [buddy.core.bytes #{clojure.core}]
 [buddy.core.padding #{clojure.core buddy.core.bytes}]
 [buddy.core.mac #{buddy.core.hash clojure.core buddy.core.bytes buddy.core.codecs clojure.java.io}]
 [buddy.core.crypto
  #{buddy.core.mac buddy.core.padding clojure.core buddy.core.bytes buddy.core.nonce buddy.core.codecs}]
 [clojure.tools.namespace.parse #{clojure.core clojure.set clojure.tools.reader}]
 [flatland.ordered.map #{clojure.core flatland.ordered.common flatland.ordered.set clojure.string}]
 [clojure.java.classpath #{clojure.core clojure.java.io}]
 [colorize.core #{clojure.core clojure.pprint}]
 [weavejester.dependency #{clojure.core clojure.set}]
 [clojure.tools.namespace.file
  #{clojure.core clojure.tools.namespace.parse clojure.java.io clojure.tools.namespace.track}]
 [ring.util.codec #{clojure.core clojure.string}]
 [metabase.config #{metabase.plugins.classloader clojure.core clojure.java.io clojure.string environ.core}]
 [metabase.shared.util #{clojure.core}]
 [clojure.tools.namespace.find
  #{clojure.tools.namespace.file
    clojure.core
    clojure.set
    clojure.java.classpath
    clojure.tools.namespace.parse
    clojure.java.io}]
 [metabase.util
  #{clojure.tools.namespace.find
    metabase.shared.util
    metabase.config
    ring.util.codec
    potemkin
    clojure.tools.logging
    weavejester.dependency
    clojure.core
    colorize.core
    clojure.set
    clojure.java.classpath
    flatland.ordered.map
    clojure.pprint
    metabase.util.i18n
    clojure.string
    clojure.data
    clojure.walk
    medley.core
    clojure.math.numeric-tower}]
 [metabase.util.encryption
  #{ring.util.codec
    clojure.tools.logging
    clojure.core
    metabase.util
    buddy.core.nonce
    buddy.core.codecs
    buddy.core.crypto
    buddy.core.kdf
    metabase.util.i18n
    clojure.string
    environ.core}]
 [taoensso.truss.impl #{clojure.core clojure.set}]
 [clojure.tools.analyzer.passes #{clojure.tools.analyzer.ast clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.source-info #{clojure.tools.analyzer.ast clojure.core clojure.tools.analyzer.utils}]
 [clojure.data.priority-map #{clojure.core}]
 [clojure.core.cache #{clojure.data.priority-map clojure.core}]
 [clojure.core.protocols #{clojure.core}]
 [clojure.datafy #{clojure.core.protocols clojure.core}]
 [clojure.reflect #{clojure.datafy clojure.core clojure.set clojure.string}]
 [clojure.core.memoize #{clojure.core.cache clojure.core}]
 [clojure.tools.analyzer.jvm.utils
  #{clojure.core.memoize
    clojure.reflect
    clojure.tools.analyzer.env
    clojure.core
    clojure.tools.analyzer.utils
    clojure.java.io
    clojure.string}]
 [clojure.tools.analyzer.passes.elide-meta #{clojure.core clojure.tools.analyzer.passes.source-info}]
 [clojure.tools.analyzer.passes.constant-lifter #{clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer #{clojure.tools.analyzer.env clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.analyze-host-expr
  #{clojure.tools.analyzer clojure.core clojure.tools.analyzer.utils clojure.tools.analyzer.jvm.utils}]
 [clojure.tools.analyzer.passes.jvm.constant-lifter
  #{clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer
    clojure.tools.analyzer.passes.constant-lifter
    clojure.tools.analyzer.passes.elide-meta
    clojure.core
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.annotate-tag
  #{clojure.tools.analyzer.passes.jvm.constant-lifter clojure.core clojure.tools.analyzer.jvm.utils}]
 [clojure.tools.analyzer.passes.uniquify
  #{clojure.tools.analyzer.ast clojure.tools.analyzer.env clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.add-binding-atom
  #{clojure.tools.analyzer.ast clojure.tools.analyzer.passes.uniquify clojure.core}]
 [clojure.tools.analyzer.passes.jvm.annotate-loops #{clojure.tools.analyzer.ast clojure.core}]
 [clojure.tools.analyzer.passes.jvm.fix-case-test #{clojure.core clojure.tools.analyzer.passes.add-binding-atom}]
 [clojure.tools.analyzer.passes.cleanup #{clojure.core}]
 [clojure.tools.analyzer.passes.jvm.annotate-host-info
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer
    clojure.tools.analyzer.passes.elide-meta
    clojure.tools.analyzer.passes.cleanup
    clojure.core
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.jvm.utils}]
 [clojure.tools.analyzer.passes.trim
  #{clojure.tools.analyzer.ast clojure.tools.analyzer.passes.elide-meta clojure.core}]
 [clojure.tools.analyzer.passes.jvm.infer-tag
  #{clojure.tools.analyzer.env
    clojure.tools.analyzer.passes.trim
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.annotate-host-info
    clojure.core
    clojure.set
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.fix-case-test
    clojure.tools.analyzer.passes.jvm.annotate-tag}]
 [clojure.tools.analyzer.passes.jvm.validate
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer.env
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.cleanup
    clojure.core
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate-recur}]
 [clojure.tools.analyzer.passes.jvm.classify-invoke
  #{clojure.core
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.validate}]
 [clojure.tools.analyzer.passes.jvm.validate-loop-locals
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.core
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.classify-invoke
    clojure.tools.analyzer.passes.jvm.validate}]
 [clojure.tools.analyzer.passes.jvm.box
  #{clojure.core
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate}]
 [clojure.core.async.impl.buffers #{clojure.core clojure.core.async.impl.protocols}]
 [clojure.tools.analyzer.passes.emit-form #{clojure.tools.analyzer.passes.uniquify clojure.core}]
 [clojure.tools.analyzer.passes.jvm.emit-form
  #{clojure.tools.analyzer.passes.uniquify clojure.tools.analyzer.passes.emit-form clojure.core}]
 [clojure.tools.analyzer.passes.jvm.warn-on-reflection
  #{clojure.core clojure.tools.analyzer.passes.jvm.validate-loop-locals clojure.tools.analyzer.passes.jvm.validate}]
 [clojure.tools.analyzer.passes.warn-earmuff #{clojure.core clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.jvm
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer.passes.uniquify
    clojure.tools.analyzer.passes.warn-earmuff
    clojure.core.memoize
    clojure.tools.analyzer.env
    clojure.tools.analyzer.passes.trim
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.constant-lifter
    clojure.tools.reader.reader-types
    clojure.tools.analyzer.passes.jvm.warn-on-reflection
    clojure.tools.analyzer
    clojure.tools.analyzer.passes.jvm.emit-form
    clojure.tools.analyzer.passes.elide-meta
    clojure.core
    clojure.tools.analyzer.passes.jvm.box
    clojure.tools.analyzer.utils
    clojure.tools.analyzer.passes.jvm.validate-loop-locals
    clojure.tools.analyzer.jvm.utils
    clojure.tools.reader
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.classify-invoke
    clojure.tools.analyzer.passes.jvm.validate
    clojure.java.io
    clojure.tools.analyzer.passes.source-info
    clojure.tools.analyzer.passes}]
 [clojure.core.async.impl.ioc-macros
  #{clojure.tools.analyzer.jvm
    clojure.tools.analyzer.ast
    clojure.tools.analyzer.env
    clojure.tools.analyzer.passes.jvm.warn-on-reflection
    clojure.tools.analyzer
    clojure.core
    clojure.set
    clojure.pprint
    clojure.core.async.impl.protocols
    clojure.core.async.impl.dispatch
    clojure.tools.analyzer.passes.jvm.annotate-loops
    clojure.tools.analyzer.passes}]
 [clojure.core.async
  #{clojure.core.async.impl.concurrent
    clojure.core.async.impl.channels
    clojure.core.async.impl.ioc-macros
    clojure.core.async.impl.buffers
    clojure.core
    clojure.core.async.impl.protocols
    clojure.core.async.impl.dispatch
    clojure.core.async.impl.mutex
    clojure.core.async.impl.timers}]
 [metabase.events
  #{clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    clojure.core.async
    metabase.util
    metabase.util.i18n
    clojure.string}]
 [metabase.db.spec #{metabase.config clojure.core clojure.string}]
 [clj-http.util #{clojure.core clojure.string clojure.walk}]
 [clj-http.headers #{potemkin clojure.core clojure.string}]
 [clj-http.multipart #{clojure.core}]
 [clj-http.conn-mgr #{clojure.core clojure.java.io clj-http.util}]
 [clj-http.core #{clj-http.conn-mgr clj-http.multipart clojure.core clojure.pprint clj-http.headers clj-http.util}]
 [java-time.util #{clojure.core clojure.string}]
 [java-time.potemkin.util #{clojure.core clj-tuple}]
 [java-time.core #{clojure.core}]
 [java-time.format #{java-time.core clojure.core clojure.string java-time.util}]
 [java-time.properties #{java-time.core clojure.core java-time.util}]
 [java-time.graph #{clojure.core clojure.set java-time.potemkin.util clojure.string clj-tuple java-time.util}]
 [java-time.clock #{java-time.core clojure.core}]
 [java-time.defconversion #{java-time.graph clojure.core clj-tuple}]
 [java-time.temporal
  #{java-time.defconversion
    java-time.clock
    java-time.properties
    java-time.format
    java-time.core
    clojure.core
    clojure.string
    java-time.util}]
 [java-time.local
  #{java-time.defconversion
    java-time.clock
    java-time.properties
    java-time.format
    java-time.core
    java-time.temporal
    clojure.core}]
 [java-time.convert
  #{java-time.local java-time.properties java-time.core java-time.temporal clojure.core java-time.util}]
 [java-time.amount
  #{java-time.convert
    java-time.local
    java-time.defconversion
    java-time.properties
    java-time.core
    clojure.core
    clojure.string
    java-time.util}]
 [java-time.zone
  #{java-time.amount
    java-time.defconversion
    java-time.clock
    java-time.properties
    java-time.format
    java-time.core
    java-time.temporal
    clojure.core
    java-time.util}]
 [java-time.single-field
  #{java-time.defconversion
    java-time.clock
    java-time.format
    java-time.core
    clojure.core
    java-time.zone
    clojure.string
    java-time.util}]
 [java-time.sugar #{java-time.core clojure.core java-time.util}]
 [java-time.chrono #{java-time.core clojure.core}]
 [java-time.adjuster #{clojure.core java-time.util java-time.single-field}]
 [java-time.pre-java8 #{java-time.convert java-time.local java-time.defconversion java-time.temporal clojure.core}]
 [java-time.interval #{java-time.amount java-time.core java-time.temporal clojure.core clojure.string java-time.util}]
 [java-time.mock #{java-time.amount java-time.core java-time.temporal clojure.core java-time.zone}]
 [java-time.joda
  #{java-time.local java-time.defconversion java-time.temporal clojure.core java-time.zone java-time.util}]
 [java-time.seqs #{clojure.core}]
 [java-time.potemkin.namespaces #{clojure.core}]
 [java-time
  #{java-time.convert
    java-time.potemkin.namespaces
    java-time.local
    java-time.seqs
    java-time.amount
    java-time.joda
    java-time.clock
    java-time.properties
    java-time.format
    java-time.core
    java-time.temporal
    clojure.core
    java-time.mock
    java-time.interval
    java-time.pre-java8
    java-time.adjuster
    java-time.chrono
    java-time.zone
    java-time.sugar
    java-time.util
    java-time.single-field}]
 [metabase.util.date-2.common #{clojure.core metabase.util java-time clojure.string}]
 [metabase.util.date-2.parse.builder #{clojure.core metabase.util.date-2.common}]
 [cheshire.parse #{clojure.core}]
 [honeysql.types #{clojure.core}]
 [cemerick.friend.credentials #{clojure.core}]
 [metabase.util.password
  #{metabase.config clojure.core metabase.util cemerick.friend.credentials clojure.java.io clojure.string}]
 [cheshire.generate-seq #{clojure.core cheshire.generate}]
 [cheshire.factory #{clojure.core}]
 [cheshire.core #{cheshire.factory cheshire.generate-seq clojure.core cheshire.generate cheshire.parse}]
 [honeysql.util #{clojure.core}]
 [honeysql.format #{clojure.core honeysql.types clojure.string}]
 [honeysql.helpers #{clojure.core}]
 [honeysql.core #{honeysql.helpers honeysql.format clojure.core honeysql.util honeysql.types clojure.string}]
 [clojure.java.jdbc #{clojure.core clojure.set clojure.string clojure.walk}]
 [toucan.util #{clojure.core clojure.string}]
 [toucan.models #{potemkin.types toucan.util honeysql.format clojure.core clojure.walk}]
 [toucan.db
  #{honeysql.helpers
    toucan.models
    toucan.util
    clojure.java.jdbc
    honeysql.format
    honeysql.core
    clojure.tools.logging
    clojure.core
    clojure.pprint
    clojure.string
    clojure.walk}]
 [metabase.db.env
  #{metabase.config
    ring.util.codec
    clojure.tools.logging
    clojure.core
    metabase.util
    clojure.java.io
    metabase.util.i18n
    clojure.walk
    metabase.db.spec}]
 [metabase.db.connection #{metabase.db.env clojure.core}]
 [metabase.util.schema
  #{schema.core
    schema.macros
    clojure.core
    metabase.util
    cheshire.core
    metabase.util.password
    metabase.util.i18n
    clojure.string
    clojure.walk
    schema.utils
    medley.core
    metabase.types}]
 [pretty.core #{clojure.core clojure.pprint}]
 [metabase.util.honeysql-extensions
  #{potemkin.types
    schema.core
    pretty.core
    metabase.util.schema
    honeysql.format
    honeysql.core
    clojure.core
    metabase.util
    clojure.pprint
    clojure.string}]
 [metabase.util.date-2.parse
  #{schema.core
    clojure.core
    metabase.util.date-2.common
    java-time
    metabase.util.i18n
    clojure.string
    metabase.util.date-2.parse.builder}]
 [clojure.data.csv #{clojure.core clojure.string}]
 [metabase.util.date-2
  #{potemkin.types
    schema.core
    java-time.core
    clojure.tools.logging
    clojure.core
    metabase.util.date-2.parse
    metabase.util.date-2.common
    java-time
    metabase.util.i18n
    clojure.string}]
 [metabase.models.setting.cache
  #{clojure.java.jdbc
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.db.connection
    toucan.db
    metabase.util.i18n}]
 [metabase.models.setting
  #{metabase.models.setting.cache
    toucan.models
    schema.core
    metabase.util.date-2
    clojure.data.csv
    clojure.tools.logging
    clojure.core
    metabase.util
    toucan.db
    cheshire.core
    metabase.util.i18n
    clojure.string
    clojure.data
    environ.core
    medley.core
    metabase.events}]
 [metabase.models.humanization
  #{clojure.tools.logging clojure.core metabase.models.setting toucan.db metabase.util.i18n clojure.string}]
 [toucan.hydrate #{toucan.models clojure.core toucan.db}]
 [instaparse.viz #{clojure.core}]
 [instaparse.print #{clojure.core clojure.string}]
 [instaparse.failure #{instaparse.print clojure.core}]
 [instaparse.auto-flatten-seq #{clojure.core.protocols clojure.core}]
 [instaparse.util #{clojure.core}]
 [instaparse.reduction #{clojure.core instaparse.util instaparse.auto-flatten-seq}]
 [instaparse.combinators-source #{instaparse.reduction clojure.core instaparse.util}]
 [instaparse.gll
  #{instaparse.combinators-source
    instaparse.print
    instaparse.reduction
    clojure.core
    instaparse.auto-flatten-seq
    instaparse.failure}]
 [instaparse.repeat
  #{instaparse.combinators-source
    instaparse.reduction
    clojure.core
    instaparse.auto-flatten-seq
    instaparse.failure
    instaparse.gll
    instaparse.viz}]
 [metabase.query-processor.error-type #{clojure.core}]
 [clojure.core.match.protocols #{clojure.core}]
 [slingshot.support #{clojure.core clojure.walk}]
 [slingshot.slingshot #{slingshot.support clojure.core}]
 [instaparse.macros #{clojure.core}]
 [instaparse.cfg
  #{instaparse.combinators-source instaparse.reduction clojure.core instaparse.util instaparse.gll clojure.string}]
 [instaparse.transform #{clojure.core instaparse.util instaparse.gll}]
 [instaparse.abnf
  #{instaparse.combinators-source
    instaparse.reduction
    instaparse.transform
    instaparse.cfg
    clojure.core
    instaparse.util
    instaparse.gll
    clojure.walk}]
 [instaparse.line-col #{instaparse.transform clojure.core instaparse.util}]
 [instaparse.core
  #{instaparse.combinators-source
    instaparse.line-col
    instaparse.print
    instaparse.reduction
    instaparse.transform
    instaparse.cfg
    clojure.core
    instaparse.util
    instaparse.abnf
    instaparse.failure
    instaparse.macros
    instaparse.gll
    instaparse.viz
    clojure.walk
    instaparse.repeat}]
 [clojure.core.match #{clojure.core clojure.set clojure.core.match.protocols}]
 [metabase.models.permissions.parse #{clojure.core clojure.core.match instaparse.core clojure.walk}]
 [net.cgrand.macrovich #{clojure.core}]
 [metabase.shared.util.log #{clojure.core net.cgrand.macrovich}]
 [metabase.models.permissions.delete-sandboxes
  #{pretty.core potemkin metabase.plugins.classloader clojure.core metabase.util}]
 [taoensso.truss #{clojure.core taoensso.truss.impl}]
 [taoensso.encore
  #{taoensso.truss clojure.tools.reader.edn clojure.core clojure.set clojure.java.io clojure.string clojure.walk}]
 [taoensso.nippy.crypto #{clojure.core taoensso.encore}]
 [metabase.driver.impl
  #{schema.core clojure.tools.logging metabase.plugins.classloader clojure.core metabase.util metabase.util.i18n}]
 [metabase.driver
  #{schema.core
    metabase.util.schema
    potemkin
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.driver.impl
    metabase.models.setting
    toucan.db
    metabase.util.i18n
    clojure.string}]
 [metabase.driver.util
  #{clojure.core.memoize
    metabase.config
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.util
    toucan.db
    metabase.util.i18n}]
 [metabase.mbql.schema.helpers #{schema.core clojure.core clojure.string metabase.types}]
 [metabase.mbql.schema.macros #{metabase.mbql.schema.helpers clojure.core}]
 [metabase.mbql.schema
  #{schema.core metabase.mbql.schema.helpers metabase.mbql.schema.macros clojure.core clojure.set}]
 [ring.util.mime-type #{clojure.core clojure.string}]
 [metabase.async.streaming-response.thread-pool #{metabase.config clojure.core}]
 [metabase.async.util #{schema.core clojure.tools.logging clojure.core clojure.core.async}]
 [compojure.response #{clojure.core ring.util.mime-type ring.util.response}]
 [metabase.async.streaming-response
  #{potemkin.types
    compojure.response
    pretty.core
    clojure.tools.logging
    metabase.async.util
    metabase.async.streaming-response.thread-pool
    clojure.core
    clojure.core.async
    metabase.util
    ring.util.servlet
    cheshire.core
    metabase.util.i18n
    ring.util.response
    metabase.server.protocols}]
 [metabase.api.common.internal
  #{potemkin.types
    schema.core
    metabase.config
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.async.streaming-response
    metabase.util.i18n
    clojure.string}]
 [metabase.util.cron #{schema.core metabase.util.schema clojure.core metabase.util.i18n clojure.string}]
 [clj-http.links #{clojure.core}]
 [taoensso.nippy.utils #{clojure.core clojure.string taoensso.encore}]
 [taoensso.nippy.encryption #{clojure.core taoensso.nippy.crypto taoensso.encore}]
 [taoensso.nippy.compression #{clojure.core taoensso.encore}]
 [taoensso.nippy
  #{taoensso.nippy.compression
    taoensso.nippy.encryption
    clojure.core
    taoensso.nippy.utils
    clojure.java.io
    clojure.string
    taoensso.encore}]
 [metabase.shared.util.i18n #{clojure.core net.cgrand.macrovich}]
 [metabase.mbql.util.match.impl #{clojure.core}]
 [metabase.mbql.util.match
  #{metabase.mbql.util.match.impl clojure.core clojure.core.match net.cgrand.macrovich clojure.walk}]
 [metabase.mbql.util
  #{schema.core
    metabase.mbql.util.match
    metabase.mbql.schema.helpers
    potemkin
    clojure.core
    metabase.shared.util.i18n
    metabase.mbql.schema
    clojure.string}]
 [metabase.mbql.normalize
  #{metabase.mbql.util.match
    metabase.mbql.util
    clojure.core
    clojure.set
    metabase.shared.util.i18n
    clojure.walk
    metabase.shared.util.log
    medley.core}]
 [clout.core #{clojure.core clojure.set instaparse.core clojure.string}]
 [ring.middleware.head #{clojure.core}]
 [clojure.tools.macro #{clojure.core clojure.string}]
 [compojure.core
  #{clojure.tools.macro ring.util.codec compojure.response clojure.core ring.middleware.head clout.core medley.core}]
 [clj-http.cookies #{clojure.core clojure.string clj-http.util}]
 [clojure.stacktrace #{clojure.core}]
 [clj-http.client
  #{clj-http.conn-mgr
    clojure.stacktrace
    clojure.core
    clj-http.cookies
    clj-http.links
    clojure.java.io
    clojure.string
    clojure.walk
    slingshot.slingshot
    clj-http.headers
    clj-http.util
    clj-http.core}]
 [metabase.public-settings.metastore
  #{clojure.core.memoize
    clj-http.client
    schema.core
    metabase.config
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.models.setting
    toucan.db
    cheshire.core
    metabase.util.i18n
    clojure.string
    environ.core}]
 [metabase.models.interface
  #{clojure.core.memoize
    potemkin.types
    toucan.models
    schema.core
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.mbql.normalize
    taoensso.nippy
    metabase.db.connection
    cheshire.core
    metabase.util.cron
    metabase.mbql.schema
    metabase.util.i18n
    clojure.walk
    metabase.util.encryption}]
 [metabase.public-settings
  #{metabase.config
    metabase.public-settings.metastore
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.models.setting
    toucan.db
    metabase.util.password
    java-time
    metabase.driver.util
    metabase.util.i18n
    clojure.string}]
 [metabase.api.common
  #{metabase.public-settings
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    compojure.core
    toucan.db
    metabase.api.common.internal
    honeysql.types
    metabase.util.i18n
    clojure.string
    medley.core}]
 [metabase.models.permissions-group
  #{toucan.models
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.db.connection
    metabase.models.setting
    toucan.db
    metabase.util.i18n
    clojure.string}]
 [metabase.util.regex #{clojure.core clojure.string}]
 [metabase.models.permissions-revision #{toucan.models clojure.core metabase.util toucan.db metabase.util.i18n}]
 [metabase.models.permissions
  #{toucan.models
    schema.core
    metabase.config
    metabase.models.permissions-revision
    metabase.util.regex
    metabase.models.interface
    metabase.models.permissions-group
    metabase.util.schema
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util.honeysql-extensions
    clojure.core.match
    metabase.util
    toucan.db
    metabase.util.i18n
    clojure.string
    clojure.data
    metabase.api.common
    metabase.models.permissions.delete-sandboxes
    metabase.models.permissions.parse
    medley.core}]
 [metabase.db.util #{schema.core metabase.util.schema clojure.core metabase.util toucan.db}]
 [metabase.models.dimension #{toucan.models clojure.core metabase.util}]
 [metabase.models.field-values
  #{toucan.models
    schema.core
    metabase.util.schema
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    toucan.db
    metabase.util.i18n}]
 [metabase.models.field
  #{clojure.core.memoize
    toucan.models
    metabase.models.interface
    metabase.models.field-values
    metabase.models.dimension
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.models.permissions
    toucan.db
    metabase.util.i18n
    clojure.string
    toucan.hydrate
    metabase.models.humanization
    medley.core}]
 [metabase.models.params.field-values
  #{metabase.models.interface
    metabase.models.field-values
    pretty.core
    potemkin
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.models.field
    metabase.util
    toucan.db}]
 [metabase.models.params
  #{metabase.models.params.field-values
    schema.core
    metabase.mbql.util
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.util
    metabase.mbql.normalize
    metabase.db.util
    toucan.db
    metabase.mbql.schema
    metabase.util.i18n
    toucan.hydrate}]
 [metabase.driver.common.parameters.dates
  #{schema.core
    metabase.mbql.util
    metabase.util.date-2
    metabase.util.schema
    metabase.models.params
    clojure.core
    java-time
    metabase.mbql.schema
    metabase.util.i18n
    metabase.query-processor.error-type
    medley.core}]
 [metabase.db.liquibase
  #{clojure.java.jdbc clojure.tools.logging clojure.core metabase.util metabase.util.i18n clojure.string}]
 [metabase.models.database
  #{toucan.models
    metabase.models.interface
    metabase.models.permissions-group
    metabase.driver
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    cheshire.generate
    metabase.util
    metabase.db.util
    metabase.models.permissions
    toucan.db
    metabase.driver.util
    metabase.util.i18n
    metabase.api.common
    medley.core}]
 [metabase.util.ssh #{metabase.public-settings metabase.driver clojure.tools.logging clojure.core metabase.util}]
 [metabase.connection-pool #{clojure.core}]
 [metabase.driver.sql-jdbc.connection
  #{metabase.config
    metabase.connection-pool
    metabase.util.ssh
    clojure.java.jdbc
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.util
    toucan.db
    metabase.models.database
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.db.setup
  #{metabase.driver.sql-jdbc.connection
    schema.core
    clojure.java.jdbc
    metabase.util.schema
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.db.connection
    metabase.models.setting
    toucan.db
    metabase.util.i18n
    metabase.db.liquibase}]
 [metabase.db.jdbc-protocols
  #{clojure.java.jdbc
    metabase.util.date-2
    clojure.tools.logging
    clojure.core
    metabase.db.connection
    java-time
    clojure.string}]
 [metabase.db.connection-pool-setup
  #{schema.core
    metabase.config
    metabase.connection-pool
    metabase.db.jdbc-protocols
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.db.connection
    toucan.db
    metabase.util.i18n}]
 [metabase.db
  #{metabase.config potemkin metabase.db.connection-pool-setup clojure.core metabase.db.connection metabase.db.setup}]
 [user-agent #{clojure.core clojure.string}]
 [metabase.server.request.util
  #{metabase.public-settings
    clj-http.client
    schema.core
    metabase.config
    metabase.util.schema
    user-agent
    clojure.tools.logging
    clojure.core
    metabase.util
    cheshire.core
    java-time
    metabase.util.i18n
    clojure.string}]
 [metabase.server.middleware.misc
  #{metabase.public-settings
    clojure.tools.logging
    clojure.core
    metabase.async.streaming-response
    metabase.server.request.util
    metabase.db
    metabase.util.i18n
    clojure.string}]
 [metabase.models.session
  #{toucan.models
    schema.core
    clojure.core
    metabase.util
    metabase.server.request.util
    buddy.core.nonce
    buddy.core.codecs
    metabase.server.middleware.misc}]
 [metabase.models.collection.root
  #{potemkin.types
    toucan.models
    metabase.models.interface
    metabase.public-settings.metastore
    clojure.core
    metabase.util
    metabase.models.permissions}]
 [metabase.models.permissions-group-membership
  #{toucan.models metabase.models.permissions-group clojure.core metabase.util toucan.db metabase.util.i18n}]
 [metabase.models.collection
  #{clojure.core.memoize
    toucan.models
    schema.core
    metabase.models.interface
    metabase.public-settings.metastore
    metabase.util.schema
    honeysql.core
    potemkin
    clojure.tools.logging
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.models.collection.root
    metabase.models.permissions
    toucan.db
    metabase.util.i18n
    clojure.string
    metabase.api.common
    toucan.hydrate}]
 [metabase.models.user
  #{metabase.public-settings
    toucan.models
    schema.core
    metabase.models.collection
    metabase.models.permissions-group
    metabase.util.schema
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.models.permissions-group-membership
    metabase.util
    cemerick.friend.credentials
    metabase.models.permissions
    toucan.db
    metabase.models.session
    metabase.util.i18n
    clojure.string
    clojure.data}]
 [metabase.models.revision.diff #{clojure.core clojure.core.match clojure.string}]
 [metabase.models.revision
  #{potemkin.types
    toucan.models
    metabase.models.revision.diff
    clojure.core
    metabase.util
    metabase.models.user
    toucan.db
    metabase.util.i18n
    clojure.data
    toucan.hydrate}]
 [metabase.models.segment
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.core
    metabase.util
    metabase.models.revision
    toucan.db
    metabase.util.i18n
    toucan.hydrate
    medley.core}]
 [metabase.models.dependency #{potemkin.types toucan.models clojure.core clojure.set toucan.db}]
 [metabase.models.metric
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.mbql.util
    metabase.util.schema
    clojure.core
    metabase.util
    metabase.models.revision
    metabase.models.dependency
    toucan.db
    metabase.util.i18n
    toucan.hydrate
    medley.core}]
 [metabase.models.table
  #{toucan.models
    metabase.models.metric
    metabase.models.interface
    metabase.models.field-values
    metabase.driver
    honeysql.core
    clojure.core
    metabase.models.field
    metabase.util
    metabase.db.util
    metabase.models.permissions
    toucan.db
    metabase.models.database
    metabase.models.segment
    metabase.models.humanization}]
 [metabase.query-processor.store
  #{metabase.models.table
    schema.core
    metabase.util.schema
    clojure.core
    metabase.models.field
    metabase.util
    toucan.db
    metabase.models.database
    metabase.util.i18n}]
 [metabase.query-processor.middleware.binning
  #{metabase.public-settings
    schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.query-processor.store
    clojure.core
    metabase.util
    metabase.mbql.schema
    metabase.util.i18n
    metabase.query-processor.error-type
    clojure.math.numeric-tower}]
 [metabase.query-processor.timezone
  #{metabase.config
    metabase.driver
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    java-time
    metabase.util.i18n}]
 [metabase.query-processor.middleware.wrap-value-literals
  #{metabase.mbql.util
    metabase.util.date-2
    metabase.query-processor.store
    clojure.core
    metabase.models.field
    metabase.query-processor.timezone
    metabase.mbql.schema
    metabase.types}]
 [redux.utils #{clojure.core}]
 [kixi.stats.math #{clojure.core}]
 [kixi.stats.protocols #{clojure.core}]
 [clojure.test.check.random #{clojure.core}]
 [kixi.stats.distribution #{clojure.core clojure.test.check.random kixi.stats.protocols kixi.stats.math}]
 [kixi.stats.digest #{kixi.stats.distribution clojure.core}]
 [clj-time.core #{clojure.core}]
 [metabase.sync.interface
  #{metabase.models.table
    schema.core
    metabase.util.schema
    clj-time.core
    clojure.core
    metabase.models.field
    metabase.util
    metabase.models.database}]
 [metabase.models.task-history
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    cheshire.generate
    metabase.util
    toucan.db
    java-time
    metabase.util.i18n}]
 [metabase.query-processor.interface #{clojure.core}]
 [metabase.sync.util
  #{metabase.models.table
    metabase.query-processor.interface
    buddy.core.hash
    schema.core
    metabase.models.task-history
    ring.util.codec
    metabase.util.date-2
    metabase.util.schema
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.sync.interface
    taoensso.nippy
    toucan.db
    java-time
    metabase.driver.util
    metabase.util.i18n
    clojure.string
    medley.core
    clojure.math.numeric-tower
    metabase.events}]
 [metabase.sync.analyze.classifiers.name
  #{schema.core
    metabase.config
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.sync.interface
    metabase.sync.util
    metabase.models.database
    clojure.string}]
 [clojure.math.combinatorics #{clojure.core}]
 [kixi.stats.test #{clojure.math.combinatorics clojure.core kixi.stats.protocols kixi.stats.math}]
 [bigml.histogram.core #{clojure.core}]
 [redux.core #{clojure.core redux.utils}]
 [kixi.stats.core
  #{kixi.stats.distribution
    redux.core
    kixi.stats.test
    clojure.core
    kixi.stats.protocols
    kixi.stats.math
    kixi.stats.digest}]
 [metabase.sync.analyze.fingerprint.fingerprinters
  #{redux.core
    metabase.util.date-2
    kixi.stats.core
    bigml.histogram.core
    clojure.core
    metabase.util
    metabase.sync.analyze.classifiers.name
    kixi.stats.math
    metabase.sync.util
    java-time
    metabase.util.i18n
    medley.core}]
 [metabase.query-processor.context #{metabase.async.util clojure.core}]
 [metabase.query-processor.context.default
  #{metabase.config
    metabase.driver
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    metabase.query-processor.context
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.reducible
  #{clojure.tools.logging
    metabase.async.util
    clojure.core
    clojure.core.async
    metabase.util
    metabase.query-processor.context.default
    metabase.query-processor.context}]
 [clj-time.format #{clj-time.core clojure.core clojure.set}]
 [clj-time.coerce #{clj-time.core clojure.core clj-time.format}]
 [metabase.moderation #{schema.core clojure.core metabase.util toucan.db clojure.string}]
 [metabase.driver.common
  #{schema.core
    metabase.driver
    metabase.query-processor.store
    clj-time.core
    clojure.tools.logging
    clojure.core
    clj-time.format
    metabase.util
    metabase.query-processor.context.default
    metabase.models.setting
    clj-time.coerce
    metabase.driver.util
    metabase.util.i18n}]
 [metabase.mbql.predicates #{schema.core clojure.core metabase.mbql.schema}]
 [metabase.query-processor.middleware.annotate
  #{metabase.mbql.predicates
    schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.driver
    metabase.query-processor.store
    clojure.core
    metabase.driver.common
    clojure.set
    metabase.util
    metabase.mbql.schema
    metabase.util.i18n
    clojure.string
    metabase.query-processor.reducible
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.query-processor.error-type
    metabase.models.humanization
    medley.core}]
 [metabase.driver.sql.query-processor
  #{honeysql.helpers
    potemkin.types
    metabase.models.table
    metabase.query-processor.interface
    schema.core
    metabase.mbql.util
    pretty.core
    metabase.util.schema
    metabase.driver
    metabase.query-processor.middleware.annotate
    metabase.query-processor.store
    honeysql.format
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.driver.common
    metabase.util.honeysql-extensions
    clojure.core.match
    metabase.models.field
    metabase.util
    metabase.mbql.schema
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type
    metabase.query-processor.middleware.wrap-value-literals}]
 [metabase.core.initialization-status #{clojure.core}]
 [metabase.server.middleware.session
  #{metabase.public-settings
    schema.core
    metabase.config
    metabase.core.initialization-status
    clojure.java.jdbc
    metabase.driver.sql.query-processor
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.server.request.util
    metabase.models.user
    metabase.db
    toucan.db
    metabase.models.session
    metabase.util.i18n
    metabase.api.common
    ring.util.response}]
 [metabase.models.query
  #{toucan.models
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.mbql.normalize
    metabase.db
    toucan.db
    cheshire.core}]
 [metabase.query-processor.util
  #{buddy.core.hash
    schema.core
    metabase.util.schema
    metabase.driver
    clojure.core
    buddy.core.codecs
    cheshire.core
    clojure.string}]
 [metabase.models.card
  #{metabase.query-processor.util
    metabase.public-settings
    toucan.models
    metabase.models.interface
    metabase.models.field-values
    metabase.models.query
    metabase.models.collection
    metabase.server.middleware.session
    metabase.mbql.util
    metabase.models.params
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    clojure.set
    metabase.util
    metabase.models.revision
    metabase.mbql.normalize
    metabase.moderation
    metabase.models.dependency
    metabase.models.permissions
    toucan.db
    metabase.util.i18n}]
 [metabase.query-processor.middleware.resolve-source-table
  #{schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.query-processor.store
    clojure.core
    metabase.util.i18n}]
 [metabase.query-processor.middleware.resolve-fields
  #{metabase.mbql.util
    metabase.query-processor.store
    clojure.core
    metabase.util
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.resolve-referenced
  #{schema.core
    metabase.query-processor.middleware.resolve-fields
    metabase.query-processor.middleware.resolve-source-table
    weavejester.dependency
    clojure.core
    metabase.models.card
    toucan.db
    metabase.util.i18n}]
 [metabase.models.query.permissions
  #{metabase.query-processor.util
    metabase.models.table
    schema.core
    metabase.models.interface
    metabase.mbql.util
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.mbql.normalize
    metabase.models.permissions
    toucan.db
    metabase.util.i18n
    metabase.api.common}]
 [metabase.query-processor.middleware.permissions
  #{schema.core
    metabase.models.interface
    metabase.util.schema
    metabase.models.query.permissions
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.models.card
    metabase.models.permissions
    toucan.db
    metabase.util.i18n
    metabase.query-processor.middleware.resolve-referenced
    metabase.api.common
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.fetch-source-query
  #{metabase.query-processor.interface
    schema.core
    metabase.mbql.util
    metabase.util.schema
    clojure.tools.logging
    weavejester.dependency
    clojure.core
    clojure.set
    metabase.util
    metabase.query-processor.middleware.permissions
    metabase.mbql.normalize
    metabase.models.card
    toucan.db
    metabase.mbql.schema
    metabase.util.i18n
    clojure.string
    medley.core}]
 [metabase.models.query-cache #{toucan.models clojure.core metabase.util}]
 [metabase.query-processor.middleware.desugar
  #{metabase.mbql.predicates schema.core metabase.mbql.util clojure.core metabase.mbql.schema medley.core}]
 [clojure.future #{clojure.core}]
 [clojure.spec.gen.alpha #{clojure.future clojure.core}]
 [clojure.spec.alpha #{clojure.future clojure.core clojure.spec.gen.alpha clojure.string clojure.walk}]
 [metabase.shared.models.visualization-settings
  #{clojure.spec.alpha clojure.core clojure.set metabase.mbql.normalize cheshire.core medley.core}]
 [metabase.query-processor.middleware.visualization-settings
  #{metabase.shared.models.visualization-settings
    metabase.query-processor.store
    clojure.core
    metabase.models.card
    toucan.db}]
 [metabase.query-processor.middleware.cumulative-aggregations
  #{schema.core metabase.mbql.util clojure.core metabase.mbql.schema}]
 [metabase.query-processor.middleware.store #{metabase.query-processor.store clojure.core}]
 [metabase.query-processor.middleware.cache-backend.interface #{potemkin.types clojure.core buddy.core.codecs}]
 [metabase.driver.common.parameters
  #{potemkin.types
    schema.core
    pretty.core
    metabase.util.schema
    clojure.core
    metabase.models.setting
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.automagic-dashboards.filters
  #{schema.core
    metabase.mbql.util
    metabase.util.date-2
    clojure.core
    metabase.models.field
    metabase.util
    metabase.mbql.normalize
    toucan.db
    metabase.mbql.schema}]
 [metabase.query-processor.middleware.add-default-temporal-unit
  #{metabase.mbql.util metabase.query-processor.store clojure.core}]
 [metabase.query-processor.middleware.cache.impl
  #{metabase.public-settings
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    taoensso.nippy
    metabase.util.i18n}]
 [metabase.query-processor.middleware.add-source-metadata
  #{metabase.query-processor.interface
    schema.core
    metabase.mbql.util
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    metabase.mbql.schema
    metabase.util.i18n
    clojure.walk
    metabase.api.common}]
 [metabase.models.query-execution
  #{toucan.models schema.core clojure.core metabase.util metabase.mbql.schema metabase.util.i18n}]
 [metabase.models.pulse-card #{toucan.models schema.core metabase.util.schema clojure.core metabase.util toucan.db}]
 [metabase.query-processor.middleware.resolve-joined-fields
  #{schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.mbql.schema
    metabase.util.i18n
    clojure.data
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.large-int-id #{metabase.mbql.util clojure.core metabase.models.field toucan.db}]
 [metabase.sync.analyze.fingerprint.insights
  #{redux.core
    metabase.mbql.util
    metabase.util.date-2
    kixi.stats.core
    clojure.core
    metabase.models.field
    kixi.stats.math
    metabase.sync.util
    java-time
    metabase.util.i18n
    metabase.sync.analyze.fingerprint.fingerprinters
    medley.core}]
 [metabase.sync.analyze.query-results
  #{metabase.sync.analyze.fingerprint.insights
    metabase.mbql.predicates
    schema.core
    redux.core
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.sync.interface
    metabase.sync.analyze.classifiers.name
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.util.i18n
    metabase.sync.analyze.fingerprint.fingerprinters}]
 [metabase.query-processor.middleware.upgrade-field-literals
  #{metabase.mbql.util clojure.core metabase.util clojure.walk}]
 [metabase.query-processor.middleware.limit
  #{metabase.query-processor.util metabase.query-processor.interface metabase.mbql.util clojure.core}]
 [metabase.models.dashboard-card-series #{toucan.models clojure.core}]
 [metabase.models.dashboard-card
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.core
    clojure.set
    metabase.util
    metabase.models.dashboard-card-series
    metabase.db.util
    metabase.models.card
    metabase.models.pulse-card
    toucan.db
    toucan.hydrate
    metabase.events}]
 [metabase.driver.common.parameters.operators
  #{schema.core metabase.models.params clojure.core metabase.mbql.schema metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.add-rows-truncated
  #{metabase.query-processor.util metabase.query-processor.interface clojure.core}]
 [metabase.query-processor.middleware.constraints #{clojure.core}]
 [metabase.models.pulse-channel-recipient #{toucan.models clojure.core}]
 [metabase.query-processor.middleware.add-timezone-info #{clojure.core metabase.query-processor.timezone}]
 [metabase.query-processor.middleware.parameters.mbql
  #{schema.core
    metabase.mbql.util
    metabase.models.params
    clojure.core
    metabase.models.field
    metabase.driver.common.parameters.operators
    toucan.db
    metabase.mbql.schema
    metabase.driver.common.parameters
    metabase.driver.common.parameters.dates}]
 [metabase.query-processor.middleware.parameters.native #{metabase.driver clojure.core clojure.set}]
 [metabase.query-processor.middleware.parameters
  #{metabase.query-processor.interface
    schema.core
    metabase.query-processor.middleware.parameters.native
    metabase.mbql.util
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.query-processor.middleware.parameters.mbql
    metabase.util
    metabase.mbql.normalize
    metabase.mbql.schema
    clojure.data
    medley.core}]
 [metabase.models.pulse-channel
  #{toucan.models
    schema.core
    metabase.models.interface
    clojure.core
    clojure.set
    cheshire.generate
    metabase.util
    metabase.models.pulse-channel-recipient
    metabase.models.user
    toucan.db
    medley.core}]
 [metabase.query-processor.middleware.auto-bucket-datetimes
  #{metabase.mbql.predicates
    schema.core
    metabase.mbql.util
    metabase.util.schema
    clojure.core
    clojure.set
    metabase.models.field
    toucan.db
    metabase.mbql.schema
    clojure.walk
    medley.core}]
 [metabase.models.pulse
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.models.collection
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.models.pulse-channel
    metabase.util
    metabase.models.pulse-channel-recipient
    metabase.models.dashboard-card
    metabase.models.card
    metabase.models.permissions
    metabase.models.pulse-card
    toucan.db
    metabase.util.i18n
    clojure.string
    toucan.hydrate
    medley.core
    metabase.events}]
 [metabase.query-processor.middleware.results-metadata
  #{buddy.core.hash
    ring.util.codec
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.sync.analyze.query-results
    toucan.db
    cheshire.core
    metabase.util.i18n
    clojure.walk
    metabase.query-processor.reducible
    metabase.util.encryption}]
 [metabase.query-processor.middleware.mbql-to-native
  #{metabase.driver clojure.tools.logging clojure.core metabase.util metabase.query-processor.context}]
 [metabase.query-processor.middleware.auto-parse-filter-values
  #{schema.core
    metabase.mbql.util
    metabase.util.schema
    clojure.core
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.add-dimension-projections
  #{schema.core
    metabase.models.dimension
    metabase.mbql.util
    metabase.util.schema
    clojure.core
    metabase.models.field
    metabase.util
    toucan.db
    metabase.mbql.schema
    toucan.hydrate
    medley.core}]
 [metabase.query-processor.middleware.cache-backend.db
  #{metabase.util.date-2
    honeysql.core
    clojure.tools.logging
    clojure.core
    toucan.db
    java-time
    metabase.util.i18n
    metabase.query-processor.middleware.cache-backend.interface
    metabase.models.query-cache}]
 [metabase.query-processor.middleware.check-features
  #{metabase.mbql.util
    metabase.driver
    clojure.core
    metabase.util
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.add-implicit-clauses
  #{metabase.models.table
    metabase.query-processor.interface
    schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    toucan.db
    metabase.mbql.schema
    metabase.util.i18n
    metabase.query-processor.error-type
    metabase.types}]
 [metabase.query-processor.middleware.resolve-database-and-driver
  #{metabase.driver
    metabase.query-processor.store
    clojure.core
    metabase.util
    metabase.mbql.schema
    metabase.driver.util
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.cache
  #{metabase.query-processor.util
    metabase.public-settings
    metabase.config
    clojure.tools.logging
    metabase.query-processor.middleware.cache-backend.db
    clojure.core
    clojure.core.async
    metabase.util
    metabase.query-processor.context
    metabase.query-processor.middleware.cache.impl
    java-time
    metabase.util.i18n
    metabase.query-processor.middleware.cache-backend.interface
    medley.core}]
 [metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing
  #{schema.core metabase.mbql.util clojure.core metabase.mbql.schema}]
 [metabase.query-processor.middleware.process-userland-query
  #{metabase.query-processor.util
    metabase.models.query
    clojure.tools.logging
    clojure.core
    toucan.db
    metabase.models.query-execution
    java-time
    metabase.util.i18n}]
 [metabase.query-processor.middleware.validate #{clojure.core metabase.mbql.schema}]
 [metabase.query-processor.middleware.normalize-query
  #{clojure.tools.logging clojure.core metabase.util metabase.mbql.normalize metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.pre-alias-aggregations
  #{metabase.mbql.util metabase.driver metabase.query-processor.middleware.annotate clojure.core}]
 [metabase.query-processor.middleware.add-implicit-joins
  #{metabase.models.table
    metabase.mbql.util
    metabase.driver
    metabase.query-processor.store
    metabase.query-processor.middleware.add-implicit-clauses
    clojure.core
    clojure.set
    metabase.models.field
    metabase.util
    metabase.db.util
    toucan.db
    metabase.util.i18n
    metabase.query-processor.error-type
    medley.core}]
 [metabase.query-processor.middleware.format-rows
  #{potemkin.types
    metabase.util.date-2
    clojure.tools.logging
    clojure.core
    metabase.query-processor.timezone
    java-time
    metabase.util.i18n}]
 [metabase.query-processor.middleware.splice-params-in-response #{metabase.driver clojure.core}]
 [metabase.query-processor.middleware.catch-exceptions
  #{clojure.tools.logging
    clojure.core
    metabase.util
    metabase.query-processor.middleware.permissions
    metabase.query-processor.context
    metabase.util.i18n
    schema.utils
    metabase.query-processor.reducible
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.resolve-joins
  #{schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.query-processor.store
    metabase.query-processor.middleware.add-implicit-clauses
    clojure.core
    metabase.util
    metabase.mbql.schema
    metabase.util.i18n}]
 [metabase.query-processor.middleware.optimize-temporal-filters
  #{schema.core
    metabase.mbql.util
    metabase.util.date-2
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.util.i18n
    clojure.walk}]
 [metabase.query-processor.middleware.validate-temporal-bucketing
  #{metabase.mbql.util
    metabase.query-processor.store
    clojure.core
    clojure.set
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [metabase.query-processor.middleware.expand-macros
  #{schema.core
    metabase.models.metric
    metabase.mbql.util
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    toucan.db
    metabase.mbql.schema
    metabase.util.i18n
    metabase.models.segment}]
 [metabase.query-processor
  #{metabase.query-processor.middleware.expand-macros
    metabase.query-processor.middleware.validate-temporal-bucketing
    metabase.query-processor.middleware.optimize-temporal-filters
    metabase.query-processor.middleware.resolve-joins
    metabase.query-processor.middleware.catch-exceptions
    metabase.query-processor.middleware.splice-params-in-response
    schema.core
    metabase.query-processor.middleware.format-rows
    metabase.config
    metabase.query-processor.middleware.add-implicit-joins
    metabase.query-processor.middleware.pre-alias-aggregations
    metabase.mbql.util
    metabase.query-processor.middleware.resolve-fields
    metabase.query-processor.middleware.normalize-query
    metabase.query-processor.middleware.validate
    metabase.driver
    metabase.query-processor.middleware.resolve-source-table
    metabase.query-processor.middleware.annotate
    metabase.query-processor.middleware.process-userland-query
    metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing
    metabase.query-processor.store
    metabase.query-processor.middleware.cache
    metabase.query-processor.middleware.resolve-database-and-driver
    metabase.query-processor.middleware.add-implicit-clauses
    metabase.query-processor.middleware.check-features
    clojure.tools.logging
    metabase.query-processor.middleware.add-dimension-projections
    metabase.plugins.classloader
    metabase.query-processor.middleware.auto-parse-filter-values
    clojure.core
    metabase.query-processor.middleware.mbql-to-native
    metabase.query-processor.middleware.results-metadata
    metabase.query-processor.middleware.auto-bucket-datetimes
    metabase.query-processor.middleware.parameters
    metabase.util
    metabase.query-processor.middleware.add-timezone-info
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.add-rows-truncated
    metabase.query-processor.middleware.permissions
    metabase.query-processor.middleware.limit
    metabase.query-processor.middleware.upgrade-field-literals
    metabase.query-processor.middleware.large-int-id
    metabase.query-processor.middleware.resolve-joined-fields
    metabase.query-processor.context
    metabase.query-processor.middleware.add-source-metadata
    metabase.query-processor.middleware.add-default-temporal-unit
    metabase.driver.util
    metabase.util.i18n
    metabase.query-processor.middleware.resolve-referenced
    metabase.query-processor.middleware.store
    metabase.query-processor.middleware.cumulative-aggregations
    metabase.query-processor.middleware.visualization-settings
    metabase.query-processor.reducible
    metabase.query-processor.middleware.desugar
    metabase.query-processor.error-type
    metabase.query-processor.middleware.wrap-value-literals
    metabase.query-processor.middleware.fetch-source-query
    metabase.query-processor.middleware.binning}]
 [metabase.query-processor.async
  #{metabase.query-processor
    metabase.query-processor.util
    metabase.query-processor.interface
    schema.core
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    metabase.query-processor.context
    metabase.util.i18n
    metabase.api.common}]
 [metabase.automagic-dashboards.populate
  #{metabase.query-processor.util
    metabase.models.collection
    clojure.tools.logging
    clojure.core
    metabase.models.card
    toucan.db
    metabase.automagic-dashboards.filters
    metabase.util.i18n
    clojure.string
    metabase.api.common
    medley.core}]
 [metabase.models.dashboard
  #{metabase.automagic-dashboards.populate
    metabase.query-processor.async
    metabase.public-settings
    toucan.models
    schema.core
    metabase.models.interface
    metabase.models.field-values
    metabase.models.collection
    metabase.models.revision.diff
    metabase.util.schema
    metabase.models.params
    clojure.tools.logging
    clojure.core
    clojure.set
    clojure.core.async
    metabase.models.pulse
    metabase.util
    metabase.models.dashboard-card
    metabase.models.revision
    metabase.moderation
    metabase.models.card
    metabase.models.permissions
    metabase.models.pulse-card
    toucan.db
    metabase.util.i18n
    clojure.string
    clojure.data
    toucan.hydrate
    metabase.events}]
 [scout.core #{clojure.core}]
 [metabase.sync.sync-metadata.sync-timezone
  #{schema.core
    metabase.driver
    clojure.core
    metabase.sync.interface
    toucan.db
    metabase.models.database
    metabase.driver.util}]
 [metabase.models.moderation-review
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.core
    metabase.util
    metabase.moderation
    metabase.models.permissions
    toucan.db}]
 [metabase.query-processor.streaming.interface #{potemkin.types clojure.core}]
 [postal.support #{clojure.core clojure.java.io}]
 [postal.date #{clojure.core}]
 [postal.message #{postal.date postal.support clojure.core clojure.set clojure.java.io}]
 [metabase.pulse.render.style #{metabase.public-settings clojure.core clojure.string}]
 [metabase.sync.sync-metadata.fields.common
  #{schema.core
    metabase.util.schema
    clojure.core
    metabase.sync.interface
    metabase.sync.util
    metabase.util.i18n
    clojure.string}]
 [metabase.sync.fetch-metadata
  #{schema.core metabase.driver clojure.core metabase.sync.interface metabase.driver.util}]
 [metabase.sync.sync-metadata.fields.fetch-metadata
  #{metabase.models.table
    schema.core
    metabase.sync.fetch-metadata
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.common
    toucan.db
    medley.core}]
 [metabase.sync.sync-metadata.fields.sync-instances
  #{schema.core
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.fetch-metadata
    metabase.sync.util
    metabase.sync.sync-metadata.fields.common
    toucan.db
    metabase.util.i18n
    metabase.models.humanization}]
 [metabase.sync.sync-metadata.fields.sync-metadata
  #{schema.core
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    metabase.sync.sync-metadata.fields.common
    toucan.db
    metabase.util.i18n
    clojure.string}]
 [metabase.sync.sync-metadata.fields
  #{metabase.models.table
    schema.core
    metabase.util.schema
    clojure.core
    metabase.sync.sync-metadata.fields.sync-metadata
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.fetch-metadata
    metabase.sync.util
    metabase.sync.sync-metadata.fields.sync-instances
    metabase.util.i18n}]
 [metabase.sync.sync-metadata.metabase-metadata
  #{metabase.models.table
    schema.core
    metabase.sync.fetch-metadata
    metabase.util.schema
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    toucan.db
    metabase.driver.util
    clojure.string}]
 [metabase.sync.sync-metadata.tables
  #{metabase.models.table
    schema.core
    metabase.sync.fetch-metadata
    clojure.tools.logging
    clojure.core
    metabase.sync.sync-metadata.metabase-metadata
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    toucan.db
    metabase.util.i18n
    clojure.string
    clojure.data
    metabase.models.humanization}]
 [metabase.sync.field-values
  #{schema.core
    metabase.models.field-values
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    toucan.db
    metabase.util.i18n}]
 [metabase.sync.analyze.classifiers.category
  #{schema.core
    metabase.models.field-values
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.sync.interface
    metabase.sync.util}]
 [metabase.sync.analyze.classifiers.text-fingerprint
  #{schema.core metabase.util.schema clojure.tools.logging clojure.core metabase.sync.interface metabase.sync.util}]
 [metabase.db.metadata-queries
  #{metabase.query-processor
    metabase.models.table
    metabase.query-processor.interface
    schema.core
    metabase.util.schema
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.sync.interface
    toucan.db
    metabase.driver.util}]
 [metabase.sync.analyze.fingerprint
  #{metabase.db.metadata-queries
    honeysql.helpers
    schema.core
    redux.core
    metabase.util.schema
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    metabase.db.util
    toucan.db
    metabase.util.i18n
    metabase.sync.analyze.fingerprint.fingerprinters}]
 [metabase.sync.analyze.classifiers.no-preview-display #{schema.core clojure.core metabase.sync.interface}]
 [metabase.sync.analyze.classify
  #{metabase.models.table
    schema.core
    metabase.sync.analyze.classifiers.no-preview-display
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.analyze.classifiers.text-fingerprint
    metabase.sync.analyze.classifiers.category
    metabase.sync.interface
    metabase.sync.analyze.classifiers.name
    metabase.sync.util
    toucan.db
    clojure.data}]
 [metabase.sync.sync-metadata.fks
  #{metabase.models.table
    schema.core
    metabase.sync.fetch-metadata
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    toucan.db
    clojure.string}]
 [metabase.sync.analyze
  #{schema.core
    clojure.tools.logging
    metabase.sync.analyze.classify
    clojure.core
    metabase.models.field
    metabase.sync.analyze.fingerprint
    metabase.util
    metabase.sync.interface
    metabase.sync.util
    toucan.db
    metabase.util.i18n}]
 [metabase.sync.sync-metadata
  #{schema.core
    metabase.sync.sync-metadata.fks
    clojure.core
    metabase.sync.sync-metadata.metabase-metadata
    metabase.sync.interface
    metabase.sync.util
    metabase.sync.sync-metadata.tables
    metabase.sync.sync-metadata.fields
    metabase.util.i18n
    metabase.sync.sync-metadata.sync-timezone}]
 [metabase.sync
  #{metabase.sync.sync-metadata
    schema.core
    metabase.sync.analyze
    clojure.core
    metabase.sync.interface
    metabase.sync.field-values
    metabase.sync.util}]
 [stencil.re-utils #{clojure.core}]
 [quoin.map-access #{clojure.core}]
 [stencil.utils #{quoin.map-access clojure.core clojure.string}]
 [quoin.text #{clojure.core}]
 [clojure.zip #{clojure.core}]
 [stencil.ast #{clojure.zip clojure.core stencil.utils clojure.string}]
 [stencil.parser
  #{clojure.zip stencil.ast clojure.core stencil.utils clojure.pprint stencil.re-utils clojure.string scout.core}]
 [stencil.loader #{stencil.parser stencil.ast quoin.text clojure.core stencil.utils clojure.java.io}]
 [clojurewerkz.quartzite.conversion #{clojure.core}]
 [clojurewerkz.quartzite.triggers #{clojurewerkz.quartzite.conversion clojure.core}]
 [clojurewerkz.quartzite.jobs #{clojurewerkz.quartzite.conversion clojure.core}]
 [clojurewerkz.quartzite.scheduler
  #{clojurewerkz.quartzite.jobs clojurewerkz.quartzite.conversion clojure.core clojurewerkz.quartzite.triggers}]
 [metabase.task
  #{schema.core
    clojurewerkz.quartzite.scheduler
    clojure.java.jdbc
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.db
    toucan.db
    metabase.util.i18n
    clojure.string}]
 [metabase.models.activity
  #{toucan.models
    metabase.models.metric
    metabase.models.interface
    clojure.core
    metabase.models.pulse
    metabase.util
    metabase.models.card
    toucan.db
    metabase.api.common
    metabase.models.segment
    metabase.events
    metabase.models.dashboard}]
 [hiccup.util #{clojure.core clojure.string}]
 [hiccup.compiler #{clojure.core hiccup.util}]
 [hiccup.core #{hiccup.compiler clojure.core hiccup.util}]
 [metabase.pulse.render.datetime
  #{schema.core
    metabase.util.date-2
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    java-time
    metabase.util.i18n
    clojure.string}]
 [stencil.core
  #{stencil.parser stencil.ast quoin.text clojure.core stencil.utils clojure.java.io stencil.loader clojure.string}]
 [metabase.util.ui-logic #{clojure.core}]
 [metabase.pulse.render.js-engine #{clojure.core metabase.util}]
 [metabase.pulse.render.color
  #{schema.core metabase.pulse.render.js-engine clojure.core cheshire.core clojure.java.io metabase.util.i18n}]
 [postal.sendmail #{clojure.core postal.message}]
 [metabase.util.urls #{metabase.public-settings clojure.core}]
 [metabase.pulse.render.image-bundle #{clojure.core clojure.java.io}]
 [postal.smtp #{postal.support clojure.core postal.message}]
 [postal.stress #{postal.smtp clojure.core postal.message}]
 [postal.core #{postal.stress postal.smtp clojure.core postal.sendmail}]
 [metabase.pulse.render.common
  #{potemkin.types schema.core clojure.core metabase.util.ui-logic clojure.pprint hiccup.util}]
 [metabase.pulse.render.png
  #{schema.core
    metabase.pulse.render.common
    clojure.tools.logging
    clojure.core
    hiccup.core
    clojure.java.io
    metabase.util.i18n
    metabase.pulse.render.style}]
 [metabase.util.quotation #{clojure.core}]
 [metabase.pulse.render.sparkline
  #{schema.core
    metabase.util.date-2
    metabase.pulse.render.common
    clojure.core
    metabase.pulse.render.image-bundle
    java-time
    metabase.util.i18n
    metabase.pulse.render.style
    metabase.types}]
 [metabase.pulse.render.table
  #{metabase.pulse.render.common
    clojure.core
    metabase.pulse.render.color
    hiccup.core
    metabase.pulse.render.style
    medley.core}]
 [metabase.pulse.render.body
  #{metabase.pulse.render.table
    schema.core
    metabase.pulse.render.sparkline
    metabase.pulse.render.common
    clojure.core
    metabase.pulse.render.image-bundle
    metabase.pulse.render.color
    metabase.pulse.render.datetime
    hiccup.core
    cheshire.core
    metabase.util.i18n
    clojure.string
    metabase.pulse.render.style
    medley.core
    metabase.types}]
 [metabase.pulse.render
  #{schema.core
    metabase.pulse.render.body
    metabase.pulse.render.common
    metabase.pulse.render.png
    clojure.tools.logging
    clojure.core
    metabase.pulse.render.image-bundle
    metabase.util.urls
    hiccup.core
    metabase.util.i18n
    metabase.pulse.render.style
    metabase.types}]
 [metabase.email
  #{schema.core
    postal.support
    metabase.util.schema
    clojure.tools.logging
    postal.core
    clojure.core
    metabase.util
    metabase.models.setting
    metabase.util.i18n}]
 [metabase.email.messages
  #{metabase.email
    metabase.public-settings
    metabase.config
    metabase.pulse.render
    metabase.pulse.render.body
    metabase.util.date-2
    metabase.driver
    metabase.query-processor.store
    clojure.core.cache
    metabase.util.quotation
    clojure.tools.logging
    clojure.core
    metabase.util.urls
    metabase.util
    stencil.core
    hiccup.core
    toucan.db
    clojure.java.io
    java-time
    metabase.driver.util
    metabase.util.i18n
    stencil.loader
    clojure.string
    metabase.pulse.render.style
    metabase.query-processor.streaming.interface
    medley.core}]
 [metabase.models.login-history
  #{toucan.models
    metabase.util.date-2
    clojure.tools.logging
    clojure.core
    metabase.server.request.util
    metabase.models.setting
    metabase.email.messages
    toucan.db
    java-time
    metabase.util.i18n}]
 [metabase.models.dashboard-favorite #{toucan.models clojure.core}]
 [metabase.models.native-query-snippet.permissions #{potemkin.types pretty.core clojure.tools.logging clojure.core}]
 [metabase.models.native-query-snippet
  #{toucan.models
    schema.core
    metabase.models.interface
    metabase.models.collection
    metabase.models.native-query-snippet.permissions
    metabase.util.schema
    metabase.plugins.classloader
    clojure.core
    metabase.util
    toucan.db
    metabase.util.i18n}]
 [metabase.models.card-favorite #{toucan.models clojure.core metabase.util}]
 [metabase.models.metric-important-field #{toucan.models metabase.models.interface clojure.core metabase.util}]
 [metabase.models.collection-permission-graph-revision
  #{toucan.models clojure.core metabase.util toucan.db metabase.util.i18n}]
 [metabase.models.view-log #{toucan.models metabase.models.interface clojure.core metabase.util}]
 [metabase.models
  #{metabase.models.view-log
    metabase.models.collection-permission-graph-revision
    metabase.models.table
    metabase.models.permissions-revision
    metabase.models.metric
    metabase.models.field-values
    metabase.models.collection
    metabase.models.dimension
    metabase.models.task-history
    metabase.models.metric-important-field
    metabase.models.permissions-group
    metabase.models.card-favorite
    metabase.models.native-query-snippet
    potemkin
    clojure.core
    metabase.models.permissions-group-membership
    metabase.models.pulse
    metabase.models.pulse-channel
    metabase.models.field
    metabase.models.pulse-channel-recipient
    metabase.models.dashboard-card
    metabase.models.user
    metabase.models.revision
    metabase.models.dashboard-favorite
    metabase.models.login-history
    metabase.models.dashboard-card-series
    metabase.models.dependency
    metabase.models.setting
    metabase.models.card
    metabase.models.permissions
    metabase.models.pulse-card
    metabase.models.session
    metabase.models.query-execution
    metabase.models.activity
    metabase.models.database
    metabase.models.segment
    metabase.models.moderation-review
    metabase.models.query-cache
    metabase.models.dashboard}]
 [metabase.util.files
  #{clojure.tools.logging clojure.core metabase.util clojure.java.io metabase.util.i18n clojure.string}]
 [dk.ative.docjure.spreadsheet #{clojure.core}]
 [metabase.query-processor.streaming.common
  #{metabase.util.date-2 metabase.query-processor.store clojure.core metabase.query-processor.timezone java-time}]
 [metabase.query-processor.streaming.json
  #{metabase.query-processor.streaming.common
    metabase.util.date-2
    clojure.core
    cheshire.core
    java-time
    metabase.query-processor.streaming.interface}]
 [metabase.query-processor.streaming.csv
  #{metabase.query-processor.streaming.common
    metabase.util.date-2
    clojure.data.csv
    clojure.core
    java-time
    metabase.query-processor.streaming.interface}]
 [metabase.query-processor.streaming.xlsx
  #{metabase.query-processor.streaming.common
    metabase.util.date-2
    clojure.core
    cheshire.core
    java-time
    metabase.util.i18n
    dk.ative.docjure.spreadsheet
    metabase.query-processor.streaming.interface
    metabase.query-processor.error-type}]
 [metabase.query-processor.streaming
  #{metabase.query-processor.streaming.xlsx
    metabase.query-processor.streaming.csv
    metabase.query-processor.streaming.json
    metabase.shared.models.visualization-settings
    metabase.mbql.util
    clojure.core
    clojure.core.async
    metabase.util
    metabase.async.streaming-response
    metabase.query-processor.context
    metabase.query-processor.streaming.interface}]
 [yaml.reader #{clojure.core flatland.ordered.map flatland.ordered.set}]
 [yaml.writer #{clojure.core flatland.ordered.map flatland.ordered.set}]
 [yaml.core #{clojure.core yaml.writer clojure.java.io yaml.reader}]
 [schema.coerce #{schema.core schema.macros schema.spec.core clojure.core clojure.edn clojure.string schema.utils}]
 [metabase.util.yaml
  #{metabase.util.files clojure.tools.logging clojure.core metabase.util metabase.util.i18n clojure.string yaml.core}]
 [metabase.automagic-dashboards.rules
  #{metabase.automagic-dashboards.populate
    metabase.query-processor.util
    schema.core
    metabase.util.files
    metabase.util.schema
    metabase.util.yaml
    schema.spec.core
    schema.coerce
    clojure.core
    metabase.util
    metabase.util.i18n
    clojure.string}]
 [metabase.driver.sql.parameters.substitution
  #{schema.core
    metabase.mbql.util
    metabase.util.date-2
    metabase.util.schema
    metabase.driver
    metabase.driver.sql.query-processor
    honeysql.core
    clojure.core
    metabase.driver.common.parameters.operators
    metabase.query-processor.timezone
    metabase.driver.common.parameters
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type
    metabase.query-processor.middleware.wrap-value-literals
    metabase.driver.common.parameters.dates}]
 [metabase.driver.common.parameters.parse
  #{schema.core
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.driver.common.parameters
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type}]
 [metabase.driver.sql.util
  #{schema.core
    metabase.driver.sql.query-processor
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.util.i18n
    clojure.string}]
 [metabase.driver.sql.util.unprepare
  #{metabase.driver
    metabase.driver.sql.util
    clojure.tools.logging
    clojure.core
    metabase.util
    java-time
    metabase.util.i18n
    clojure.string}]
 [metabase.driver.sql.parameters.substitute
  #{metabase.driver
    clojure.core
    metabase.driver.sql.parameters.substitution
    metabase.driver.common.parameters
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type}]
 [metabase.driver.common.parameters.values
  #{metabase.query-processor
    schema.core
    metabase.util.schema
    metabase.models.native-query-snippet
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.models.card
    toucan.db
    metabase.driver.common.parameters
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type}]
 [metabase.driver.sql
  #{schema.core
    metabase.driver.common.parameters.values
    metabase.util.schema
    metabase.driver
    metabase.driver.sql.query-processor
    potemkin
    clojure.core
    metabase.driver.sql.parameters.substitute
    metabase.driver.sql.util.unprepare
    metabase.driver.common.parameters.parse
    metabase.driver.sql.parameters.substitution}]
 [metabase.driver.sql-jdbc.sync.interface #{metabase.driver clojure.core}]
 [metabase.driver.sql-jdbc.execute.old-impl #{metabase.driver clojure.core}]
 [metabase.driver.sql-jdbc.execute.diagnostic #{clojure.core}]
 [metabase.driver.sql-jdbc.execute
  #{metabase.query-processor.util
    metabase.driver.sql-jdbc.connection
    metabase.query-processor.interface
    metabase.driver.sql-jdbc.execute.diagnostic
    metabase.mbql.util
    metabase.driver
    metabase.query-processor.store
    potemkin
    metabase.driver.sql-jdbc.execute.old-impl
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    metabase.driver.sql-jdbc.sync.interface
    metabase.query-processor.timezone
    metabase.query-processor.context
    java-time
    metabase.util.i18n
    clojure.string
    metabase.query-processor.reducible
    metabase.query-processor.error-type}]
 [metabase.driver.sql-jdbc.common #{clojure.core clojure.string}]
 [metabase.driver.sql-jdbc.sync.common #{clojure.core metabase.driver.sql-jdbc.execute}]
 [metabase.driver.sql-jdbc.sync.describe-table
  #{metabase.driver.sql-jdbc.connection
    clojure.java.jdbc
    metabase.driver
    metabase.driver.sql.query-processor
    clojure.tools.logging
    metabase.driver.sql-jdbc.sync.common
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.driver.sql-jdbc.sync.interface
    clojure.string
    medley.core}]
 [metabase.driver.sql-jdbc.sync.describe-database
  #{metabase.driver.sql-jdbc.connection
    clojure.java.jdbc
    metabase.driver
    metabase.driver.sql.query-processor
    metabase.driver.sql-jdbc.sync.common
    clojure.core
    metabase.util.honeysql-extensions
    metabase.driver.sql-jdbc.sync.interface
    metabase.driver.sql-jdbc.execute
    clojure.string}]
 [metabase.driver.sql-jdbc.sync
  #{metabase.driver.sql-jdbc.sync.describe-database
    metabase.driver.sql-jdbc.sync.describe-table
    potemkin
    clojure.core
    metabase.driver.sql-jdbc.sync.interface}]
 [metabase.driver.sql-jdbc
  #{metabase.driver.sql-jdbc.sync
    metabase.driver.sql-jdbc.connection
    clojure.java.jdbc
    metabase.driver
    metabase.driver.sql.query-processor
    clojure.core
    metabase.util.honeysql-extensions
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql}]
 [metabase.driver.postgres
  #{metabase.driver.sql-jdbc.sync
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc
    metabase.util.ssh
    clojure.java.jdbc
    pretty.core
    metabase.util.date-2
    metabase.driver
    metabase.driver.sql.query-processor
    metabase.models
    honeysql.format
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.driver.common
    clojure.set
    metabase.util.honeysql-extensions
    metabase.util
    metabase.driver.sql.util.unprepare
    metabase.driver.sql-jdbc.common
    java-time
    metabase.driver.sql-jdbc.execute
    clojure.string
    metabase.db.spec}]
 [ring.middleware.keyword-params #{clojure.core}]
 [buddy.core.codecs.base64 #{clojure.core buddy.core.codecs}]
 [buddy.core.keys.jwk.proto #{clojure.core buddy.core.codecs.base64 buddy.core.codecs}]
 [buddy.util.deflate #{clojure.core}]
 [buddy.core.keys.pem #{clojure.core clojure.java.io}]
 [buddy.core.dsa #{clojure.core buddy.core.codecs clojure.java.io}]
 [buddy.core.keys.jwk.ec #{buddy.core.hash clojure.core cheshire.core buddy.core.keys.jwk.proto}]
 [buddy.util.ecdsa #{clojure.core}]
 [buddy.core.keys.jwk.rsa
  #{buddy.core.hash clojure.core buddy.core.codecs.base64 buddy.core.codecs cheshire.core buddy.core.keys.jwk.proto}]
 [buddy.core.keys.jwk.okp #{buddy.core.hash clojure.core cheshire.core buddy.core.keys.jwk.proto}]
 [buddy.core.keys.jwk.eddsa
  #{buddy.core.keys.jwk.okp clojure.core buddy.core.codecs.base64 buddy.core.codecs buddy.core.keys.jwk.proto}]
 [buddy.core.keys
  #{buddy.core.keys.jwk.eddsa
    buddy.core.keys.jwk.okp
    buddy.core.keys.jwk.rsa
    clojure.core
    buddy.core.keys.jwk.ec
    buddy.core.keys.pem
    buddy.core.keys.jwk.proto}]
 [buddy.sign.jwe.cek #{buddy.core.keys clojure.core buddy.core.nonce buddy.core.codecs}]
 [buddy.sign.util #{clojure.core buddy.core.codecs}]
 [buddy.sign.jws
  #{buddy.sign.util
    buddy.core.mac
    clojure.core
    buddy.util.ecdsa
    buddy.core.codecs.base64
    buddy.core.dsa
    buddy.core.codecs
    cheshire.core
    clojure.string}]
 [buddy.sign.jwe
  #{buddy.sign.util
    buddy.sign.jws
    buddy.sign.jwe.cek
    buddy.core.keys
    clojure.core
    buddy.core.bytes
    buddy.core.codecs.base64
    buddy.core.nonce
    buddy.core.codecs
    buddy.util.deflate
    cheshire.core
    buddy.core.crypto
    clojure.string}]
 [buddy.sign.jwt #{buddy.sign.util buddy.sign.jws clojure.core buddy.sign.jwe buddy.core.codecs cheshire.core}]
 [metabase.util.embed
  #{metabase.public-settings
    ring.util.codec
    buddy.sign.jwt
    clojure.core
    metabase.util
    buddy.core.codecs
    metabase.models.setting
    hiccup.core
    cheshire.core
    metabase.util.i18n
    clojure.string}]
 [metabase.api.geojson
  #{schema.core
    ring.util.codec
    metabase.util.schema
    clojure.core
    compojure.core
    metabase.models.setting
    clojure.java.io
    metabase.util.i18n
    metabase.api.common
    ring.util.response}]
 [metabase.plugins.jdbc-proxy
  #{potemkin.types
    pretty.core
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.util.i18n}]
 [metabase.plugins.init-steps
  #{clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.plugins.jdbc-proxy
    metabase.util
    metabase.util.i18n}]
 [clojure.core.logic.protocols #{clojure.core}]
 [clojure.core.logic #{clojure.core clojure.set clojure.core.logic.protocols clojure.string}]
 [metabase.api.testing
  #{metabase.models.setting.cache
    clojure.java.jdbc
    clojure.tools.logging
    clojure.core
    compojure.core
    toucan.db
    clojure.string
    metabase.api.common}]
 [metabase.query-processor.pivot
  #{metabase.query-processor
    metabase.query-processor.store
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    metabase.query-processor.context.default
    metabase.query-processor.middleware.permissions
    metabase.mbql.normalize
    metabase.query-processor.context
    metabase.util.i18n
    metabase.query-processor.error-type}]
 [manifold.executor #{clojure.tools.logging clojure.core}]
 [manifold.utils #{manifold.executor clojure.tools.logging clojure.core}]
 [manifold.time #{manifold.executor clojure.tools.logging clojure.core manifold.utils clojure.string}]
 [manifold.stream.core #{clojure.core manifold.utils}]
 [manifold.debug #{clojure.core}]
 [manifold.deferred
  #{manifold.executor
    riddley.compiler
    manifold.debug
    riddley.walk
    clojure.tools.logging
    clojure.core
    clojure.set
    manifold.utils
    manifold.time}]
 [manifold.stream.graph
  #{manifold.executor manifold.deferred clojure.tools.logging clojure.core manifold.stream.core manifold.utils}]
 [manifold.stream.deferred #{manifold.deferred clojure.core manifold.stream.core manifold.stream.graph}]
 [metabase.related
  #{metabase.query-processor.util
    metabase.models.table
    schema.core
    metabase.models.metric
    metabase.models.interface
    metabase.models.query
    metabase.models.collection
    clojure.core
    clojure.set
    metabase.models.field
    metabase.models.dashboard-card
    metabase.mbql.normalize
    metabase.models.card
    toucan.db
    metabase.api.common
    metabase.models.segment
    medley.core
    metabase.models.dashboard}]
 [manifold.stream.queue #{manifold.deferred clojure.core manifold.stream.core manifold.utils manifold.stream.graph}]
 [byte-streams.utils #{clojure.core clj-tuple}]
 [manifold.stream.seq
  #{manifold.deferred
    clojure.tools.logging
    clojure.core
    manifold.stream.core
    manifold.utils
    manifold.time
    manifold.stream.graph}]
 [manifold.stream.random-access
  #{manifold.deferred
    clojure.tools.logging
    clojure.core
    manifold.stream.core
    manifold.utils
    manifold.time
    manifold.stream.graph}]
 [manifold.stream.iterator
  #{manifold.deferred
    clojure.tools.logging
    clojure.core
    manifold.stream.core
    manifold.utils
    manifold.time
    manifold.stream.graph}]
 [manifold.stream.default
  #{manifold.executor
    manifold.deferred
    clojure.tools.logging
    clojure.core
    manifold.stream.core
    manifold.utils
    manifold.time
    manifold.stream.graph}]
 [manifold.stream
  #{manifold.stream.default
    manifold.stream.iterator
    manifold.stream.random-access
    manifold.deferred
    clojure.tools.logging
    clojure.core
    manifold.stream.seq
    manifold.stream.core
    manifold.utils
    manifold.time
    manifold.stream.queue
    manifold.stream.deferred}]
 [primitive-math #{clojure.core}]
 [byte-streams.pushback-stream
  #{primitive-math manifold.stream manifold.deferred clojure.core manifold.utils byte-streams.utils clojure.walk}]
 [byte-streams.protocols #{clojure.core byte-streams.utils}]
 [byte-streams.graph #{manifold.stream byte-streams.protocols clojure.core byte-streams.utils clj-tuple}]
 [byte-streams.char-sequence #{clojure.core}]
 [byte-streams
  #{primitive-math
    byte-streams.char-sequence
    manifold.stream
    byte-streams.protocols
    manifold.deferred
    byte-streams.graph
    clojure.core
    byte-streams.pushback-stream
    byte-streams.utils
    clojure.java.io}]
 [aleph.netty
  #{primitive-math
    manifold.stream
    byte-streams
    manifold.deferred
    potemkin
    clojure.tools.logging
    clojure.core
    clojure.set
    manifold.stream.core
    clojure.string}]
 [aleph.http.core
  #{manifold.stream
    byte-streams
    aleph.netty
    manifold.deferred
    potemkin
    clojure.tools.logging
    clojure.core
    clojure.set
    clojure.string}]
 [aleph.flow #{manifold.executor manifold.deferred potemkin clojure.core}]
 [aleph.http.server
  #{manifold.stream
    byte-streams
    aleph.netty
    manifold.deferred
    aleph.flow
    clojure.tools.logging
    clojure.core
    aleph.http.core
    clojure.string}]
 [metabase.api.dataset
  #{metabase.query-processor
    metabase.query-processor.util
    schema.core
    metabase.shared.models.visualization-settings
    metabase.models.query
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    compojure.core
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.permissions
    metabase.models.card
    cheshire.core
    metabase.mbql.schema
    metabase.models.database
    metabase.util.i18n
    clojure.string
    metabase.api.common
    metabase.query-processor.pivot
    metabase.query-processor.streaming}]
 [metabase.models.revision.last-edit
  #{schema.core metabase.util.schema clj-time.core honeysql.core clojure.core clojure.set toucan.db medley.core}]
 [metabase.integrations.slack
  #{clojure.core.memoize
    clj-http.client
    schema.core
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.models.setting
    cheshire.core
    clojure.java.io
    metabase.util.i18n
    medley.core}]
 [metabase.metabot.slack #{metabase.integrations.slack clojure.tools.logging clojure.core metabase.util.i18n}]
 [metabase.pulse.interface #{potemkin clojure.core}]
 [metabase.api.card
  #{metabase.query-processor
    metabase.models.view-log
    metabase.query-processor.async
    metabase.query-processor.util
    metabase.public-settings
    metabase.models.table
    schema.core
    metabase.models.interface
    metabase.models.query
    metabase.models.collection
    metabase.util.schema
    metabase.models.query.permissions
    metabase.models.card-favorite
    clojure.tools.logging
    metabase.async.util
    clojure.core
    metabase.query-processor.middleware.results-metadata
    clojure.core.async
    metabase.models.pulse
    metabase.util
    compojure.core
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.permissions
    metabase.mbql.normalize
    metabase.sync.analyze.query-results
    metabase.models.card
    metabase.email.messages
    metabase.models.revision.last-edit
    toucan.db
    cheshire.core
    metabase.models.database
    metabase.api.dataset
    metabase.util.i18n
    metabase.api.common
    metabase.related
    metabase.query-processor.pivot
    toucan.hydrate
    medley.core
    metabase.events
    metabase.query-processor.streaming}]
 [metabase.pulse
  #{metabase.query-processor
    metabase.email
    schema.core
    metabase.pulse.render
    metabase.server.middleware.session
    metabase.api.card
    metabase.pulse.interface
    metabase.integrations.slack
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.models.pulse
    metabase.util.urls
    metabase.util
    metabase.models.dashboard-card
    metabase.util.ui-logic
    metabase.query-processor.middleware.permissions
    metabase.models.card
    metabase.email.messages
    metabase.query-processor.timezone
    toucan.db
    metabase.models.database
    metabase.util.i18n
    metabase.models.dashboard}]
 [metabase.metabot.command
  #{metabase.models.interface
    metabase.models.collection
    metabase.models.permissions-group
    metabase.pulse
    clojure.tools.logging
    clojure.core
    metabase.util.urls
    metabase.util
    metabase.metabot.slack
    metabase.models.card
    metabase.models.permissions
    clojure.edn
    toucan.db
    clojure.java.io
    metabase.util.i18n
    clojure.string
    metabase.api.common}]
 [throttle.core #{clojure.core clojure.math.numeric-tower}]
 [metabase.metabot.events
  #{clojure.tools.logging
    clojure.core
    metabase.util
    metabase.metabot.slack
    clojure.edn
    cheshire.core
    metabase.metabot.command
    metabase.util.i18n
    clojure.string}]
 [aleph.http.client-middleware
  #{manifold.stream
    byte-streams
    manifold.executor
    clojure.stacktrace
    manifold.deferred
    potemkin
    clojure.core
    aleph.http.core
    clojure.edn
    clojure.string
    clojure.walk}]
 [aleph.http.encoding #{primitive-math byte-streams potemkin clojure.core}]
 [aleph.http.multipart #{byte-streams aleph.http.encoding clojure.core}]
 [aleph.http.client
  #{aleph.http.multipart
    manifold.stream
    byte-streams
    aleph.netty
    manifold.deferred
    clojure.tools.logging
    clojure.core
    aleph.http.core}]
 [aleph.http
  #{aleph.http.client
    manifold.executor
    aleph.netty
    manifold.deferred
    aleph.flow
    clojure.core
    aleph.http.client-middleware
    clojure.string
    aleph.http.server}]
 [metabase.server.middleware.security
  #{metabase.public-settings
    metabase.config
    ring.util.codec
    clojure.core
    metabase.server.request.util
    metabase.models.setting
    clojure.java.io
    java-time
    metabase.util.i18n
    clojure.string}]
 [metabase.server.middleware.offset-paging
  #{metabase.server.middleware.security clojure.core metabase.util.i18n medley.core}]
 [metabase.api.permission-graph #{clojure.spec.alpha clojure.core clojure.spec.gen.alpha clojure.walk}]
 [metabase.metabot.instance
  #{metabase.config
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.models.setting
    toucan.db
    java-time
    metabase.util.i18n}]
 [metabase.metabot.websocket
  #{manifold.stream
    metabase.metabot.instance
    manifold.deferred
    metabase.integrations.slack
    clojure.tools.logging
    clojure.core
    metabase.util
    aleph.http
    metabase.metabot.events
    throttle.core
    metabase.util.i18n}]
 [metabase.metabot
  #{metabase.metabot.websocket
    metabase.metabot.instance
    metabase.integrations.slack
    clojure.tools.logging
    clojure.core
    metabase.models.setting
    metabase.util.i18n}]
 [metabase.api.permissions
  #{honeysql.helpers
    metabase.models.permissions-group
    metabase.util.schema
    metabase.metabot
    clojure.core
    metabase.models.permissions-group-membership
    metabase.api.permission-graph
    metabase.server.middleware.offset-paging
    metabase.util
    compojure.core
    metabase.models.permissions
    toucan.db
    metabase.api.common
    toucan.hydrate}]
 [metabase.search.config
  #{metabase.models
    honeysql.core
    clojure.core
    metabase.models.setting
    cheshire.core
    metabase.util.i18n
    clojure.string}]
 [metabase.setup #{clojure.core metabase.models.setting toucan.db environ.core}]
 [metabase.automagic-dashboards.visualization-macros #{clojure.core}]
 [metabase.automagic-dashboards.core
  #{metabase.automagic-dashboards.populate
    metabase.query-processor.util
    metabase.models.table
    schema.core
    clojure.zip
    metabase.models.metric
    metabase.models.interface
    metabase.models.query
    metabase.automagic-dashboards.visualization-macros
    metabase.mbql.util
    ring.util.codec
    metabase.util.date-2
    metabase.driver
    kixi.stats.core
    clojure.math.combinatorics
    clojure.tools.logging
    metabase.sync.analyze.classify
    clojure.core
    metabase.models.field
    metabase.util
    metabase.mbql.normalize
    kixi.stats.math
    buddy.core.codecs
    metabase.models.card
    toucan.db
    cheshire.core
    java-time
    metabase.models.database
    metabase.automagic-dashboards.filters
    metabase.util.i18n
    clojure.string
    clojure.walk
    metabase.automagic-dashboards.rules
    metabase.models.segment
    metabase.related
    medley.core}]
 [metabase.automagic-dashboards.comparison
  #{metabase.automagic-dashboards.populate
    metabase.query-processor.util
    metabase.models.table
    clojure.core
    metabase.util
    metabase.mbql.normalize
    metabase.automagic-dashboards.core
    metabase.automagic-dashboards.filters
    metabase.util.i18n
    metabase.api.common
    metabase.related
    medley.core}]
 [metabase.api.email
  #{metabase.email
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    clojure.set
    compojure.core
    metabase.models.setting
    metabase.util.i18n
    clojure.string
    clojure.data
    metabase.api.common}]
 [clj-ldap.client #{clojure.core clojure.pprint clojure.string}]
 [metabase.integrations.common
  #{metabase.models.permissions-group
    clojure.tools.logging
    clojure.core
    metabase.models.permissions-group-membership
    clojure.set
    metabase.util
    toucan.db
    metabase.util.i18n
    clojure.data}]
 [metabase.integrations.ldap.interface #{schema.core metabase.util.schema potemkin clojure.core}]
 [metabase.integrations.ldap.default-implementation
  #{schema.core
    pretty.core
    metabase.util.schema
    metabase.integrations.ldap.interface
    clojure.core
    metabase.util
    metabase.models.user
    metabase.integrations.common
    toucan.db
    metabase.util.i18n
    clojure.string
    clj-ldap.client}]
 [metabase.models.setting.multi-setting #{clojure.core metabase.models.setting metabase.util.i18n}]
 [metabase.integrations.google.interface
  #{metabase.public-settings.metastore clojure.core metabase.models.setting.multi-setting metabase.util.i18n}]
 [metabase.integrations.google
  #{clj-http.client
    schema.core
    metabase.integrations.google.interface
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.models.user
    metabase.models.setting
    toucan.db
    cheshire.core
    metabase.models.setting.multi-setting
    metabase.util.i18n
    clojure.string
    metabase.api.common}]
 [metabase.util.stats
  #{metabase.email
    metabase.public-settings
    clj-http.client
    metabase.config
    metabase.driver
    metabase.integrations.google
    metabase.integrations.slack
    metabase.models
    clojure.tools.logging
    clojure.core
    metabase.util
    toucan.db
    java-time
    metabase.util.i18n
    clojure.string
    metabase.models.humanization
    medley.core}]
 [clojure.java.jmx #{clojure.core clojure.walk}]
 [metabase.troubleshooting
  #{metabase.config
    clojure.java.jmx
    clojure.java.jdbc
    clojure.core
    metabase.util.stats
    metabase.models.setting
    metabase.db
    toucan.db}]
 [amalloy.ring-buffer #{clojure.core}]
 [crypto.random #{clojure.core clojure.string}]
 [metabase.logger #{metabase.config amalloy.ring-buffer clojure.core clj-time.format clj-time.coerce}]
 [metabase.api.util
  #{metabase.logger
    crypto.random
    metabase.util.schema
    clojure.core
    metabase.util.stats
    compojure.core
    metabase.troubleshooting
    metabase.api.common
    ring.util.response}]
 [metabase.domain-entities.specs
  #{schema.core metabase.mbql.util metabase.util.yaml schema.coerce clojure.core metabase.mbql.normalize medley.core}]
 [metabase.server.middleware.util #{clojure.core}]
 [metabase.server.middleware.auth #{metabase.server.middleware.util clojure.core metabase.models.setting}]
 [metabase.models.params.chain-filter.dedupe-joins #{clojure.core clojure.set clojure.core.logic}]
 [metabase.models.params.chain-filter
  #{metabase.query-processor
    clojure.core.memoize
    metabase.models.table
    metabase.models.params.field-values
    schema.core
    metabase.models.field-values
    metabase.mbql.util
    metabase.util.schema
    metabase.models.params
    metabase.models
    honeysql.format
    honeysql.core
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.models.field
    metabase.util
    metabase.models.params.chain-filter.dedupe-joins
    metabase.db.util
    toucan.db
    metabase.util.i18n
    clojure.string
    metabase.driver.common.parameters.dates
    metabase.types}]
 [metabase.api.dashboard
  #{metabase.automagic-dashboards.populate
    metabase.query-processor.util
    schema.core
    metabase.models.params.chain-filter
    metabase.models.interface
    metabase.models.query
    metabase.models.collection
    metabase.mbql.util
    metabase.util.schema
    metabase.models.params
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.models.field
    metabase.util
    compojure.core
    metabase.query-processor.middleware.constraints
    metabase.models.dashboard-card
    metabase.models.revision
    metabase.models.dashboard-favorite
    metabase.models.card
    metabase.models.revision.last-edit
    toucan.db
    metabase.util.i18n
    metabase.api.common
    metabase.related
    metabase.query-processor.error-type
    toucan.hydrate
    metabase.events
    metabase.models.dashboard}]
 [metabase.api.field
  #{metabase.query-processor
    metabase.db.metadata-queries
    metabase.models.table
    metabase.models.params.field-values
    schema.core
    metabase.models.interface
    metabase.models.field-values
    metabase.models.dimension
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.server.middleware.offset-paging
    metabase.models.field
    metabase.util
    compojure.core
    metabase.models.permissions
    toucan.db
    metabase.util.i18n
    metabase.api.common
    metabase.related
    toucan.hydrate
    metabase.types}]
 [metabase.api.public
  #{metabase.query-processor
    schema.core
    metabase.models.dimension
    metabase.mbql.util
    metabase.api.field
    metabase.util.schema
    metabase.models.params
    metabase.api.card
    metabase.async.util
    clojure.core
    clojure.core.async
    metabase.models.field
    metabase.util
    metabase.api.dashboard
    compojure.core
    metabase.query-processor.middleware.constraints
    metabase.models.dashboard-card
    metabase.mbql.normalize
    metabase.models.dashboard-card-series
    metabase.db.util
    metabase.models.card
    toucan.db
    cheshire.core
    metabase.api.dataset
    metabase.util.i18n
    metabase.api.common
    metabase.query-processor.pivot
    metabase.query-processor.error-type
    toucan.hydrate
    medley.core
    metabase.util.embed
    metabase.models.dashboard
    metabase.query-processor.streaming}]
 [metabase.api.embed
  #{metabase.query-processor
    schema.core
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    clojure.set
    metabase.util
    metabase.api.dashboard
    compojure.core
    metabase.query-processor.middleware.constraints
    metabase.models.dashboard-card
    metabase.api.public
    metabase.models.card
    toucan.db
    metabase.api.dataset
    metabase.driver.common.parameters
    metabase.util.i18n
    clojure.string
    metabase.api.common
    metabase.query-processor.pivot
    medley.core
    metabase.util.embed
    metabase.models.dashboard}]
 [metabase.api.preview-embed
  #{metabase.api.embed
    clojure.core
    compojure.core
    metabase.api.common
    metabase.query-processor.pivot
    metabase.util.embed}]
 [metabase.models.collection.graph
  #{metabase.models.collection-permission-graph-revision
    schema.core
    metabase.models.collection
    metabase.models.permissions-group
    metabase.util.schema
    clojure.core
    metabase.util.honeysql-extensions
    metabase.util
    metabase.models.permissions
    toucan.db
    clojure.data
    metabase.api.common}]
 [metabase.api.collection
  #{metabase.models.collection.graph
    honeysql.helpers
    schema.core
    metabase.models.interface
    metabase.models.collection
    metabase.util.schema
    metabase.api.card
    metabase.models.native-query-snippet
    honeysql.core
    metabase.db.env
    clojure.core
    metabase.util.honeysql-extensions
    metabase.models.pulse
    metabase.server.middleware.offset-paging
    metabase.util
    compojure.core
    metabase.models.collection.root
    metabase.models.card
    metabase.models.revision.last-edit
    metabase.models.permissions
    metabase.models.pulse-card
    toucan.db
    clojure.string
    metabase.api.common
    toucan.hydrate
    medley.core
    metabase.models.dashboard}]
 [metabase.api.metastore #{metabase.public-settings.metastore clojure.core compojure.core metabase.api.common}]
 [metabase.transforms.materialize
  #{metabase.query-processor
    metabase.models.collection
    clojure.core
    metabase.util
    metabase.models.card
    toucan.db
    metabase.api.common}]
 [metabase.domain-entities.core
  #{metabase.models.table
    schema.core
    metabase.mbql.util
    clojure.core
    metabase.util
    metabase.models.card
    clojure.string
    metabase.domain-entities.specs
    medley.core}]
 [metabase.transforms.specs
  #{schema.core
    metabase.mbql.util
    metabase.util.schema
    metabase.util.yaml
    schema.coerce
    clojure.core
    metabase.util
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.domain-entities.specs
    medley.core}]
 [metabase.transforms.core
  #{metabase.query-processor
    metabase.models.table
    schema.core
    metabase.transforms.specs
    metabase.mbql.util
    metabase.util.schema
    metabase.driver
    clojure.core
    metabase.domain-entities.core
    metabase.models.field
    metabase.util
    metabase.transforms.materialize
    toucan.db
    metabase.mbql.schema
    metabase.util.i18n
    metabase.domain-entities.specs
    medley.core}]
 [metabase.api.table
  #{metabase.models.table
    schema.core
    metabase.models.interface
    metabase.models.field-values
    metabase.util.schema
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.models.field
    metabase.util
    compojure.core
    metabase.sync.field-values
    metabase.models.card
    toucan.db
    metabase.driver.util
    metabase.util.i18n
    metabase.sync
    metabase.api.common
    metabase.related
    toucan.hydrate
    medley.core
    metabase.types}]
 [metabase.sample-data
  #{clojure.tools.logging
    clojure.core
    toucan.db
    clojure.java.io
    metabase.models.database
    metabase.util.i18n
    clojure.string
    metabase.sync}]
 [metabase.sync.schedules #{schema.core metabase.util.schema clojure.core metabase.util.cron}]
 [metabase.api.database
  #{metabase.public-settings
    metabase.models.table
    metabase.sync.sync-metadata
    schema.core
    metabase.config
    metabase.models.interface
    metabase.models.field-values
    metabase.models.collection
    metabase.sync.schedules
    metabase.mbql.util
    metabase.sync.analyze
    metabase.util.schema
    metabase.driver
    clojure.tools.logging
    metabase.sample-data
    clojure.core
    metabase.api.table
    metabase.models.field
    metabase.util
    compojure.core
    metabase.sync.field-values
    metabase.models.card
    metabase.models.permissions
    toucan.db
    metabase.util.cron
    metabase.mbql.schema
    metabase.models.database
    metabase.driver.util
    metabase.util.i18n
    clojure.string
    metabase.api.common
    toucan.hydrate
    medley.core
    metabase.events}]
 [metabase.api.setting #{metabase.util.schema clojure.core compojure.core metabase.models.setting metabase.api.common}]
 [metabase.api.query-description
  #{metabase.mbql.predicates
    metabase.models.metric
    metabase.mbql.util
    clojure.tools.logging
    clojure.core
    metabase.models.field
    toucan.db
    metabase.util.i18n
    clojure.string
    metabase.models.segment}]
 [metabase.server.middleware.exceptions
  #{clojure.java.jdbc
    metabase.server.middleware.security
    clojure.tools.logging
    clojure.core
    metabase.util.i18n
    clojure.string}]
 [metabase.api.task
  #{metabase.models.task-history
    clojure.core
    metabase.server.middleware.offset-paging
    compojure.core
    toucan.db
    metabase.task
    metabase.api.common}]
 [metabase.search.scoring
  #{clojure.core.memoize
    potemkin.types
    schema.core
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    java-time
    clojure.string
    metabase.search.config}]
 [metabase.api.setup
  #{metabase.models.setting.cache
    metabase.email
    metabase.public-settings
    metabase.models.table
    toucan.models
    schema.core
    metabase.models.metric
    metabase.models.collection
    metabase.server.middleware.session
    metabase.sync.schedules
    metabase.util.schema
    metabase.driver
    metabase.integrations.slack
    clojure.core
    metabase.models.pulse
    metabase.util
    compojure.core
    metabase.models.user
    metabase.api.database
    metabase.models.card
    toucan.db
    metabase.models.session
    metabase.models.database
    metabase.util.i18n
    metabase.api.common
    metabase.models.segment
    metabase.setup
    metabase.events
    metabase.models.dashboard}]
 [metabase.api.transform
  #{metabase.transforms.specs
    clojure.core
    compojure.core
    metabase.models.permissions
    metabase.transforms.core
    metabase.api.common
    medley.core}]
 [compojure.route #{compojure.response clojure.core compojure.core ring.util.mime-type ring.util.response}]
 [metabase.api.native-query-snippet
  #{schema.core
    metabase.models.interface
    metabase.util.schema
    metabase.models.native-query-snippet
    clojure.core
    metabase.util
    compojure.core
    toucan.db
    metabase.util.i18n
    clojure.data
    metabase.api.common
    toucan.hydrate}]
 [metabase.api.search
  #{honeysql.helpers
    metabase.models.table
    schema.core
    metabase.models.metric
    metabase.models.interface
    metabase.models.collection
    metabase.util.schema
    metabase.models.card-favorite
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.util.honeysql-extensions
    metabase.models.pulse
    flatland.ordered.map
    metabase.server.middleware.offset-paging
    metabase.util
    compojure.core
    metabase.search.scoring
    metabase.models.dashboard-favorite
    metabase.models.card
    metabase.db
    metabase.models.permissions
    toucan.db
    metabase.models.database
    clojure.string
    metabase.api.common
    metabase.models.segment
    metabase.search.config
    metabase.models.dashboard}]
 [metabase.transforms.dashboard
  #{metabase.automagic-dashboards.populate
    metabase.models.table
    metabase.transforms.specs
    clojure.core
    metabase.util
    metabase.transforms.materialize
    toucan.db
    metabase.api.common
    medley.core}]
 [metabase.api.automagic-dashboards
  #{metabase.models.table
    metabase.transforms.dashboard
    schema.core
    metabase.models.metric
    metabase.models.query
    metabase.models.collection
    ring.util.codec
    metabase.util.schema
    metabase.models.query.permissions
    clojure.core
    metabase.models.field
    compojure.core
    metabase.automagic-dashboards.core
    buddy.core.codecs
    metabase.transforms.materialize
    metabase.models.card
    metabase.models.permissions
    cheshire.core
    metabase.models.database
    metabase.util.i18n
    metabase.automagic-dashboards.rules
    metabase.api.common
    metabase.models.segment
    metabase.automagic-dashboards.comparison}]
 [metabase.integrations.ldap
  #{schema.core
    metabase.util.schema
    metabase.integrations.ldap.interface
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.models.user
    metabase.models.setting
    cheshire.core
    metabase.util.i18n
    clj-ldap.client
    metabase.integrations.ldap.default-implementation}]
 [metabase.api.activity
  #{metabase.models.view-log
    metabase.models.interface
    clojure.core
    clojure.set
    compojure.core
    metabase.models.card
    toucan.db
    metabase.models.activity
    metabase.api.common
    toucan.hydrate
    metabase.models.dashboard}]
 [metabase.api.session
  #{metabase.public-settings
    toucan.models
    schema.core
    metabase.config
    metabase.server.middleware.session
    metabase.util.schema
    metabase.integrations.google
    metabase.integrations.ldap
    clojure.tools.logging
    clojure.core
    metabase.util
    compojure.core
    metabase.server.request.util
    metabase.models.user
    metabase.models.login-history
    cemerick.friend.credentials
    metabase.models.setting
    metabase.email.messages
    toucan.db
    metabase.models.session
    metabase.util.password
    throttle.core
    metabase.util.i18n
    metabase.api.common
    metabase.events}]
 [metabase.api.moderation-review
  #{schema.core
    metabase.util.schema
    clojure.core
    compojure.core
    metabase.moderation
    metabase.api.common
    metabase.models.moderation-review}]
 [metabase.api.tiles
  #{metabase.query-processor
    metabase.mbql.util
    metabase.util.schema
    clojure.core
    metabase.util
    compojure.core
    metabase.mbql.normalize
    cheshire.core
    metabase.util.i18n
    metabase.api.common}]
 [metabase.api.pulse
  #{metabase.query-processor
    metabase.email
    schema.core
    metabase.models.interface
    metabase.pulse.render
    metabase.models.collection
    metabase.util.schema
    metabase.integrations.slack
    metabase.pulse
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.models.pulse
    metabase.util.urls
    metabase.models.pulse-channel
    metabase.util
    compojure.core
    metabase.models.pulse-channel-recipient
    metabase.query-processor.middleware.permissions
    metabase.models.card
    hiccup.core
    toucan.db
    metabase.util.i18n
    metabase.api.common
    toucan.hydrate
    metabase.events
    metabase.models.dashboard}]
 [metabase.api.slack
  #{schema.core
    metabase.config
    metabase.util.schema
    metabase.integrations.slack
    clojure.core
    compojure.core
    metabase.models.setting
    metabase.util.i18n
    metabase.api.common}]
 [metabase.api.metric
  #{metabase.models.table
    schema.core
    metabase.models.metric
    metabase.models.interface
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    compojure.core
    metabase.models.revision
    metabase.mbql.normalize
    metabase.api.query-description
    toucan.db
    metabase.util.i18n
    clojure.data
    metabase.api.common
    metabase.related
    toucan.hydrate
    metabase.events}]
 [metabase.api.segment
  #{metabase.models.table
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.util
    compojure.core
    metabase.models.revision
    metabase.mbql.normalize
    metabase.api.query-description
    toucan.db
    metabase.util.i18n
    metabase.api.common
    metabase.models.segment
    metabase.related
    toucan.hydrate
    metabase.events}]
 [metabase.api.ldap
  #{metabase.util.schema
    metabase.integrations.ldap
    clojure.tools.logging
    clojure.core
    clojure.set
    compojure.core
    metabase.models.setting
    metabase.api.common}]
 [metabase.api.alert
  #{metabase.email
    schema.core
    metabase.models.interface
    metabase.util.schema
    clojure.tools.logging
    clojure.core
    metabase.models.pulse
    metabase.util
    compojure.core
    metabase.models.card
    metabase.email.messages
    toucan.db
    metabase.util.i18n
    clojure.data
    metabase.api.common
    toucan.hydrate
    medley.core
    metabase.events}]
 [metabase.api.revision
  #{schema.core
    metabase.api.card
    clojure.core
    compojure.core
    metabase.models.revision
    metabase.models.card
    metabase.api.common
    metabase.models.dashboard}]
 [metabase.api.login-history
  #{clojure.core metabase.util compojure.core metabase.models.login-history toucan.db metabase.api.common}]
 [metabase.api.notify
  #{metabase.models.table
    metabase.sync.sync-metadata
    schema.core
    metabase.util.schema
    clojure.core
    compojure.core
    metabase.models.database
    metabase.sync
    metabase.api.common}]
 [metabase.api.user
  #{honeysql.helpers
    schema.core
    metabase.models.collection
    metabase.models.permissions-group
    metabase.util.schema
    metabase.integrations.google
    metabase.integrations.ldap
    metabase.plugins.classloader
    clojure.core
    metabase.server.middleware.offset-paging
    metabase.util
    compojure.core
    metabase.models.user
    cemerick.friend.credentials
    metabase.email.messages
    toucan.db
    metabase.util.i18n
    metabase.api.common
    toucan.hydrate}]
 [metabase.api.routes
  #{metabase.api.user
    metabase.api.notify
    metabase.api.login-history
    metabase.api.revision
    metabase.api.alert
    metabase.api.ldap
    metabase.api.segment
    metabase.config
    metabase.api.embed
    metabase.api.metric
    metabase.api.slack
    metabase.api.pulse
    metabase.api.field
    metabase.api.tiles
    metabase.api.moderation-review
    metabase.api.session
    metabase.api.card
    metabase.api.activity
    metabase.api.automagic-dashboards
    metabase.plugins.classloader
    clojure.core
    metabase.api.table
    metabase.api.search
    metabase.api.native-query-snippet
    compojure.route
    metabase.api.transform
    metabase.util
    metabase.api.setup
    metabase.api.dashboard
    compojure.core
    metabase.api.task
    metabase.server.middleware.exceptions
    metabase.api.public
    metabase.api.setting
    metabase.api.database
    metabase.api.metastore
    metabase.api.collection
    metabase.api.preview-embed
    metabase.server.middleware.auth
    metabase.api.dataset
    metabase.util.i18n
    metabase.api.util
    metabase.api.email
    metabase.api.permissions
    metabase.api.testing
    metabase.api.geojson}]
 [metabase.server.routes.index
  #{metabase.public-settings
    metabase.core.initialization-status
    clojure.tools.logging
    clojure.core
    stencil.core
    metabase.models.setting
    hiccup.util
    cheshire.core
    clojure.java.io
    metabase.util.i18n
    clojure.string
    metabase.util.embed
    ring.util.response}]
 [metabase.server.routes
  #{metabase.public-settings
    metabase.server.routes.index
    metabase.core.initialization-status
    metabase.plugins.classloader
    clojure.core
    compojure.route
    metabase.util
    compojure.core
    metabase.api.routes
    metabase.api.dataset
    ring.util.response}]
 [ring.util.request #{clojure.core ring.util.parsing}]
 [ring.middleware.params #{ring.util.request ring.util.codec clojure.core}]
 [ring.middleware.cookies #{ring.util.codec clojure.core clojure.string ring.util.parsing}]
 [metabase.db.data-migrations
  #{metabase.public-settings
    toucan.models
    metabase.models.collection
    metabase.models.permissions-group
    clojure.tools.logging
    clojure.core
    metabase.models.permissions-group-membership
    metabase.models.pulse
    metabase.models.field
    metabase.util
    metabase.models.dashboard-card
    metabase.models.user
    cemerick.friend.credentials
    metabase.models.setting
    metabase.db.util
    metabase.models.card
    metabase.models.permissions
    toucan.db
    cheshire.core
    metabase.mbql.schema
    metabase.models.database
    metabase.util.i18n
    clojure.walk
    metabase.models.humanization
    medley.core
    metabase.models.dashboard}]
 [ring.adapter.jetty #{clojure.core ring.util.servlet}]
 [metabase.server
  #{metabase.config
    ring.adapter.jetty
    clojure.tools.logging
    clojure.core
    metabase.util
    ring.util.servlet
    metabase.util.i18n
    clojure.string
    medley.core
    metabase.server.protocols}]
 [metabase.server.middleware.log
  #{metabase.driver.sql-jdbc.execute.diagnostic
    metabase.server
    clojure.tools.logging
    metabase.async.util
    metabase.async.streaming-response.thread-pool
    clojure.core
    clojure.core.async
    metabase.util
    metabase.async.streaming-response
    metabase.server.request.util
    toucan.db
    metabase.util.i18n
    clojure.string}]
 [metabase.driver.mysql
  #{metabase.driver.sql-jdbc.sync
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc
    metabase.util.ssh
    clojure.java.jdbc
    metabase.driver
    metabase.driver.sql.query-processor
    honeysql.core
    clojure.tools.logging
    clojure.core
    metabase.driver.common
    clojure.set
    metabase.util.honeysql-extensions
    metabase.util
    metabase.driver.sql.util.unprepare
    metabase.driver.sql-jdbc.common
    metabase.query-processor.timezone
    java-time
    metabase.driver.sql-jdbc.execute
    metabase.util.i18n
    clojure.string
    metabase.db.spec}]
 [metabase.driver.h2
  #{metabase.driver.sql-jdbc.sync
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc
    metabase.db.jdbc-protocols
    metabase.util.ssh
    metabase.driver
    metabase.driver.sql.query-processor
    metabase.query-processor.store
    honeysql.core
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.driver.common
    metabase.util.honeysql-extensions
    metabase.util
    java-time
    metabase.driver.sql-jdbc.execute
    metabase.util.i18n
    clojure.string
    metabase.query-processor.error-type
    metabase.db.spec}]
 [metabase.server.middleware.ssl
  #{metabase.public-settings
    ring.util.request
    clojure.core
    metabase.server.request.util
    clojure.string
    ring.util.response}]
 [metabase.plugins.dependencies
  #{clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.util
    metabase.util.i18n
    clojure.string
    environ.core}]
 [metabase.plugins.lazy-loaded-driver
  #{metabase.util.ssh
    metabase.driver
    clojure.tools.logging
    clojure.core
    metabase.driver.common
    metabase.util
    metabase.util.i18n
    metabase.plugins.init-steps}]
 [metabase.plugins.initialize
  #{schema.core
    metabase.plugins.lazy-loaded-driver
    clojure.tools.logging
    clojure.core
    metabase.util
    metabase.plugins.dependencies
    metabase.util.i18n
    metabase.plugins.init-steps}]
 [metabase.plugins
  #{metabase.config
    metabase.util.files
    clojure.tools.logging
    metabase.plugins.classloader
    clojure.core
    metabase.plugins.initialize
    clojure.java.io
    metabase.util.i18n
    clojure.string
    yaml.core
    environ.core}]
 [ring.middleware.json
  #{ring.util.request
    ring.util.io
    clojure.core
    cheshire.core
    clojure.java.io
    ring.core.protocols
    cheshire.parse
    ring.util.response}]
 [metabase.server.middleware.json
  #{metabase.util.date-2
    ring.util.io
    clojure.core
    cheshire.generate
    ring.middleware.json
    cheshire.core
    ring.util.response}]
 [clojure.tools.trace #{clojure.core clojure.pprint}]
 [metabase.server.middleware.browser-cookie
  #{schema.core metabase.util.schema clojure.core java-time ring.util.response}]
 [metabase.async.api-response
  #{compojure.response
    clojure.tools.logging
    clojure.core
    clojure.core.async
    metabase.util
    metabase.server.middleware.exceptions
    cheshire.core
    clojure.java.io
    ring.core.protocols
    metabase.util.i18n
    ring.util.response}]
 [ring.middleware.gzip #{clojure.reflect clojure.core clojure.java.io}]
 [metabase.server.handler
  #{ring.middleware.gzip
    metabase.config
    metabase.server.middleware.ssl
    metabase.async.api-response
    metabase.server.middleware.browser-cookie
    metabase.server.middleware.session
    metabase.server.middleware.security
    ring.middleware.cookies
    ring.middleware.params
    clojure.core
    metabase.server.middleware.offset-paging
    metabase.server.middleware.exceptions
    metabase.server.middleware.json
    metabase.server.middleware.auth
    metabase.server.middleware.log
    metabase.server.middleware.misc
    metabase.server.routes
    ring.middleware.keyword-params}]
 [metabase.core
  #{metabase.config
    metabase.core.initialization-status
    metabase.db.data-migrations
    metabase.server
    metabase.metabot
    metabase.server.handler
    clojure.tools.logging
    metabase.plugins.classloader
    metabase.sample-data
    clojure.core
    metabase.util
    metabase.models.user
    metabase.plugins
    metabase.driver.mysql
    metabase.troubleshooting
    clojure.tools.trace
    metabase.db
    metabase.driver.h2
    toucan.db
    metabase.task
    metabase.util.i18n
    clojure.string
    metabase.setup
    metabase.events
    metabase.driver.postgres}]]
