[[clojure.walk nil]
 [clojure.template #{clojure.walk}]
 [clojure.tools.analyzer.env nil]
 [clojure.tools.analyzer.utils #{clojure.tools.analyzer.env}]
 [clojure.tools.analyzer.ast #{clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.validate-recur #{clojure.tools.analyzer.ast clojure.tools.analyzer.utils}]
 [clojure.core.async.impl.protocols nil]
 [clojure.core.async.impl.mutex #{clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.concurrent nil]
 [clojure.core.async.impl.exec.threadpool #{clojure.core.async.impl.concurrent clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.dispatch #{clojure.core.async.impl.exec.threadpool clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.channels
  #{clojure.core.async.impl.dispatch clojure.core.async.impl.mutex clojure.core.async.impl.protocols}]
 [clojure.core.async.impl.timers #{clojure.core.async.impl.channels clojure.core.async.impl.protocols}]
 [clojure.set nil]
 [metabase.types.coercion-hierarchies #{clojure.set}]
 [metabase.types #{clojure.set metabase.types.coercion-hierarchies}]
 [ring.util.parsing nil]
 [clojure.string nil]
 [clojure.java.io #{clojure.string}]
 [ring.util.time #{clojure.string}]
 [ring.util.io #{clojure.java.io}]
 [ring.util.response #{clojure.java.io clojure.string ring.util.io ring.util.parsing ring.util.time}]
 [ring.core.protocols #{clojure.java.io ring.util.response}]
 [ring.util.servlet #{clojure.java.io clojure.string ring.core.protocols}]
 [riddley.compiler nil]
 [riddley.walk #{riddley.compiler}]
 [potemkin.walk nil]
 [potemkin.macros #{potemkin.walk riddley.walk}]
 [potemkin.types #{clojure.set clojure.string potemkin.macros riddley.walk}]
 [metabase.server.protocols #{potemkin.types ring.util.servlet}]
 [dynapath.dynamic-classpath nil]
 [dynapath.defaults #{dynapath.dynamic-classpath}]
 [clojure.math.numeric-tower nil]
 [medley.core nil]
 [clojure.tools.reader.default-data-readers nil]
 [clojure.edn nil]
 [environ.core #{clojure.edn clojure.java.io clojure.string}]
 [clojure.tools.namespace.dependency #{clojure.set}]
 [clojure.tools.namespace.track #{clojure.set clojure.tools.namespace.dependency}]
 [schema.utils #{clojure.string}]
 [clojure.tools.logging.impl nil]
 [clojure.data #{clojure.set}]
 [clj-tuple nil]
 [clojure.tools.reader.impl.inspect nil]
 [schema.macros #{clojure.string schema.utils}]
 [schema.spec.core #{schema.macros schema.utils}]
 [schema.spec.leaf #{schema.spec.core}]
 [clojure.pprint #{clojure.walk}]
 [schema.spec.variant #{schema.macros schema.spec.core schema.utils}]
 [dynapath.util #{dynapath.defaults dynapath.dynamic-classpath}]
 [clojure.tools.reader.impl.utils nil]
 [clojure.tools.reader.reader-types #{clojure.tools.reader.impl.utils}]
 [clojure.tools.reader.impl.errors #{clojure.tools.reader.impl.inspect clojure.tools.reader.reader-types}]
 [clojure.tools.reader.impl.commons
  #{clojure.tools.reader.impl.errors clojure.tools.reader.impl.utils clojure.tools.reader.reader-types}]
 [clojure.tools.reader
  #{clojure.tools.reader.default-data-readers
    clojure.tools.reader.impl.commons
    clojure.tools.reader.impl.errors
    clojure.tools.reader.impl.utils
    clojure.tools.reader.reader-types}]
 [cheshire.generate nil]
 [clojure.tools.logging #{clojure.pprint clojure.string clojure.tools.logging.impl}]
 [metabase.plugins.classloader #{clojure.string clojure.tools.logging dynapath.util}]
 [potemkin.utils #{clj-tuple potemkin.macros}]
 [potemkin.collections #{potemkin.macros potemkin.types potemkin.utils}]
 [potemkin.namespaces nil]
 [potemkin #{potemkin.collections potemkin.macros potemkin.namespaces potemkin.types potemkin.utils}]
 [clojure.tools.reader.edn
  #{clojure.tools.reader
    clojure.tools.reader.impl.commons
    clojure.tools.reader.impl.errors
    clojure.tools.reader.impl.utils
    clojure.tools.reader.reader-types}]
 [schema.spec.collection #{schema.macros schema.spec.core schema.utils}]
 [schema.core
  #{clojure.pprint
    clojure.string
    schema.macros
    schema.spec.collection
    schema.spec.core
    schema.spec.leaf
    schema.spec.variant
    schema.utils}]
 [metabase.util.i18n.impl
  #{clojure.java.io
    clojure.string
    clojure.tools.logging
    clojure.tools.reader.edn
    metabase.plugins.classloader
    potemkin.types}]
 [metabase.util.i18n
  #{cheshire.generate
    clojure.string
    clojure.tools.logging
    clojure.walk
    metabase.util.i18n.impl
    potemkin
    potemkin.types
    schema.core}]
 [flatland.ordered.common nil]
 [flatland.ordered.set #{clojure.string flatland.ordered.common}]
 [buddy.core.codecs #{clojure.string}]
 [buddy.core.hash #{buddy.core.codecs clojure.java.io}]
 [buddy.core.kdf #{buddy.core.codecs buddy.core.hash}]
 [buddy.core.nonce nil]
 [buddy.core.bytes nil]
 [buddy.core.padding #{buddy.core.bytes}]
 [buddy.core.mac #{buddy.core.bytes buddy.core.codecs buddy.core.hash clojure.java.io}]
 [buddy.core.crypto #{buddy.core.bytes buddy.core.codecs buddy.core.mac buddy.core.nonce buddy.core.padding}]
 [clojure.tools.namespace.parse #{clojure.set clojure.tools.reader}]
 [flatland.ordered.map #{clojure.string flatland.ordered.common flatland.ordered.set}]
 [clojure.java.classpath #{clojure.java.io}]
 [colorize.core #{clojure.pprint}]
 [weavejester.dependency #{clojure.set}]
 [clojure.tools.namespace.file #{clojure.java.io clojure.tools.namespace.parse clojure.tools.namespace.track}]
 [ring.util.codec #{clojure.string}]
 [metabase.config #{clojure.java.io clojure.string environ.core metabase.plugins.classloader}]
 [metabase.shared.util nil]
 [clojure.tools.namespace.find
  #{clojure.java.classpath clojure.java.io clojure.set clojure.tools.namespace.file clojure.tools.namespace.parse}]
 [metabase.util
  #{clojure.data
    clojure.java.classpath
    clojure.math.numeric-tower
    clojure.pprint
    clojure.set
    clojure.string
    clojure.tools.logging
    clojure.tools.namespace.find
    clojure.walk
    colorize.core
    flatland.ordered.map
    medley.core
    metabase.config
    metabase.shared.util
    metabase.util.i18n
    potemkin
    ring.util.codec
    weavejester.dependency}]
 [metabase.util.encryption
  #{buddy.core.codecs
    buddy.core.crypto
    buddy.core.kdf
    buddy.core.nonce
    clojure.string
    clojure.tools.logging
    environ.core
    metabase.util
    metabase.util.i18n
    ring.util.codec}]
 [taoensso.truss.impl #{clojure.set}]
 [clojure.tools.analyzer.passes #{clojure.tools.analyzer.ast clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.source-info #{clojure.tools.analyzer.ast clojure.tools.analyzer.utils}]
 [clojure.data.priority-map nil]
 [clojure.core.cache #{clojure.data.priority-map}]
 [clojure.core.protocols nil]
 [clojure.datafy #{clojure.core.protocols}]
 [clojure.reflect #{clojure.datafy clojure.set clojure.string}]
 [clojure.core.memoize #{clojure.core.cache}]
 [clojure.tools.analyzer.jvm.utils
  #{clojure.core.memoize
    clojure.java.io
    clojure.reflect
    clojure.string
    clojure.tools.analyzer.env
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.elide-meta #{clojure.tools.analyzer.passes.source-info}]
 [clojure.tools.analyzer.passes.constant-lifter #{clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer #{clojure.tools.analyzer.env clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.analyze-host-expr
  #{clojure.tools.analyzer clojure.tools.analyzer.jvm.utils clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.constant-lifter
  #{clojure.tools.analyzer
    clojure.tools.analyzer.passes.constant-lifter
    clojure.tools.analyzer.passes.elide-meta
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.annotate-tag
  #{clojure.tools.analyzer.jvm.utils clojure.tools.analyzer.passes.jvm.constant-lifter}]
 [clojure.tools.analyzer.passes.uniquify
  #{clojure.tools.analyzer.ast clojure.tools.analyzer.env clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.add-binding-atom #{clojure.tools.analyzer.ast clojure.tools.analyzer.passes.uniquify}]
 [clojure.tools.analyzer.passes.jvm.annotate-loops #{clojure.tools.analyzer.ast}]
 [clojure.tools.analyzer.passes.jvm.fix-case-test #{clojure.tools.analyzer.passes.add-binding-atom}]
 [clojure.tools.analyzer.passes.cleanup nil]
 [clojure.tools.analyzer.passes.jvm.annotate-host-info
  #{clojure.tools.analyzer
    clojure.tools.analyzer.ast
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.cleanup
    clojure.tools.analyzer.passes.elide-meta
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.trim #{clojure.tools.analyzer.ast clojure.tools.analyzer.passes.elide-meta}]
 [clojure.tools.analyzer.passes.jvm.infer-tag
  #{clojure.set
    clojure.tools.analyzer.env
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.annotate-host-info
    clojure.tools.analyzer.passes.jvm.annotate-tag
    clojure.tools.analyzer.passes.jvm.fix-case-test
    clojure.tools.analyzer.passes.trim
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.validate
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer.env
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.cleanup
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate-recur
    clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.classify-invoke
  #{clojure.tools.analyzer.jvm.utils clojure.tools.analyzer.passes.jvm.validate clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.passes.jvm.validate-loop-locals
  #{clojure.tools.analyzer.ast
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.classify-invoke
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate}]
 [clojure.tools.analyzer.passes.jvm.box
  #{clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate
    clojure.tools.analyzer.utils}]
 [clojure.core.async.impl.buffers #{clojure.core.async.impl.protocols}]
 [clojure.tools.analyzer.passes.emit-form #{clojure.tools.analyzer.passes.uniquify}]
 [clojure.tools.analyzer.passes.jvm.emit-form
  #{clojure.tools.analyzer.passes.emit-form clojure.tools.analyzer.passes.uniquify}]
 [clojure.tools.analyzer.passes.jvm.warn-on-reflection
  #{clojure.tools.analyzer.passes.jvm.validate clojure.tools.analyzer.passes.jvm.validate-loop-locals}]
 [clojure.tools.analyzer.passes.warn-earmuff #{clojure.tools.analyzer.utils}]
 [clojure.tools.analyzer.jvm
  #{clojure.core.memoize
    clojure.java.io
    clojure.tools.analyzer
    clojure.tools.analyzer.ast
    clojure.tools.analyzer.env
    clojure.tools.analyzer.jvm.utils
    clojure.tools.analyzer.passes
    clojure.tools.analyzer.passes.elide-meta
    clojure.tools.analyzer.passes.jvm.analyze-host-expr
    clojure.tools.analyzer.passes.jvm.box
    clojure.tools.analyzer.passes.jvm.classify-invoke
    clojure.tools.analyzer.passes.jvm.constant-lifter
    clojure.tools.analyzer.passes.jvm.emit-form
    clojure.tools.analyzer.passes.jvm.infer-tag
    clojure.tools.analyzer.passes.jvm.validate
    clojure.tools.analyzer.passes.jvm.validate-loop-locals
    clojure.tools.analyzer.passes.jvm.warn-on-reflection
    clojure.tools.analyzer.passes.source-info
    clojure.tools.analyzer.passes.trim
    clojure.tools.analyzer.passes.uniquify
    clojure.tools.analyzer.passes.warn-earmuff
    clojure.tools.analyzer.utils
    clojure.tools.reader
    clojure.tools.reader.reader-types}]
 [clojure.core.async.impl.ioc-macros
  #{clojure.core.async.impl.dispatch
    clojure.core.async.impl.protocols
    clojure.pprint
    clojure.set
    clojure.tools.analyzer
    clojure.tools.analyzer.ast
    clojure.tools.analyzer.env
    clojure.tools.analyzer.jvm
    clojure.tools.analyzer.passes
    clojure.tools.analyzer.passes.jvm.annotate-loops
    clojure.tools.analyzer.passes.jvm.warn-on-reflection}]
 [clojure.core.async
  #{clojure.core.async.impl.buffers
    clojure.core.async.impl.channels
    clojure.core.async.impl.concurrent
    clojure.core.async.impl.dispatch
    clojure.core.async.impl.ioc-macros
    clojure.core.async.impl.mutex
    clojure.core.async.impl.protocols
    clojure.core.async.impl.timers}]
 [metabase.events
  #{clojure.core.async
    clojure.string
    clojure.tools.logging
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n}]
 [metabase.db.spec #{clojure.string metabase.config}]
 [clj-http.util #{clojure.string clojure.walk}]
 [clj-http.headers #{clojure.string potemkin}]
 [clj-http.multipart nil]
 [clj-http.conn-mgr #{clj-http.util clojure.java.io}]
 [clj-http.core #{clj-http.conn-mgr clj-http.headers clj-http.multipart clj-http.util clojure.pprint}]
 [java-time.util #{clojure.string}]
 [java-time.potemkin.util #{clj-tuple}]
 [java-time.core nil]
 [java-time.format #{clojure.string java-time.core java-time.util}]
 [java-time.properties #{java-time.core java-time.util}]
 [java-time.graph #{clj-tuple clojure.set clojure.string java-time.potemkin.util java-time.util}]
 [java-time.clock #{java-time.core}]
 [java-time.defconversion #{clj-tuple java-time.graph}]
 [java-time.temporal
  #{clojure.string
    java-time.clock
    java-time.core
    java-time.defconversion
    java-time.format
    java-time.properties
    java-time.util}]
 [java-time.local
  #{java-time.clock java-time.core java-time.defconversion java-time.format java-time.properties java-time.temporal}]
 [java-time.convert #{java-time.core java-time.local java-time.properties java-time.temporal java-time.util}]
 [java-time.amount
  #{clojure.string
    java-time.convert
    java-time.core
    java-time.defconversion
    java-time.local
    java-time.properties
    java-time.util}]
 [java-time.zone
  #{java-time.amount
    java-time.clock
    java-time.core
    java-time.defconversion
    java-time.format
    java-time.properties
    java-time.temporal
    java-time.util}]
 [java-time.single-field
  #{clojure.string
    java-time.clock
    java-time.core
    java-time.defconversion
    java-time.format
    java-time.util
    java-time.zone}]
 [java-time.sugar #{java-time.core java-time.util}]
 [java-time.chrono #{java-time.core}]
 [java-time.adjuster #{java-time.single-field java-time.util}]
 [java-time.pre-java8 #{java-time.convert java-time.defconversion java-time.local java-time.temporal}]
 [java-time.interval #{clojure.string java-time.amount java-time.core java-time.temporal java-time.util}]
 [java-time.mock #{java-time.amount java-time.core java-time.temporal java-time.zone}]
 [java-time.joda #{java-time.defconversion java-time.local java-time.temporal java-time.util java-time.zone}]
 [java-time.seqs nil]
 [java-time.potemkin.namespaces nil]
 [java-time
  #{java-time.adjuster
    java-time.amount
    java-time.chrono
    java-time.clock
    java-time.convert
    java-time.core
    java-time.format
    java-time.interval
    java-time.joda
    java-time.local
    java-time.mock
    java-time.potemkin.namespaces
    java-time.pre-java8
    java-time.properties
    java-time.seqs
    java-time.single-field
    java-time.sugar
    java-time.temporal
    java-time.util
    java-time.zone}]
 [metabase.util.date-2.common #{clojure.string java-time metabase.util}]
 [metabase.util.date-2.parse.builder #{metabase.util.date-2.common}]
 [cheshire.parse nil]
 [honeysql.types nil]
 [cemerick.friend.credentials nil]
 [metabase.util.password #{cemerick.friend.credentials clojure.java.io clojure.string metabase.config metabase.util}]
 [cheshire.generate-seq #{cheshire.generate}]
 [cheshire.factory nil]
 [cheshire.core #{cheshire.factory cheshire.generate cheshire.generate-seq cheshire.parse}]
 [honeysql.util nil]
 [honeysql.format #{clojure.string honeysql.types}]
 [honeysql.helpers nil]
 [honeysql.core #{clojure.string honeysql.format honeysql.helpers honeysql.types honeysql.util}]
 [clojure.java.jdbc #{clojure.set clojure.string clojure.walk}]
 [toucan.util #{clojure.string}]
 [toucan.models #{clojure.walk honeysql.format potemkin.types toucan.util}]
 [toucan.db
  #{clojure.java.jdbc
    clojure.pprint
    clojure.string
    clojure.tools.logging
    clojure.walk
    honeysql.core
    honeysql.format
    honeysql.helpers
    toucan.models
    toucan.util}]
 [metabase.db.env
  #{clojure.java.io
    clojure.tools.logging
    clojure.walk
    metabase.config
    metabase.db.spec
    metabase.util
    metabase.util.i18n
    ring.util.codec}]
 [metabase.db.connection #{metabase.db.env}]
 [metabase.util.schema
  #{cheshire.core
    clojure.string
    clojure.walk
    medley.core
    metabase.types
    metabase.util
    metabase.util.i18n
    metabase.util.password
    schema.core
    schema.macros
    schema.utils}]
 [pretty.core #{clojure.pprint}]
 [metabase.util.honeysql-extensions
  #{clojure.pprint
    clojure.string
    honeysql.core
    honeysql.format
    metabase.util
    metabase.util.schema
    potemkin.types
    pretty.core
    schema.core}]
 [metabase.util.date-2.parse
  #{clojure.string
    java-time
    metabase.util.date-2.common
    metabase.util.date-2.parse.builder
    metabase.util.i18n
    schema.core}]
 [clojure.core nil]
 [clojure.data.csv #{clojure.string}]
 [metabase.util.date-2
  #{clojure.string
    clojure.tools.logging
    java-time
    java-time.core
    metabase.util.date-2.common
    metabase.util.date-2.parse
    metabase.util.i18n
    potemkin.types
    schema.core}]
 [metabase.models.setting.cache
  #{clojure.core
    clojure.java.jdbc
    clojure.tools.logging
    honeysql.core
    metabase.db.connection
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    toucan.db}]
 [metabase.models.setting
  #{cheshire.core
    clojure.core
    clojure.data
    clojure.data.csv
    clojure.string
    clojure.tools.logging
    environ.core
    medley.core
    metabase.events
    metabase.models.setting.cache
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    schema.core
    toucan.db
    toucan.models}]
 [metabase.models.humanization
  #{clojure.string clojure.tools.logging metabase.models.setting metabase.util.i18n toucan.db}]
 [toucan.hydrate #{toucan.db toucan.models}]
 [instaparse.viz nil]
 [instaparse.print #{clojure.string}]
 [instaparse.failure #{instaparse.print}]
 [instaparse.auto-flatten-seq #{clojure.core.protocols}]
 [instaparse.util nil]
 [instaparse.reduction #{instaparse.auto-flatten-seq instaparse.util}]
 [instaparse.combinators-source #{instaparse.reduction instaparse.util}]
 [instaparse.gll
  #{instaparse.auto-flatten-seq
    instaparse.combinators-source
    instaparse.failure
    instaparse.print
    instaparse.reduction}]
 [instaparse.repeat
  #{instaparse.auto-flatten-seq
    instaparse.combinators-source
    instaparse.failure
    instaparse.gll
    instaparse.reduction
    instaparse.viz}]
 [metabase.query-processor.error-type nil]
 [clojure.core.match.protocols nil]
 [slingshot.support #{clojure.walk}]
 [slingshot.slingshot #{slingshot.support}]
 [instaparse.macros nil]
 [instaparse.cfg #{clojure.string instaparse.combinators-source instaparse.gll instaparse.reduction instaparse.util}]
 [instaparse.transform #{instaparse.gll instaparse.util}]
 [instaparse.abnf
  #{clojure.walk
    instaparse.cfg
    instaparse.combinators-source
    instaparse.gll
    instaparse.reduction
    instaparse.transform
    instaparse.util}]
 [instaparse.line-col #{instaparse.transform instaparse.util}]
 [instaparse.core
  #{clojure.walk
    instaparse.abnf
    instaparse.cfg
    instaparse.combinators-source
    instaparse.failure
    instaparse.gll
    instaparse.line-col
    instaparse.macros
    instaparse.print
    instaparse.reduction
    instaparse.repeat
    instaparse.transform
    instaparse.util
    instaparse.viz}]
 [clojure.core.match #{clojure.core.match.protocols clojure.set}]
 [metabase.models.permissions.parse #{clojure.core.match clojure.walk instaparse.core}]
 [net.cgrand.macrovich nil]
 [metabase.shared.util.log #{net.cgrand.macrovich}]
 [metabase.models.permissions.delete-sandboxes #{metabase.plugins.classloader metabase.util potemkin pretty.core}]
 [taoensso.truss #{taoensso.truss.impl}]
 [taoensso.encore #{clojure.java.io clojure.set clojure.string clojure.tools.reader.edn clojure.walk taoensso.truss}]
 [taoensso.nippy.crypto #{taoensso.encore}]
 [metabase.driver.impl
  #{clojure.tools.logging metabase.plugins.classloader metabase.util metabase.util.i18n schema.core}]
 [metabase.driver
  #{clojure.string
    clojure.tools.logging
    metabase.driver.impl
    metabase.models.setting
    metabase.plugins.classloader
    metabase.util.i18n
    metabase.util.schema
    potemkin
    schema.core
    toucan.db}]
 [metabase.driver.util
  #{clojure.core.memoize
    clojure.tools.logging
    metabase.config
    metabase.driver
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.mbql.schema.helpers #{clojure.string metabase.types schema.core}]
 [metabase.mbql.schema.macros #{metabase.mbql.schema.helpers}]
 [metabase.mbql.schema
  #{clojure.core clojure.set metabase.mbql.schema.helpers metabase.mbql.schema.macros schema.core}]
 [ring.util.mime-type #{clojure.string}]
 [metabase.async.streaming-response.thread-pool #{metabase.config}]
 [metabase.async.util #{clojure.core.async clojure.tools.logging schema.core}]
 [compojure.response #{ring.util.mime-type ring.util.response}]
 [metabase.async.streaming-response
  #{cheshire.core
    clojure.core.async
    clojure.tools.logging
    compojure.response
    metabase.async.streaming-response.thread-pool
    metabase.async.util
    metabase.server.protocols
    metabase.util
    metabase.util.i18n
    potemkin.types
    pretty.core
    ring.util.response
    ring.util.servlet}]
 [metabase.api.common.internal
  #{clojure.string
    clojure.tools.logging
    metabase.async.streaming-response
    metabase.config
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    potemkin.types
    schema.core}]
 [metabase.util.cron #{clojure.string metabase.util.i18n metabase.util.schema schema.core}]
 [clj-http.links nil]
 [taoensso.nippy.utils #{clojure.string taoensso.encore}]
 [taoensso.nippy.encryption #{taoensso.encore taoensso.nippy.crypto}]
 [taoensso.nippy.compression #{taoensso.encore}]
 [taoensso.nippy
  #{clojure.java.io
    clojure.string
    taoensso.encore
    taoensso.nippy.compression
    taoensso.nippy.encryption
    taoensso.nippy.utils}]
 [metabase.shared.util.i18n #{net.cgrand.macrovich}]
 [metabase.mbql.util.match.impl nil]
 [metabase.mbql.util.match #{clojure.core.match clojure.walk metabase.mbql.util.match.impl net.cgrand.macrovich}]
 [metabase.mbql.util
  #{clojure.string
    metabase.mbql.schema
    metabase.mbql.schema.helpers
    metabase.mbql.util.match
    metabase.shared.util.i18n
    potemkin
    schema.core}]
 [metabase.mbql.normalize
  #{clojure.set
    clojure.walk
    medley.core
    metabase.mbql.util
    metabase.mbql.util.match
    metabase.shared.util.i18n
    metabase.shared.util.log}]
 [clout.core #{clojure.set clojure.string instaparse.core}]
 [ring.middleware.head nil]
 [clojure.tools.macro #{clojure.string}]
 [compojure.core #{clojure.tools.macro clout.core compojure.response medley.core ring.middleware.head ring.util.codec}]
 [clj-http.cookies #{clj-http.util clojure.string}]
 [clojure.stacktrace nil]
 [clj-http.client
  #{clj-http.conn-mgr
    clj-http.cookies
    clj-http.core
    clj-http.headers
    clj-http.links
    clj-http.util
    clojure.java.io
    clojure.stacktrace
    clojure.string
    clojure.walk
    slingshot.slingshot}]
 [metabase.public-settings.metastore
  #{cheshire.core
    clj-http.client
    clojure.core.memoize
    clojure.string
    clojure.tools.logging
    environ.core
    metabase.config
    metabase.models.setting
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.interface
  #{cheshire.core
    clojure.core.memoize
    clojure.tools.logging
    clojure.walk
    metabase.db.connection
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.plugins.classloader
    metabase.util
    metabase.util.cron
    metabase.util.encryption
    metabase.util.i18n
    potemkin.types
    schema.core
    taoensso.nippy
    toucan.models}]
 [metabase.public-settings
  #{clojure.string
    clojure.tools.logging
    java-time
    metabase.config
    metabase.driver.util
    metabase.models.setting
    metabase.plugins.classloader
    metabase.public-settings.metastore
    metabase.util
    metabase.util.i18n
    metabase.util.password
    toucan.db}]
 [metabase.api.common
  #{clojure.string
    clojure.tools.logging
    compojure.core
    honeysql.types
    medley.core
    metabase.api.common.internal
    metabase.models.interface
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.permissions-group
  #{clojure.string
    clojure.tools.logging
    metabase.db.connection
    metabase.models.setting
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    toucan.db
    toucan.models}]
 [metabase.util.regex #{clojure.string}]
 [metabase.models.permissions-revision #{metabase.util metabase.util.i18n toucan.db toucan.models}]
 [metabase.models.permissions
  #{clojure.core.match
    clojure.data
    clojure.string
    clojure.tools.logging
    medley.core
    metabase.api.common
    metabase.config
    metabase.models.interface
    metabase.models.permissions-group
    metabase.models.permissions-revision
    metabase.models.permissions.delete-sandboxes
    metabase.models.permissions.parse
    metabase.plugins.classloader
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    metabase.util.regex
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.db.util #{metabase.util metabase.util.schema schema.core toucan.db}]
 [metabase.models.dimension #{metabase.util toucan.models}]
 [metabase.models.field-values
  #{clojure.tools.logging
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.models.field
  #{clojure.core.memoize
    clojure.string
    clojure.tools.logging
    medley.core
    metabase.models.dimension
    metabase.models.field-values
    metabase.models.humanization
    metabase.models.interface
    metabase.models.permissions
    metabase.util
    metabase.util.i18n
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.models.params.field-values
  #{clojure.tools.logging
    metabase.models.field
    metabase.models.field-values
    metabase.models.interface
    metabase.plugins.classloader
    metabase.util
    potemkin
    pretty.core
    toucan.db}]
 [metabase.models.params
  #{clojure.set
    clojure.tools.logging
    metabase.db.util
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.params.field-values
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.driver.common.parameters.dates
  #{java-time
    medley.core
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.params
    metabase.query-processor.error-type
    metabase.util.date-2
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.db.liquibase #{clojure.java.jdbc clojure.string clojure.tools.logging metabase.util metabase.util.i18n}]
 [metabase.models.database
  #{cheshire.generate
    clojure.tools.logging
    medley.core
    metabase.api.common
    metabase.db.util
    metabase.driver
    metabase.driver.util
    metabase.models.interface
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    toucan.db
    toucan.models}]
 [metabase.util.ssh #{clojure.tools.logging metabase.driver metabase.public-settings metabase.util}]
 [metabase.connection-pool nil]
 [metabase.driver.sql-jdbc.connection
  #{clojure.java.jdbc
    clojure.tools.logging
    metabase.config
    metabase.connection-pool
    metabase.driver
    metabase.models.database
    metabase.query-processor.error-type
    metabase.util
    metabase.util.i18n
    metabase.util.ssh
    toucan.db}]
 [metabase.db.setup
  #{clojure.java.jdbc
    clojure.tools.logging
    metabase.db.connection
    metabase.db.liquibase
    metabase.driver.sql-jdbc.connection
    metabase.models.setting
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.db.jdbc-protocols
  #{clojure.java.jdbc clojure.string clojure.tools.logging java-time metabase.db.connection metabase.util.date-2}]
 [metabase.db.connection-pool-setup
  #{clojure.tools.logging
    metabase.config
    metabase.connection-pool
    metabase.db.connection
    metabase.db.jdbc-protocols
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.db #{metabase.config metabase.db.connection metabase.db.connection-pool-setup metabase.db.setup potemkin}]
 [user-agent #{clojure.string}]
 [metabase.server.request.util
  #{cheshire.core
    clj-http.client
    clojure.string
    clojure.tools.logging
    java-time
    metabase.config
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    user-agent}]
 [metabase.server.middleware.misc
  #{clojure.string
    clojure.tools.logging
    metabase.async.streaming-response
    metabase.db
    metabase.public-settings
    metabase.server.request.util
    metabase.util.i18n}]
 [metabase.models.session
  #{buddy.core.codecs
    buddy.core.nonce
    metabase.server.middleware.misc
    metabase.server.request.util
    metabase.util
    schema.core
    toucan.models}]
 [metabase.models.collection.root
  #{metabase.models.interface
    metabase.models.permissions
    metabase.public-settings.metastore
    metabase.util
    potemkin.types
    toucan.models}]
 [metabase.models.permissions-group-membership
  #{metabase.models.permissions-group metabase.util metabase.util.i18n toucan.db toucan.models}]
 [metabase.models.collection
  #{clojure.core.memoize
    clojure.string
    clojure.tools.logging
    honeysql.core
    metabase.api.common
    metabase.models.collection.root
    metabase.models.interface
    metabase.models.permissions
    metabase.public-settings.metastore
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    metabase.util.schema
    potemkin
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.models.user
  #{cemerick.friend.credentials
    clojure.data
    clojure.string
    clojure.tools.logging
    metabase.models.collection
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.session
    metabase.plugins.classloader
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.models.revision.diff #{clojure.core.match clojure.string}]
 [metabase.models.revision
  #{clojure.data
    metabase.models.revision.diff
    metabase.models.user
    metabase.util
    metabase.util.i18n
    potemkin.types
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.models.segment
  #{medley.core
    metabase.models.interface
    metabase.models.revision
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.models.dependency #{clojure.set potemkin.types toucan.db toucan.models}]
 [metabase.models.metric
  #{medley.core
    metabase.mbql.util
    metabase.models.dependency
    metabase.models.interface
    metabase.models.revision
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.models.table
  #{honeysql.core
    metabase.db.util
    metabase.driver
    metabase.models.database
    metabase.models.field
    metabase.models.field-values
    metabase.models.humanization
    metabase.models.interface
    metabase.models.metric
    metabase.models.permissions
    metabase.models.segment
    metabase.util
    toucan.db
    toucan.models}]
 [metabase.query-processor.store
  #{metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.binning
  #{clojure.math.numeric-tower
    metabase.mbql.schema
    metabase.mbql.util
    metabase.public-settings
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.timezone
  #{clojure.tools.logging java-time metabase.config metabase.driver metabase.query-processor.store metabase.util.i18n}]
 [metabase.query-processor.middleware.wrap-value-literals
  #{metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.query-processor.store
    metabase.query-processor.timezone
    metabase.types
    metabase.util.date-2}]
 [redux.utils nil]
 [kixi.stats.math nil]
 [kixi.stats.protocols nil]
 [clojure.test.check.random nil]
 [kixi.stats.distribution #{clojure.test.check.random kixi.stats.math kixi.stats.protocols}]
 [kixi.stats.digest #{kixi.stats.distribution}]
 [clj-time.core nil]
 [metabase.sync.interface
  #{clj-time.core
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.models.task-history
  #{cheshire.generate
    clojure.tools.logging
    java-time
    metabase.models.interface
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.query-processor.interface nil]
 [metabase.sync.util
  #{buddy.core.hash
    clojure.math.numeric-tower
    clojure.string
    clojure.tools.logging
    java-time
    medley.core
    metabase.driver
    metabase.driver.util
    metabase.events
    metabase.models.table
    metabase.models.task-history
    metabase.query-processor.interface
    metabase.sync.interface
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    metabase.util.schema
    ring.util.codec
    schema.core
    taoensso.nippy
    toucan.db}]
 [metabase.sync.analyze.classifiers.name
  #{clojure.string
    clojure.tools.logging
    metabase.config
    metabase.models.database
    metabase.sync.interface
    metabase.sync.util
    metabase.util.schema
    schema.core}]
 [clojure.math.combinatorics nil]
 [kixi.stats.test #{clojure.math.combinatorics kixi.stats.math kixi.stats.protocols}]
 [bigml.histogram.core nil]
 [redux.core #{redux.utils}]
 [kixi.stats.core
  #{kixi.stats.digest kixi.stats.distribution kixi.stats.math kixi.stats.protocols kixi.stats.test redux.core}]
 [metabase.sync.analyze.fingerprint.fingerprinters
  #{bigml.histogram.core
    java-time
    kixi.stats.core
    kixi.stats.math
    medley.core
    metabase.sync.analyze.classifiers.name
    metabase.sync.util
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    redux.core}]
 [metabase.query-processor.context #{metabase.async.util}]
 [metabase.query-processor.context.default
  #{clojure.core.async
    clojure.tools.logging
    metabase.config
    metabase.driver
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.util
    metabase.util.i18n}]
 [metabase.query-processor.reducible
  #{clojure.core.async
    clojure.tools.logging
    metabase.async.util
    metabase.query-processor.context
    metabase.query-processor.context.default
    metabase.util}]
 [clj-time.format #{clj-time.core clojure.set}]
 [clj-time.coerce #{clj-time.core clj-time.format}]
 [metabase.moderation #{clojure.string metabase.util schema.core toucan.db}]
 [metabase.driver.common
  #{clj-time.coerce
    clj-time.core
    clj-time.format
    clojure.tools.logging
    metabase.driver
    metabase.driver.util
    metabase.models.setting
    metabase.query-processor.context.default
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    schema.core}]
 [metabase.mbql.predicates #{metabase.mbql.schema schema.core}]
 [metabase.query-processor.middleware.annotate
  #{clojure.set
    clojure.string
    medley.core
    metabase.driver
    metabase.driver.common
    metabase.mbql.predicates
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.humanization
    metabase.query-processor.error-type
    metabase.query-processor.reducible
    metabase.query-processor.store
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.driver.sql.query-processor
  #{clojure.core.match
    clojure.string
    clojure.tools.logging
    honeysql.core
    honeysql.format
    honeysql.helpers
    metabase.driver
    metabase.driver.common
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor.error-type
    metabase.query-processor.interface
    metabase.query-processor.middleware.annotate
    metabase.query-processor.middleware.wrap-value-literals
    metabase.query-processor.store
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    metabase.util.schema
    potemkin.types
    pretty.core
    schema.core}]
 [metabase.core.initialization-status nil]
 [metabase.server.middleware.session
  #{clojure.java.jdbc
    clojure.tools.logging
    honeysql.core
    metabase.api.common
    metabase.config
    metabase.core.initialization-status
    metabase.db
    metabase.driver.sql.query-processor
    metabase.models.session
    metabase.models.user
    metabase.public-settings
    metabase.server.request.util
    metabase.util
    metabase.util.i18n
    ring.util.response
    schema.core
    toucan.db}]
 [metabase.models.query
  #{cheshire.core
    metabase.db
    metabase.mbql.normalize
    metabase.util
    metabase.util.honeysql-extensions
    toucan.db
    toucan.models}]
 [metabase.query-processor.util
  #{buddy.core.codecs buddy.core.hash cheshire.core clojure.string metabase.driver metabase.util.schema schema.core}]
 [metabase.models.card
  #{clojure.set
    clojure.tools.logging
    metabase.mbql.normalize
    metabase.mbql.util
    metabase.models.collection
    metabase.models.dependency
    metabase.models.field-values
    metabase.models.interface
    metabase.models.params
    metabase.models.permissions
    metabase.models.query
    metabase.models.revision
    metabase.moderation
    metabase.plugins.classloader
    metabase.public-settings
    metabase.query-processor.util
    metabase.server.middleware.session
    metabase.util
    metabase.util.i18n
    toucan.db
    toucan.models}]
 [metabase.query-processor.middleware.resolve-source-table
  #{metabase.mbql.util metabase.query-processor.store metabase.util.i18n metabase.util.schema schema.core}]
 [metabase.query-processor.middleware.resolve-fields
  #{metabase.mbql.util
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n}]
 [metabase.query-processor.middleware.resolve-referenced
  #{metabase.models.card
    metabase.query-processor.middleware.resolve-fields
    metabase.query-processor.middleware.resolve-source-table
    metabase.util.i18n
    schema.core
    toucan.db
    weavejester.dependency}]
 [metabase.models.query.permissions
  #{clojure.tools.logging
    metabase.api.common
    metabase.mbql.normalize
    metabase.mbql.util
    metabase.models.interface
    metabase.models.permissions
    metabase.models.table
    metabase.query-processor.util
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.permissions
  #{clojure.set
    clojure.tools.logging
    metabase.api.common
    metabase.models.card
    metabase.models.interface
    metabase.models.permissions
    metabase.models.query.permissions
    metabase.query-processor.error-type
    metabase.query-processor.middleware.resolve-referenced
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.fetch-source-query
  #{clojure.set
    clojure.string
    clojure.tools.logging
    medley.core
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.card
    metabase.query-processor.interface
    metabase.query-processor.middleware.permissions
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    weavejester.dependency}]
 [metabase.models.query-cache #{metabase.util toucan.models}]
 [metabase.query-processor.middleware.desugar
  #{medley.core metabase.mbql.predicates metabase.mbql.schema metabase.mbql.util schema.core}]
 [clojure.future nil]
 [clojure.spec.gen.alpha #{clojure.future}]
 [clojure.spec.alpha #{clojure.future clojure.spec.gen.alpha clojure.string clojure.walk}]
 [metabase.shared.models.visualization-settings
  #{cheshire.core clojure.set clojure.spec.alpha medley.core metabase.mbql.normalize}]
 [metabase.query-processor.middleware.visualization-settings
  #{metabase.models.card metabase.query-processor.store metabase.shared.models.visualization-settings toucan.db}]
 [metabase.query-processor.middleware.cumulative-aggregations #{metabase.mbql.schema metabase.mbql.util schema.core}]
 [metabase.query-processor.middleware.store #{metabase.query-processor.store}]
 [metabase.query-processor.middleware.cache-backend.interface #{buddy.core.codecs potemkin.types}]
 [metabase.driver.common.parameters
  #{metabase.models.setting
    metabase.query-processor.error-type
    metabase.util.i18n
    metabase.util.schema
    potemkin.types
    pretty.core
    schema.core}]
 [metabase.automagic-dashboards.filters
  #{metabase.mbql.normalize
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.util
    metabase.util.date-2
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.add-default-temporal-unit #{metabase.mbql.util metabase.query-processor.store}]
 [metabase.query-processor.middleware.cache.impl
  #{clojure.core.async clojure.tools.logging metabase.public-settings metabase.util metabase.util.i18n taoensso.nippy}]
 [metabase.query-processor.middleware.add-source-metadata
  #{clojure.tools.logging
    clojure.walk
    metabase.api.common
    metabase.mbql.schema
    metabase.mbql.util
    metabase.query-processor.interface
    metabase.query-processor.store
    metabase.util.i18n
    schema.core}]
 [metabase.models.query-execution #{metabase.mbql.schema metabase.util metabase.util.i18n schema.core toucan.models}]
 [metabase.models.pulse-card #{metabase.util metabase.util.schema schema.core toucan.db toucan.models}]
 [metabase.query-processor.middleware.resolve-joined-fields
  #{clojure.data
    clojure.tools.logging
    metabase.mbql.schema
    metabase.mbql.util
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.large-int-id #{metabase.mbql.util metabase.models.field toucan.db}]
 [metabase.sync.analyze.fingerprint.insights
  #{java-time
    kixi.stats.core
    kixi.stats.math
    medley.core
    metabase.mbql.util
    metabase.models.field
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.util
    metabase.util.date-2
    metabase.util.i18n
    redux.core}]
 [metabase.sync.analyze.query-results
  #{clojure.tools.logging
    metabase.mbql.normalize
    metabase.mbql.predicates
    metabase.mbql.schema
    metabase.sync.analyze.classifiers.name
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.analyze.fingerprint.insights
    metabase.sync.interface
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    redux.core
    schema.core}]
 [metabase.query-processor.middleware.upgrade-field-literals #{clojure.walk metabase.mbql.util metabase.util}]
 [metabase.query-processor.middleware.limit
  #{metabase.mbql.util metabase.query-processor.interface metabase.query-processor.util}]
 [metabase.models.dashboard-card-series #{toucan.models}]
 [metabase.models.dashboard-card
  #{clojure.set
    metabase.db.util
    metabase.events
    metabase.models.card
    metabase.models.dashboard-card-series
    metabase.models.interface
    metabase.models.pulse-card
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.driver.common.parameters.operators
  #{metabase.mbql.schema metabase.models.params metabase.query-processor.error-type schema.core}]
 [metabase.query-processor.middleware.add-rows-truncated
  #{metabase.query-processor.interface metabase.query-processor.util}]
 [metabase.query-processor.middleware.constraints nil]
 [metabase.models.pulse-channel-recipient #{toucan.models}]
 [metabase.query-processor.middleware.add-timezone-info #{metabase.query-processor.timezone}]
 [metabase.query-processor.middleware.parameters.mbql
  #{metabase.driver.common.parameters
    metabase.driver.common.parameters.dates
    metabase.driver.common.parameters.operators
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.models.params
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.parameters.native #{clojure.set metabase.driver}]
 [metabase.query-processor.middleware.parameters
  #{clojure.data
    clojure.set
    clojure.tools.logging
    medley.core
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.mbql.util
    metabase.query-processor.interface
    metabase.query-processor.middleware.parameters.mbql
    metabase.query-processor.middleware.parameters.native
    metabase.util
    schema.core}]
 [metabase.models.pulse-channel
  #{cheshire.generate
    clojure.set
    medley.core
    metabase.models.interface
    metabase.models.pulse-channel-recipient
    metabase.models.user
    metabase.util
    schema.core
    toucan.db
    toucan.models}]
 [metabase.query-processor.middleware.auto-bucket-datetimes
  #{clojure.set
    clojure.walk
    medley.core
    metabase.mbql.predicates
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.pulse
  #{clojure.string
    clojure.tools.logging
    medley.core
    metabase.events
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard-card
    metabase.models.interface
    metabase.models.permissions
    metabase.models.pulse-card
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [metabase.query-processor.middleware.results-metadata
  #{buddy.core.hash
    cheshire.core
    clojure.tools.logging
    clojure.walk
    metabase.driver
    metabase.query-processor.reducible
    metabase.sync.analyze.query-results
    metabase.util.encryption
    metabase.util.i18n
    ring.util.codec
    toucan.db}]
 [metabase.query-processor.middleware.mbql-to-native
  #{clojure.tools.logging metabase.driver metabase.query-processor.context metabase.util}]
 [metabase.query-processor.middleware.auto-parse-filter-values
  #{metabase.mbql.util metabase.query-processor.error-type metabase.util.i18n metabase.util.schema schema.core}]
 [metabase.query-processor.middleware.add-dimension-projections
  #{medley.core
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.dimension
    metabase.models.field
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.query-processor.middleware.cache-backend.db
  #{clojure.tools.logging
    honeysql.core
    java-time
    metabase.models.query-cache
    metabase.query-processor.middleware.cache-backend.interface
    metabase.util.date-2
    metabase.util.i18n
    toucan.db}]
 [metabase.query-processor.middleware.check-features
  #{metabase.driver metabase.mbql.util metabase.query-processor.error-type metabase.util metabase.util.i18n}]
 [metabase.query-processor.middleware.add-implicit-clauses
  #{clojure.tools.logging
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor.error-type
    metabase.query-processor.interface
    metabase.query-processor.store
    metabase.types
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.resolve-database-and-driver
  #{metabase.driver
    metabase.driver.util
    metabase.mbql.schema
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n}]
 [metabase.query-processor.middleware.cache
  #{clojure.core.async
    clojure.tools.logging
    java-time
    medley.core
    metabase.config
    metabase.public-settings
    metabase.query-processor.context
    metabase.query-processor.middleware.cache-backend.db
    metabase.query-processor.middleware.cache-backend.interface
    metabase.query-processor.middleware.cache.impl
    metabase.query-processor.util
    metabase.util
    metabase.util.i18n}]
 [metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing
  #{metabase.mbql.schema metabase.mbql.util schema.core}]
 [metabase.query-processor.middleware.process-userland-query
  #{clojure.tools.logging
    java-time
    metabase.models.query
    metabase.models.query-execution
    metabase.query-processor.util
    metabase.util.i18n
    toucan.db}]
 [metabase.query-processor.middleware.validate #{metabase.mbql.schema}]
 [metabase.query-processor.middleware.normalize-query
  #{clojure.tools.logging metabase.mbql.normalize metabase.query-processor.error-type metabase.util}]
 [metabase.query-processor.middleware.pre-alias-aggregations
  #{metabase.driver metabase.mbql.util metabase.query-processor.middleware.annotate}]
 [metabase.query-processor.middleware.add-implicit-joins
  #{clojure.set
    medley.core
    metabase.db.util
    metabase.driver
    metabase.mbql.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor.error-type
    metabase.query-processor.middleware.add-implicit-clauses
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.query-processor.middleware.format-rows
  #{clojure.tools.logging
    java-time
    metabase.query-processor.timezone
    metabase.util.date-2
    metabase.util.i18n
    potemkin.types}]
 [metabase.query-processor.middleware.splice-params-in-response #{metabase.driver}]
 [metabase.query-processor.middleware.catch-exceptions
  #{clojure.tools.logging
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.query-processor.middleware.permissions
    metabase.query-processor.reducible
    metabase.util
    metabase.util.i18n
    schema.utils}]
 [metabase.query-processor.middleware.resolve-joins
  #{metabase.mbql.schema
    metabase.mbql.util
    metabase.query-processor.middleware.add-implicit-clauses
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.optimize-temporal-filters
  #{clojure.tools.logging
    clojure.walk
    metabase.mbql.util
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    schema.core}]
 [metabase.query-processor.middleware.validate-temporal-bucketing
  #{clojure.set
    metabase.mbql.util
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util.i18n}]
 [metabase.query-processor.middleware.expand-macros
  #{clojure.tools.logging
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.metric
    metabase.models.segment
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor
  #{clojure.tools.logging
    metabase.config
    metabase.driver
    metabase.driver.util
    metabase.mbql.util
    metabase.plugins.classloader
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.query-processor.middleware.add-default-temporal-unit
    metabase.query-processor.middleware.add-dimension-projections
    metabase.query-processor.middleware.add-implicit-clauses
    metabase.query-processor.middleware.add-implicit-joins
    metabase.query-processor.middleware.add-rows-truncated
    metabase.query-processor.middleware.add-source-metadata
    metabase.query-processor.middleware.add-timezone-info
    metabase.query-processor.middleware.annotate
    metabase.query-processor.middleware.auto-bucket-datetimes
    metabase.query-processor.middleware.auto-parse-filter-values
    metabase.query-processor.middleware.binning
    metabase.query-processor.middleware.cache
    metabase.query-processor.middleware.catch-exceptions
    metabase.query-processor.middleware.check-features
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.cumulative-aggregations
    metabase.query-processor.middleware.desugar
    metabase.query-processor.middleware.expand-macros
    metabase.query-processor.middleware.fetch-source-query
    metabase.query-processor.middleware.format-rows
    metabase.query-processor.middleware.large-int-id
    metabase.query-processor.middleware.limit
    metabase.query-processor.middleware.mbql-to-native
    metabase.query-processor.middleware.normalize-query
    metabase.query-processor.middleware.optimize-temporal-filters
    metabase.query-processor.middleware.parameters
    metabase.query-processor.middleware.permissions
    metabase.query-processor.middleware.pre-alias-aggregations
    metabase.query-processor.middleware.process-userland-query
    metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing
    metabase.query-processor.middleware.resolve-database-and-driver
    metabase.query-processor.middleware.resolve-fields
    metabase.query-processor.middleware.resolve-joined-fields
    metabase.query-processor.middleware.resolve-joins
    metabase.query-processor.middleware.resolve-referenced
    metabase.query-processor.middleware.resolve-source-table
    metabase.query-processor.middleware.results-metadata
    metabase.query-processor.middleware.splice-params-in-response
    metabase.query-processor.middleware.store
    metabase.query-processor.middleware.upgrade-field-literals
    metabase.query-processor.middleware.validate
    metabase.query-processor.middleware.validate-temporal-bucketing
    metabase.query-processor.middleware.visualization-settings
    metabase.query-processor.middleware.wrap-value-literals
    metabase.query-processor.reducible
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n
    schema.core}]
 [metabase.query-processor.async
  #{clojure.core.async
    clojure.tools.logging
    metabase.api.common
    metabase.query-processor
    metabase.query-processor.context
    metabase.query-processor.interface
    metabase.query-processor.util
    metabase.util
    metabase.util.i18n
    schema.core}]
 [metabase.automagic-dashboards.populate
  #{clojure.string
    clojure.tools.logging
    medley.core
    metabase.api.common
    metabase.automagic-dashboards.filters
    metabase.models.card
    metabase.models.collection
    metabase.query-processor.util
    metabase.util.i18n
    toucan.db}]
 [metabase.models.dashboard
  #{clojure.core.async
    clojure.data
    clojure.set
    clojure.string
    clojure.tools.logging
    metabase.automagic-dashboards.populate
    metabase.events
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard-card
    metabase.models.field-values
    metabase.models.interface
    metabase.models.params
    metabase.models.permissions
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.revision
    metabase.models.revision.diff
    metabase.moderation
    metabase.public-settings
    metabase.query-processor.async
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate
    toucan.models}]
 [scout.core nil]
 [metabase.sync.sync-metadata.sync-timezone
  #{metabase.driver metabase.driver.util metabase.models.database metabase.sync.interface schema.core toucan.db}]
 [progrock.core #{clojure.core clojure.string}]
 [metabase.models.moderation-review
  #{metabase.models.interface
    metabase.models.permissions
    metabase.moderation
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.query-processor.streaming.interface #{potemkin.types}]
 [metabase.test-runner.init #{clojure.pprint metabase.config}]
 [metabase.test.initialize
  #{clojure.string colorize.core metabase.config metabase.plugins.classloader metabase.test-runner.init metabase.util}]
 [arrangement.core nil]
 [puget.color nil]
 [metabase.test.fixtures #{metabase.test.initialize}]
 [postal.support #{clojure.java.io}]
 [postal.date nil]
 [postal.message #{clojure.java.io clojure.set postal.date postal.support}]
 [io.aviso.writer nil]
 [io.aviso.ansi #{clojure.string}]
 [io.aviso.columns #{clojure.string io.aviso.ansi io.aviso.writer}]
 [io.aviso.exception #{clojure.pprint clojure.set clojure.string io.aviso.ansi io.aviso.columns io.aviso.writer}]
 [metabase.pulse.render.style #{clojure.string metabase.public-settings}]
 [metabase.sync.sync-metadata.fields.common
  #{clojure.string metabase.sync.interface metabase.sync.util metabase.util.i18n metabase.util.schema schema.core}]
 [metabase.sync.fetch-metadata #{metabase.driver metabase.driver.util metabase.sync.interface schema.core}]
 [metabase.sync.sync-metadata.fields.fetch-metadata
  #{medley.core
    metabase.models.field
    metabase.models.table
    metabase.sync.fetch-metadata
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.common
    metabase.util
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata.fields.sync-instances
  #{clojure.tools.logging
    metabase.models.field
    metabase.models.humanization
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.common
    metabase.sync.sync-metadata.fields.fetch-metadata
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata.fields.sync-metadata
  #{clojure.string
    clojure.tools.logging
    metabase.models.field
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.common
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata.fields
  #{metabase.models.table
    metabase.sync.interface
    metabase.sync.sync-metadata.fields.fetch-metadata
    metabase.sync.sync-metadata.fields.sync-instances
    metabase.sync.sync-metadata.fields.sync-metadata
    metabase.sync.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.sync.sync-metadata.metabase-metadata
  #{clojure.string
    clojure.tools.logging
    metabase.driver
    metabase.driver.util
    metabase.models.field
    metabase.models.table
    metabase.sync.fetch-metadata
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata.tables
  #{clojure.data
    clojure.string
    clojure.tools.logging
    metabase.models.humanization
    metabase.models.table
    metabase.sync.fetch-metadata
    metabase.sync.interface
    metabase.sync.sync-metadata.metabase-metadata
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.sync.field-values
  #{clojure.tools.logging
    metabase.models.field
    metabase.models.field-values
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.sync.analyze.classifiers.category
  #{clojure.tools.logging
    metabase.models.field
    metabase.models.field-values
    metabase.sync.interface
    metabase.sync.util
    metabase.util.schema
    schema.core}]
 [metabase.sync.analyze.classifiers.text-fingerprint
  #{clojure.tools.logging metabase.sync.interface metabase.sync.util metabase.util.schema schema.core}]
 [metabase.db.metadata-queries
  #{clojure.tools.logging
    metabase.driver
    metabase.driver.util
    metabase.models.table
    metabase.query-processor
    metabase.query-processor.interface
    metabase.sync.interface
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.sync.analyze.fingerprint
  #{clojure.set
    clojure.tools.logging
    honeysql.helpers
    metabase.db.metadata-queries
    metabase.db.util
    metabase.models.field
    metabase.query-processor.store
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    redux.core
    schema.core
    toucan.db}]
 [metabase.sync.analyze.classifiers.no-preview-display #{metabase.sync.interface schema.core}]
 [metabase.sync.analyze.classify
  #{clojure.data
    clojure.tools.logging
    metabase.models.field
    metabase.models.table
    metabase.sync.analyze.classifiers.category
    metabase.sync.analyze.classifiers.name
    metabase.sync.analyze.classifiers.no-preview-display
    metabase.sync.analyze.classifiers.text-fingerprint
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata.fks
  #{clojure.string
    clojure.tools.logging
    metabase.models.field
    metabase.models.table
    metabase.sync.fetch-metadata
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.sync.analyze
  #{clojure.tools.logging
    metabase.models.field
    metabase.sync.analyze.classify
    metabase.sync.analyze.fingerprint
    metabase.sync.interface
    metabase.sync.util
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.sync.sync-metadata
  #{metabase.sync.interface
    metabase.sync.sync-metadata.fields
    metabase.sync.sync-metadata.fks
    metabase.sync.sync-metadata.metabase-metadata
    metabase.sync.sync-metadata.sync-timezone
    metabase.sync.sync-metadata.tables
    metabase.sync.util
    metabase.util.i18n
    schema.core}]
 [metabase.sync
  #{metabase.sync.analyze
    metabase.sync.field-values
    metabase.sync.interface
    metabase.sync.sync-metadata
    metabase.sync.util
    schema.core}]
 [clojure.core.rrb-vector.parameters nil]
 [clojure.core.rrb-vector.nodes #{clojure.core.rrb-vector.parameters}]
 [clojure.core.rrb-vector.transients #{clojure.core.rrb-vector.nodes clojure.core.rrb-vector.parameters}]
 [stencil.re-utils nil]
 [quoin.map-access nil]
 [stencil.utils #{clojure.string quoin.map-access}]
 [quoin.text nil]
 [clojure.zip nil]
 [stencil.ast #{clojure.string clojure.zip stencil.utils}]
 [stencil.parser #{clojure.pprint clojure.string clojure.zip scout.core stencil.ast stencil.re-utils stencil.utils}]
 [stencil.loader #{clojure.java.io quoin.text stencil.ast stencil.parser stencil.utils}]
 [clojure.repl #{clojure.spec.alpha}]
 [toucan.util.test #{potemkin.types toucan.db}]
 [clojure.instant nil]
 [clojurewerkz.quartzite.conversion nil]
 [clojurewerkz.quartzite.triggers #{clojurewerkz.quartzite.conversion}]
 [clojurewerkz.quartzite.jobs #{clojurewerkz.quartzite.conversion}]
 [clojurewerkz.quartzite.scheduler
  #{clojurewerkz.quartzite.conversion clojurewerkz.quartzite.jobs clojurewerkz.quartzite.triggers}]
 [metabase.task
  #{clojure.java.jdbc
    clojure.string
    clojure.tools.logging
    clojurewerkz.quartzite.scheduler
    metabase.db
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.test.data.interface
  #{clojure.string
    clojure.tools.reader.edn
    environ.core
    medley.core
    metabase.db
    metabase.driver
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.plugins.classloader
    metabase.query-processor
    metabase.test-runner.init
    metabase.test.initialize
    metabase.util
    metabase.util.date-2
    metabase.util.schema
    potemkin.types
    pretty.core
    schema.core
    toucan.db}]
 [metabase.test.data.dataset-definitions #{java-time medley.core metabase.test.data.interface metabase.util.date-2}]
 [metabase.models.activity
  #{metabase.api.common
    metabase.events
    metabase.models.card
    metabase.models.dashboard
    metabase.models.interface
    metabase.models.metric
    metabase.models.pulse
    metabase.models.segment
    metabase.util
    toucan.db
    toucan.models}]
 [puget.color.html #{clojure.string puget.color}]
 [fipp.util nil]
 [clojure.core.reducers #{clojure.walk}]
 [clojure.core.rrb-vector.fork-join #{clojure.core.reducers}]
 [clojure.core.rrb-vector.protocols nil]
 [clojure.core.rrb-vector.rrbt
  #{clojure.core.protocols
    clojure.core.reducers
    clojure.core.rrb-vector.fork-join
    clojure.core.rrb-vector.nodes
    clojure.core.rrb-vector.parameters
    clojure.core.rrb-vector.protocols
    clojure.core.rrb-vector.transients}]
 [puget.color.ansi #{clojure.string puget.color}]
 [fipp.ednize #{clojure.instant fipp.util}]
 [clojure.core.rrb-vector.interop #{clojure.core.rrb-vector.protocols clojure.core.rrb-vector.rrbt}]
 [clojure.core.rrb-vector
  #{clojure.core.rrb-vector.interop
    clojure.core.rrb-vector.nodes
    clojure.core.rrb-vector.parameters
    clojure.core.rrb-vector.protocols
    clojure.core.rrb-vector.rrbt}]
 [fipp.deque #{clojure.core.rrb-vector}]
 [fipp.engine #{fipp.deque}]
 [puget.dispatch #{clojure.string}]
 [fipp.visit #{fipp.ednize fipp.util}]
 [puget.printer
  #{arrangement.core
    clojure.string
    fipp.engine
    fipp.visit
    puget.color
    puget.color.ansi
    puget.color.html
    puget.dispatch}]
 [hiccup.util #{clojure.string}]
 [hiccup.compiler #{hiccup.util}]
 [hiccup.core #{hiccup.compiler hiccup.util}]
 [metabase.pulse.render.datetime
  #{clojure.string
    clojure.tools.logging
    java-time
    metabase.util.date-2
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [stencil.core #{clojure.java.io clojure.string quoin.text stencil.ast stencil.loader stencil.parser stencil.utils}]
 [metabase.util.ui-logic nil]
 [metabase.pulse.render.js-engine #{metabase.util}]
 [metabase.pulse.render.color
  #{cheshire.core clojure.java.io metabase.pulse.render.js-engine metabase.util.i18n schema.core}]
 [postal.sendmail #{postal.message}]
 [metabase.util.urls #{metabase.public-settings}]
 [metabase.pulse.render.image-bundle #{clojure.java.io}]
 [postal.smtp #{postal.message postal.support}]
 [postal.stress #{postal.message postal.smtp}]
 [postal.core #{postal.sendmail postal.smtp postal.stress}]
 [metabase.pulse.render.common #{clojure.pprint hiccup.util metabase.util.ui-logic potemkin.types schema.core}]
 [metabase.pulse.render.png
  #{clojure.java.io
    clojure.tools.logging
    hiccup.core
    metabase.pulse.render.common
    metabase.pulse.render.style
    metabase.util.i18n
    schema.core}]
 [metabase.util.quotation nil]
 [metabase.pulse.render.sparkline
  #{java-time
    metabase.pulse.render.common
    metabase.pulse.render.image-bundle
    metabase.pulse.render.style
    metabase.types
    metabase.util.date-2
    metabase.util.i18n
    schema.core}]
 [metabase.pulse.render.table
  #{hiccup.core medley.core metabase.pulse.render.color metabase.pulse.render.common metabase.pulse.render.style}]
 [metabase.pulse.render.body
  #{cheshire.core
    clojure.string
    hiccup.core
    medley.core
    metabase.pulse.render.color
    metabase.pulse.render.common
    metabase.pulse.render.datetime
    metabase.pulse.render.image-bundle
    metabase.pulse.render.sparkline
    metabase.pulse.render.style
    metabase.pulse.render.table
    metabase.types
    metabase.util.i18n
    schema.core}]
 [metabase.pulse.render
  #{clojure.tools.logging
    hiccup.core
    metabase.pulse.render.body
    metabase.pulse.render.common
    metabase.pulse.render.image-bundle
    metabase.pulse.render.png
    metabase.pulse.render.style
    metabase.types
    metabase.util.i18n
    metabase.util.urls
    schema.core}]
 [metabase.email
  #{clojure.tools.logging
    metabase.models.setting
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    postal.core
    postal.support
    schema.core}]
 [metabase.email.messages
  #{clojure.core.cache
    clojure.java.io
    clojure.string
    clojure.tools.logging
    hiccup.core
    java-time
    medley.core
    metabase.config
    metabase.driver
    metabase.driver.util
    metabase.email
    metabase.public-settings
    metabase.pulse.render
    metabase.pulse.render.body
    metabase.pulse.render.style
    metabase.query-processor.store
    metabase.query-processor.streaming.interface
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    metabase.util.quotation
    metabase.util.urls
    stencil.core
    stencil.loader
    toucan.db}]
 [metabase.models.login-history
  #{clojure.tools.logging
    java-time
    metabase.email.messages
    metabase.models.setting
    metabase.server.request.util
    metabase.util.date-2
    metabase.util.i18n
    toucan.db
    toucan.models}]
 [metabase.models.dashboard-favorite #{toucan.models}]
 [clojure.main #{clojure.spec.alpha}]
 [clojure.test #{clojure.stacktrace clojure.string clojure.template}]
 [eftest.report #{clojure.java.io clojure.test}]
 [eftest.output-capture #{clojure.string}]
 [io.aviso.repl
  #{clojure.edn clojure.main clojure.pprint clojure.repl clojure.stacktrace io.aviso.exception io.aviso.writer}]
 [eftest.report.pretty
  #{clojure.data
    clojure.string
    clojure.test
    eftest.output-capture
    eftest.report
    fipp.engine
    io.aviso.ansi
    io.aviso.exception
    io.aviso.repl
    puget.printer}]
 [eftest.report.progress #{clojure.test eftest.report eftest.report.pretty progrock.core}]
 [eftest.runner
  #{clojure.java.io
    clojure.test
    clojure.tools.namespace.find
    eftest.output-capture
    eftest.report
    eftest.report.progress}]
 [metabase.test-runner.parallel #{clojure.test eftest.runner}]
 [metabase.test.data.mbql-query-impl #{clojure.string clojure.walk metabase.models.field toucan.db}]
 [metabase.models.native-query-snippet.permissions #{clojure.tools.logging potemkin.types pretty.core}]
 [metabase.models.native-query-snippet
  #{metabase.models.collection
    metabase.models.interface
    metabase.models.native-query-snippet.permissions
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.models.card-favorite #{metabase.util toucan.models}]
 [metabase.test.util.timezone #{clojure.test metabase.driver metabase.test-runner.parallel metabase.test.initialize}]
 [metabase.models.metric-important-field #{metabase.models.interface metabase.util toucan.models}]
 [metabase.models.collection-permission-graph-revision #{metabase.util metabase.util.i18n toucan.db toucan.models}]
 [metabase.models.view-log #{metabase.models.interface metabase.util toucan.models}]
 [metabase.models
  #{metabase.models.activity
    metabase.models.card
    metabase.models.card-favorite
    metabase.models.collection
    metabase.models.collection-permission-graph-revision
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.dashboard-card-series
    metabase.models.dashboard-favorite
    metabase.models.database
    metabase.models.dependency
    metabase.models.dimension
    metabase.models.field
    metabase.models.field-values
    metabase.models.login-history
    metabase.models.metric
    metabase.models.metric-important-field
    metabase.models.moderation-review
    metabase.models.native-query-snippet
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.permissions-revision
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.models.query-cache
    metabase.models.query-execution
    metabase.models.revision
    metabase.models.segment
    metabase.models.session
    metabase.models.setting
    metabase.models.table
    metabase.models.task-history
    metabase.models.user
    metabase.models.view-log
    potemkin}]
 [metabase.test.data.impl.verify
  #{clojure.tools.logging
    metabase.driver
    metabase.models
    metabase.query-processor
    metabase.test.data.interface
    metabase.util
    toucan.db}]
 [metabase.test.data.impl
  #{clojure.string
    clojure.tools.logging
    clojure.tools.reader.edn
    metabase.api.common
    metabase.config
    metabase.driver
    metabase.models
    metabase.plugins.classloader
    metabase.sync
    metabase.test.data.dataset-definitions
    metabase.test.data.impl.verify
    metabase.test.data.interface
    metabase.test.initialize
    metabase.test.util.timezone
    metabase.util
    potemkin
    toucan.db}]
 [metabase.test.data
  #{clojure.test
    colorize.core
    metabase.query-processor
    metabase.test-runner.init
    metabase.test.data.impl
    metabase.test.data.interface
    metabase.test.data.mbql-query-impl
    metabase.util}]
 [metabase.query-processor.test-util
  #{clojure.test
    metabase.driver
    metabase.mbql.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.query-processor.middleware.add-implicit-joins
    metabase.query-processor.store
    metabase.query-processor.timezone
    metabase.test.data
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.test.data.env.impl #{clojure.string environ.core metabase.util}]
 [metabase.test.data.env #{clojure.tools.logging colorize.core metabase.test.data.env.impl metabase.test.initialize}]
 [metabase.test.data.datasets
  #{clojure.test colorize.core metabase.driver metabase.test.data.env metabase.test.data.interface}]
 [metabase.test.redefs #{metabase.plugins.classloader metabase.test-runner.parallel toucan.util.test}]
 [pjstadig.print #{clojure.pprint}]
 [metabase.test.util.log #{clojure.tools.logging metabase.test-runner.parallel}]
 [metabase.http-client
  #{cheshire.core
    clj-http.client
    clojure.string
    clojure.test
    clojure.tools.logging
    clojure.walk
    java-time
    metabase.config
    metabase.server.middleware.session
    metabase.test.initialize
    metabase.test.util.log
    metabase.util
    metabase.util.date-2
    metabase.util.schema
    ring.util.codec
    schema.core}]
 [pjstadig.util #{clojure.pprint clojure.test pjstadig.print}]
 [pjstadig.humane-test-output #{clojure.data clojure.pprint clojure.test pjstadig.util}]
 [metabase.util.files #{clojure.java.io clojure.string clojure.tools.logging metabase.util metabase.util.i18n}]
 [metabase.test.util
  #{cheshire.core
    clojure.java.io
    clojure.set
    clojure.string
    clojure.test
    clojure.walk
    clojurewerkz.quartzite.scheduler
    colorize.core
    environ.core
    java-time
    metabase.driver
    metabase.models
    metabase.models.collection
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.setting
    metabase.models.setting.cache
    metabase.plugins.classloader
    metabase.task
    metabase.test-runner.parallel
    metabase.test.data
    metabase.test.fixtures
    metabase.test.initialize
    metabase.test.util.log
    metabase.util
    metabase.util.files
    potemkin
    schema.core
    toucan.db
    toucan.models
    toucan.util.test}]
 [metabase.driver.sql-jdbc.test-util #{metabase.driver metabase.test.data.env metabase.test.data.interface}]
 [metabase.test.data.users
  #{cemerick.friend.credentials
    clojure.test
    medley.core
    metabase.http-client
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.user
    metabase.server.middleware.session
    metabase.test.initialize
    metabase.util
    schema.core
    toucan.db
    toucan.util.test}]
 [metabase.test.util.async #{clojure.core.async}]
 [metabase.query-processor-test
  #{clojure.set
    clojure.string
    clojure.test
    medley.core
    metabase.driver
    metabase.driver.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.query-processor.middleware.add-implicit-joins
    metabase.test-runner.init
    metabase.test.data
    metabase.test.data.env
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.email-test
  #{clojure.java.io
    clojure.test
    medley.core
    metabase.email
    metabase.test.data.users
    metabase.test.util
    metabase.util
    postal.message}]
 [metabase.test.util.i18n #{clojure.test metabase.util.i18n metabase.util.i18n.impl}]
 [metabase.test
  #{clojure.data
    clojure.test
    clojure.tools.macro
    environ.core
    java-time
    medley.core
    metabase.driver
    metabase.driver.sql-jdbc.test-util
    metabase.email-test
    metabase.http-client
    metabase.plugins.classloader
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.context
    metabase.query-processor.reducible
    metabase.query-processor.test-util
    metabase.server.middleware.session
    metabase.test-runner.init
    metabase.test-runner.parallel
    metabase.test.data
    metabase.test.data.datasets
    metabase.test.data.env
    metabase.test.data.impl
    metabase.test.data.interface
    metabase.test.data.users
    metabase.test.initialize
    metabase.test.redefs
    metabase.test.util
    metabase.test.util.async
    metabase.test.util.i18n
    metabase.test.util.log
    metabase.test.util.timezone
    metabase.util
    pjstadig.humane-test-output
    potemkin
    toucan.db
    toucan.util.test}]
 [metabase.sync.util-test
  #{clojure.string
    clojure.test
    java-time
    metabase.driver
    metabase.models.database
    metabase.models.task-history
    metabase.sync
    metabase.sync.util
    metabase.test
    metabase.test.util
    toucan.db
    toucan.util.test}]
 [metabase.sync.sync-metadata.sync-database-type-test
  #{clojure.test
    metabase.models
    metabase.sync
    metabase.sync.util-test
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.cmd.compare-h2-dbs
  #{clojure.data clojure.java.jdbc clojure.string clojure.tools.logging metabase.db.jdbc-protocols metabase.util}]
 [dk.ative.docjure.spreadsheet nil]
 [metabase.query-processor.streaming.common
  #{java-time metabase.query-processor.store metabase.query-processor.timezone metabase.util.date-2}]
 [metabase.query-processor.streaming.json
  #{cheshire.core
    java-time
    metabase.query-processor.streaming.common
    metabase.query-processor.streaming.interface
    metabase.util.date-2}]
 [metabase.query-processor.streaming.csv
  #{clojure.data.csv
    java-time
    metabase.query-processor.streaming.common
    metabase.query-processor.streaming.interface
    metabase.util.date-2}]
 [metabase.query-processor.streaming.xlsx
  #{cheshire.core
    dk.ative.docjure.spreadsheet
    java-time
    metabase.query-processor.error-type
    metabase.query-processor.streaming.common
    metabase.query-processor.streaming.interface
    metabase.util.date-2
    metabase.util.i18n}]
 [metabase.query-processor.streaming
  #{clojure.core.async
    metabase.async.streaming-response
    metabase.mbql.util
    metabase.query-processor.context
    metabase.query-processor.streaming.csv
    metabase.query-processor.streaming.interface
    metabase.query-processor.streaming.json
    metabase.query-processor.streaming.xlsx
    metabase.shared.models.visualization-settings
    metabase.util}]
 [metabase.query-processor-test.string-extracts-test
  #{clojure.test metabase.query-processor-test metabase.test metabase.test.data metabase.test.util}]
 [yaml.reader #{flatland.ordered.map flatland.ordered.set}]
 [yaml.writer #{flatland.ordered.map flatland.ordered.set}]
 [yaml.core #{clojure.java.io yaml.reader yaml.writer}]
 [schema.coerce #{clojure.edn clojure.string schema.core schema.macros schema.spec.core schema.utils}]
 [metabase.util.yaml
  #{clojure.string clojure.tools.logging metabase.util metabase.util.files metabase.util.i18n yaml.core}]
 [metabase.automagic-dashboards.rules
  #{clojure.string
    metabase.automagic-dashboards.populate
    metabase.query-processor.util
    metabase.util
    metabase.util.files
    metabase.util.i18n
    metabase.util.schema
    metabase.util.yaml
    schema.coerce
    schema.core
    schema.spec.core}]
 [metabase.automagic-dashboards.rules-test #{clojure.test metabase.automagic-dashboards.rules metabase.test.util}]
 [metabase.driver.sql.parameters.substitution
  #{clojure.string
    honeysql.core
    metabase.driver
    metabase.driver.common.parameters
    metabase.driver.common.parameters.dates
    metabase.driver.common.parameters.operators
    metabase.driver.sql.query-processor
    metabase.mbql.util
    metabase.query-processor.error-type
    metabase.query-processor.middleware.wrap-value-literals
    metabase.query-processor.timezone
    metabase.util.date-2
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.driver.common.parameters.parse
  #{clojure.string
    clojure.tools.logging
    metabase.driver.common.parameters
    metabase.query-processor.error-type
    metabase.util
    metabase.util.i18n
    schema.core}]
 [metabase.driver.sql.util
  #{clojure.string
    clojure.tools.logging
    honeysql.core
    metabase.driver.sql.query-processor
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    schema.core}]
 [metabase.driver.sql.util.unprepare
  #{clojure.string
    clojure.tools.logging
    java-time
    metabase.driver
    metabase.driver.sql.util
    metabase.util
    metabase.util.i18n}]
 [metabase.driver.sql.parameters.substitute
  #{clojure.string
    metabase.driver
    metabase.driver.common.parameters
    metabase.driver.sql.parameters.substitution
    metabase.query-processor.error-type
    metabase.util.i18n}]
 [metabase.driver.common.parameters.values
  #{clojure.string
    clojure.tools.logging
    metabase.driver.common.parameters
    metabase.models.card
    metabase.models.field
    metabase.models.native-query-snippet
    metabase.query-processor
    metabase.query-processor.error-type
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.driver.sql
  #{metabase.driver
    metabase.driver.common.parameters.parse
    metabase.driver.common.parameters.values
    metabase.driver.sql.parameters.substitute
    metabase.driver.sql.parameters.substitution
    metabase.driver.sql.query-processor
    metabase.driver.sql.util.unprepare
    metabase.util.schema
    potemkin
    schema.core}]
 [metabase.driver.sql-jdbc.sync.interface #{metabase.driver}]
 [metabase.driver.sql-jdbc.execute.old-impl #{metabase.driver}]
 [metabase.driver.sql-jdbc.execute.diagnostic nil]
 [metabase.driver.sql-jdbc.execute
  #{clojure.core.async
    clojure.string
    clojure.tools.logging
    java-time
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute.diagnostic
    metabase.driver.sql-jdbc.execute.old-impl
    metabase.driver.sql-jdbc.sync.interface
    metabase.mbql.util
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.query-processor.interface
    metabase.query-processor.reducible
    metabase.query-processor.store
    metabase.query-processor.timezone
    metabase.query-processor.util
    metabase.util
    metabase.util.i18n
    potemkin}]
 [metabase.driver.sql-jdbc.common #{clojure.string}]
 [metabase.driver.sql-jdbc.sync.common #{metabase.driver.sql-jdbc.execute}]
 [metabase.driver.sql-jdbc.sync.describe-table
  #{clojure.java.jdbc
    clojure.string
    clojure.tools.logging
    medley.core
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.sync.common
    metabase.driver.sql-jdbc.sync.interface
    metabase.driver.sql.query-processor
    metabase.util
    metabase.util.honeysql-extensions}]
 [metabase.driver.sql-jdbc.sync.describe-database
  #{clojure.java.jdbc
    clojure.string
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql-jdbc.sync.common
    metabase.driver.sql-jdbc.sync.interface
    metabase.driver.sql.query-processor
    metabase.util.honeysql-extensions}]
 [metabase.driver.sql-jdbc.sync
  #{metabase.driver.sql-jdbc.sync.describe-database
    metabase.driver.sql-jdbc.sync.describe-table
    metabase.driver.sql-jdbc.sync.interface
    potemkin}]
 [metabase.driver.sql-jdbc
  #{clojure.java.jdbc
    metabase.driver
    metabase.driver.sql
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql-jdbc.sync
    metabase.driver.sql.query-processor
    metabase.util.honeysql-extensions}]
 [metabase.driver.postgres
  #{clojure.java.jdbc
    clojure.set
    clojure.string
    clojure.tools.logging
    honeysql.core
    honeysql.format
    java-time
    metabase.db.spec
    metabase.driver
    metabase.driver.common
    metabase.driver.sql-jdbc
    metabase.driver.sql-jdbc.common
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql-jdbc.sync
    metabase.driver.sql.query-processor
    metabase.driver.sql.util.unprepare
    metabase.models
    metabase.util
    metabase.util.date-2
    metabase.util.honeysql-extensions
    metabase.util.ssh
    pretty.core}]
 [metabase.query-processor.reducible-test
  #{clojure.core.async
    clojure.java.io
    clojure.string
    clojure.test
    metabase.query-processor
    metabase.query-processor.context.default
    metabase.query-processor.reducible
    metabase.test
    metabase.test.util
    metabase.util}]
 [ring.middleware.keyword-params nil]
 [buddy.core.codecs.base64 #{buddy.core.codecs}]
 [buddy.core.keys.jwk.proto #{buddy.core.codecs buddy.core.codecs.base64}]
 [buddy.util.deflate nil]
 [buddy.core.keys.pem #{clojure.java.io}]
 [buddy.core.dsa #{buddy.core.codecs clojure.java.io}]
 [buddy.core.keys.jwk.ec #{buddy.core.hash buddy.core.keys.jwk.proto cheshire.core}]
 [buddy.util.ecdsa nil]
 [buddy.core.keys.jwk.rsa
  #{buddy.core.codecs buddy.core.codecs.base64 buddy.core.hash buddy.core.keys.jwk.proto cheshire.core}]
 [buddy.core.keys.jwk.okp #{buddy.core.hash buddy.core.keys.jwk.proto cheshire.core}]
 [buddy.core.keys.jwk.eddsa
  #{buddy.core.codecs buddy.core.codecs.base64 buddy.core.keys.jwk.okp buddy.core.keys.jwk.proto}]
 [buddy.core.keys
  #{buddy.core.keys.jwk.ec
    buddy.core.keys.jwk.eddsa
    buddy.core.keys.jwk.okp
    buddy.core.keys.jwk.proto
    buddy.core.keys.jwk.rsa
    buddy.core.keys.pem}]
 [buddy.sign.jwe.cek #{buddy.core.codecs buddy.core.keys buddy.core.nonce}]
 [buddy.sign.util #{buddy.core.codecs}]
 [buddy.sign.jws
  #{buddy.core.codecs
    buddy.core.codecs.base64
    buddy.core.dsa
    buddy.core.mac
    buddy.sign.util
    buddy.util.ecdsa
    cheshire.core
    clojure.string}]
 [buddy.sign.jwe
  #{buddy.core.bytes
    buddy.core.codecs
    buddy.core.codecs.base64
    buddy.core.crypto
    buddy.core.keys
    buddy.core.nonce
    buddy.sign.jwe.cek
    buddy.sign.jws
    buddy.sign.util
    buddy.util.deflate
    cheshire.core
    clojure.string}]
 [buddy.sign.jwt #{buddy.core.codecs buddy.sign.jwe buddy.sign.jws buddy.sign.util cheshire.core}]
 [metabase.util.embed
  #{buddy.core.codecs
    buddy.sign.jwt
    cheshire.core
    clojure.string
    hiccup.core
    metabase.models.setting
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    ring.util.codec}]
 [metabase.api.geojson
  #{clojure.java.io
    compojure.core
    metabase.api.common
    metabase.models.setting
    metabase.util.i18n
    metabase.util.schema
    ring.util.codec
    ring.util.response
    schema.core}]
 [clojure.core.logic.protocols nil]
 [clojure.core.logic #{clojure.core.logic.protocols clojure.set clojure.string}]
 [metabase.api.testing
  #{clojure.java.jdbc
    clojure.string
    clojure.tools.logging
    compojure.core
    metabase.api.common
    metabase.models.setting.cache
    toucan.db}]
 [metabase.query-processor.pivot
  #{clojure.core.async
    clojure.tools.logging
    metabase.mbql.normalize
    metabase.query-processor
    metabase.query-processor.context
    metabase.query-processor.context.default
    metabase.query-processor.error-type
    metabase.query-processor.middleware.permissions
    metabase.query-processor.store
    metabase.util
    metabase.util.i18n}]
 [manifold.executor #{clojure.tools.logging}]
 [manifold.utils #{clojure.tools.logging manifold.executor}]
 [manifold.time #{clojure.string clojure.tools.logging manifold.executor manifold.utils}]
 [manifold.stream.core #{manifold.utils}]
 [manifold.debug nil]
 [manifold.deferred
  #{clojure.set
    clojure.tools.logging
    manifold.debug
    manifold.executor
    manifold.time
    manifold.utils
    riddley.compiler
    riddley.walk}]
 [manifold.stream.graph
  #{clojure.tools.logging manifold.deferred manifold.executor manifold.stream.core manifold.utils}]
 [manifold.stream.deferred #{manifold.deferred manifold.stream.core manifold.stream.graph}]
 [metabase.related
  #{clojure.set
    medley.core
    metabase.api.common
    metabase.mbql.normalize
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.field
    metabase.models.interface
    metabase.models.metric
    metabase.models.query
    metabase.models.segment
    metabase.models.table
    metabase.query-processor.util
    schema.core
    toucan.db}]
 [manifold.stream.queue #{manifold.deferred manifold.stream.core manifold.stream.graph manifold.utils}]
 [byte-streams.utils #{clj-tuple}]
 [manifold.stream.seq
  #{clojure.tools.logging manifold.deferred manifold.stream.core manifold.stream.graph manifold.time manifold.utils}]
 [manifold.stream.random-access
  #{clojure.tools.logging manifold.deferred manifold.stream.core manifold.stream.graph manifold.time manifold.utils}]
 [manifold.stream.iterator
  #{clojure.tools.logging manifold.deferred manifold.stream.core manifold.stream.graph manifold.time manifold.utils}]
 [manifold.stream.default
  #{clojure.tools.logging
    manifold.deferred
    manifold.executor
    manifold.stream.core
    manifold.stream.graph
    manifold.time
    manifold.utils}]
 [manifold.stream
  #{clojure.core
    clojure.tools.logging
    manifold.deferred
    manifold.stream.core
    manifold.stream.default
    manifold.stream.deferred
    manifold.stream.iterator
    manifold.stream.queue
    manifold.stream.random-access
    manifold.stream.seq
    manifold.time
    manifold.utils}]
 [primitive-math nil]
 [byte-streams.pushback-stream
  #{byte-streams.utils clojure.walk manifold.deferred manifold.stream manifold.utils primitive-math}]
 [byte-streams.protocols #{byte-streams.utils}]
 [byte-streams.graph #{byte-streams.protocols byte-streams.utils clj-tuple manifold.stream}]
 [byte-streams.char-sequence nil]
 [byte-streams
  #{byte-streams.char-sequence
    byte-streams.graph
    byte-streams.protocols
    byte-streams.pushback-stream
    byte-streams.utils
    clojure.java.io
    manifold.deferred
    manifold.stream
    primitive-math}]
 [aleph.netty
  #{byte-streams
    clojure.set
    clojure.string
    clojure.tools.logging
    manifold.deferred
    manifold.stream
    manifold.stream.core
    potemkin
    primitive-math}]
 [aleph.http.core
  #{aleph.netty
    byte-streams
    clojure.set
    clojure.string
    clojure.tools.logging
    manifold.deferred
    manifold.stream
    potemkin}]
 [aleph.flow #{manifold.deferred manifold.executor potemkin}]
 [aleph.http.server
  #{aleph.flow
    aleph.http.core
    aleph.netty
    byte-streams
    clojure.string
    clojure.tools.logging
    manifold.deferred
    manifold.stream}]
 [metabase.api.dataset
  #{cheshire.core
    clojure.string
    clojure.tools.logging
    compojure.core
    metabase.api.common
    metabase.mbql.schema
    metabase.models.card
    metabase.models.database
    metabase.models.query
    metabase.query-processor
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.permissions
    metabase.query-processor.pivot
    metabase.query-processor.streaming
    metabase.query-processor.util
    metabase.shared.models.visualization-settings
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.models.revision.last-edit
  #{clj-time.core clojure.set honeysql.core medley.core metabase.util.schema schema.core toucan.db}]
 [metabase.integrations.slack
  #{cheshire.core
    clj-http.client
    clojure.core.memoize
    clojure.java.io
    clojure.tools.logging
    medley.core
    metabase.models.setting
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.metabot.slack #{clojure.tools.logging metabase.integrations.slack metabase.util.i18n}]
 [metabase.pulse.interface #{potemkin}]
 [metabase.api.card
  #{cheshire.core
    clojure.core.async
    clojure.tools.logging
    compojure.core
    medley.core
    metabase.api.common
    metabase.api.dataset
    metabase.async.util
    metabase.email.messages
    metabase.events
    metabase.mbql.normalize
    metabase.models.card
    metabase.models.card-favorite
    metabase.models.collection
    metabase.models.database
    metabase.models.interface
    metabase.models.pulse
    metabase.models.query
    metabase.models.query.permissions
    metabase.models.revision.last-edit
    metabase.models.table
    metabase.models.view-log
    metabase.public-settings
    metabase.query-processor
    metabase.query-processor.async
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.permissions
    metabase.query-processor.middleware.results-metadata
    metabase.query-processor.pivot
    metabase.query-processor.streaming
    metabase.query-processor.util
    metabase.related
    metabase.sync.analyze.query-results
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.pulse
  #{clojure.tools.logging
    metabase.api.card
    metabase.email
    metabase.email.messages
    metabase.integrations.slack
    metabase.models.card
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.database
    metabase.models.pulse
    metabase.plugins.classloader
    metabase.pulse.interface
    metabase.pulse.render
    metabase.query-processor
    metabase.query-processor.middleware.permissions
    metabase.query-processor.timezone
    metabase.server.middleware.session
    metabase.util
    metabase.util.i18n
    metabase.util.ui-logic
    metabase.util.urls
    schema.core
    toucan.db}]
 [metabase.metabot.command
  #{clojure.edn
    clojure.java.io
    clojure.string
    clojure.tools.logging
    metabase.api.common
    metabase.metabot.slack
    metabase.models.card
    metabase.models.collection
    metabase.models.interface
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.pulse
    metabase.util
    metabase.util.i18n
    metabase.util.urls
    toucan.db}]
 [throttle.core #{clojure.math.numeric-tower}]
 [metabase.metabot.events
  #{cheshire.core
    clojure.edn
    clojure.string
    clojure.tools.logging
    metabase.metabot.command
    metabase.metabot.slack
    metabase.util
    metabase.util.i18n}]
 [aleph.http.client-middleware
  #{aleph.http.core
    byte-streams
    clojure.edn
    clojure.stacktrace
    clojure.string
    clojure.walk
    manifold.deferred
    manifold.executor
    manifold.stream
    potemkin}]
 [aleph.http.encoding #{byte-streams potemkin primitive-math}]
 [aleph.http.multipart #{aleph.http.encoding byte-streams clojure.core}]
 [aleph.http.client
  #{aleph.http.core
    aleph.http.multipart
    aleph.netty
    byte-streams
    clojure.tools.logging
    manifold.deferred
    manifold.stream}]
 [aleph.http
  #{aleph.flow
    aleph.http.client
    aleph.http.client-middleware
    aleph.http.server
    aleph.netty
    clojure.string
    manifold.deferred
    manifold.executor}]
 [metabase.server.middleware.security
  #{clojure.java.io
    clojure.string
    java-time
    metabase.config
    metabase.models.setting
    metabase.public-settings
    metabase.server.request.util
    metabase.util.i18n
    ring.util.codec}]
 [metabase.server.middleware.offset-paging #{medley.core metabase.server.middleware.security metabase.util.i18n}]
 [metabase.api.permission-graph #{clojure.spec.alpha clojure.spec.gen.alpha clojure.walk}]
 [metabase.metabot.instance
  #{clojure.tools.logging
    honeysql.core
    java-time
    metabase.config
    metabase.models.setting
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.metabot.websocket
  #{aleph.http
    clojure.tools.logging
    manifold.deferred
    manifold.stream
    metabase.integrations.slack
    metabase.metabot.events
    metabase.metabot.instance
    metabase.util
    metabase.util.i18n
    throttle.core}]
 [metabase.metabot
  #{clojure.tools.logging
    metabase.integrations.slack
    metabase.metabot.instance
    metabase.metabot.websocket
    metabase.models.setting
    metabase.util.i18n}]
 [metabase.api.permissions
  #{compojure.core
    honeysql.helpers
    metabase.api.common
    metabase.api.permission-graph
    metabase.metabot
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.server.middleware.offset-paging
    metabase.util
    metabase.util.schema
    toucan.db
    toucan.hydrate}]
 [metabase.search.config
  #{cheshire.core clojure.string honeysql.core metabase.models metabase.models.setting metabase.util.i18n}]
 [metabase.setup #{environ.core metabase.models.setting toucan.db}]
 [metabase.automagic-dashboards.visualization-macros nil]
 [metabase.automagic-dashboards.core
  #{buddy.core.codecs
    cheshire.core
    clojure.math.combinatorics
    clojure.string
    clojure.tools.logging
    clojure.walk
    clojure.zip
    java-time
    kixi.stats.core
    kixi.stats.math
    medley.core
    metabase.automagic-dashboards.filters
    metabase.automagic-dashboards.populate
    metabase.automagic-dashboards.rules
    metabase.automagic-dashboards.visualization-macros
    metabase.driver
    metabase.mbql.normalize
    metabase.mbql.util
    metabase.models.card
    metabase.models.database
    metabase.models.field
    metabase.models.interface
    metabase.models.metric
    metabase.models.query
    metabase.models.segment
    metabase.models.table
    metabase.query-processor.util
    metabase.related
    metabase.sync.analyze.classify
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    ring.util.codec
    schema.core
    toucan.db}]
 [metabase.automagic-dashboards.comparison
  #{medley.core
    metabase.api.common
    metabase.automagic-dashboards.core
    metabase.automagic-dashboards.filters
    metabase.automagic-dashboards.populate
    metabase.mbql.normalize
    metabase.models.table
    metabase.query-processor.util
    metabase.related
    metabase.util
    metabase.util.i18n}]
 [clj-ldap.client #{clojure.pprint clojure.string}]
 [metabase.integrations.common
  #{clojure.data
    clojure.set
    clojure.tools.logging
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.integrations.ldap.interface #{metabase.util.schema potemkin schema.core}]
 [metabase.integrations.ldap.default-implementation
  #{clj-ldap.client
    clojure.string
    metabase.integrations.common
    metabase.integrations.ldap.interface
    metabase.models.user
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    pretty.core
    schema.core
    toucan.db}]
 [metabase.models.setting.multi-setting #{metabase.models.setting metabase.util.i18n}]
 [metabase.integrations.google.interface
  #{metabase.models.setting.multi-setting metabase.public-settings.metastore metabase.util.i18n}]
 [metabase.integrations.google
  #{cheshire.core
    clj-http.client
    clojure.string
    clojure.tools.logging
    metabase.api.common
    metabase.integrations.google.interface
    metabase.models.setting
    metabase.models.setting.multi-setting
    metabase.models.user
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.util.stats
  #{clj-http.client
    clojure.string
    clojure.tools.logging
    java-time
    medley.core
    metabase.config
    metabase.driver
    metabase.email
    metabase.integrations.google
    metabase.integrations.slack
    metabase.models
    metabase.models.humanization
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [crypto.random #{clojure.string}]
 [metabase.domain-entities.specs
  #{medley.core metabase.mbql.normalize metabase.mbql.util metabase.util.yaml schema.coerce schema.core}]
 [metabase.server.middleware.util nil]
 [metabase.server.middleware.auth #{metabase.models.setting metabase.server.middleware.util}]
 [metabase.models.params.chain-filter.dedupe-joins #{clojure.core.logic clojure.set}]
 [metabase.models.params.chain-filter
  #{clojure.core.memoize
    clojure.set
    clojure.string
    clojure.tools.logging
    honeysql.core
    honeysql.format
    metabase.db.util
    metabase.driver.common.parameters.dates
    metabase.mbql.util
    metabase.models
    metabase.models.field
    metabase.models.field-values
    metabase.models.params
    metabase.models.params.chain-filter.dedupe-joins
    metabase.models.params.field-values
    metabase.models.table
    metabase.query-processor
    metabase.types
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.api.dashboard
  #{clojure.set
    clojure.tools.logging
    compojure.core
    metabase.api.common
    metabase.automagic-dashboards.populate
    metabase.events
    metabase.mbql.util
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.dashboard-favorite
    metabase.models.field
    metabase.models.interface
    metabase.models.params
    metabase.models.params.chain-filter
    metabase.models.query
    metabase.models.revision
    metabase.models.revision.last-edit
    metabase.query-processor.error-type
    metabase.query-processor.middleware.constraints
    metabase.query-processor.util
    metabase.related
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.api.field
  #{clojure.tools.logging
    compojure.core
    metabase.api.common
    metabase.db.metadata-queries
    metabase.models.dimension
    metabase.models.field
    metabase.models.field-values
    metabase.models.interface
    metabase.models.params.field-values
    metabase.models.permissions
    metabase.models.table
    metabase.query-processor
    metabase.related
    metabase.server.middleware.offset-paging
    metabase.types
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.api.public
  #{cheshire.core
    clojure.core.async
    compojure.core
    medley.core
    metabase.api.card
    metabase.api.common
    metabase.api.dashboard
    metabase.api.dataset
    metabase.api.field
    metabase.async.util
    metabase.db.util
    metabase.mbql.normalize
    metabase.mbql.util
    metabase.models.card
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.dashboard-card-series
    metabase.models.dimension
    metabase.models.field
    metabase.models.params
    metabase.query-processor
    metabase.query-processor.error-type
    metabase.query-processor.middleware.constraints
    metabase.query-processor.pivot
    metabase.query-processor.streaming
    metabase.util
    metabase.util.embed
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.api.embed
  #{clojure.set
    clojure.string
    clojure.tools.logging
    compojure.core
    medley.core
    metabase.api.common
    metabase.api.dashboard
    metabase.api.dataset
    metabase.api.public
    metabase.driver.common.parameters
    metabase.models.card
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.query-processor
    metabase.query-processor.middleware.constraints
    metabase.query-processor.pivot
    metabase.util
    metabase.util.embed
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.collection.graph
  #{clojure.data
    metabase.api.common
    metabase.models.collection
    metabase.models.collection-permission-graph-revision
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.api.collection
  #{clojure.string
    compojure.core
    honeysql.core
    honeysql.helpers
    medley.core
    metabase.api.card
    metabase.api.common
    metabase.db.env
    metabase.models.card
    metabase.models.collection
    metabase.models.collection.graph
    metabase.models.collection.root
    metabase.models.dashboard
    metabase.models.interface
    metabase.models.native-query-snippet
    metabase.models.permissions
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.revision.last-edit
    metabase.server.middleware.offset-paging
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.transforms.materialize
  #{metabase.api.common
    metabase.models.card
    metabase.models.collection
    metabase.query-processor
    metabase.util
    toucan.db}]
 [metabase.domain-entities.core
  #{clojure.string
    medley.core
    metabase.domain-entities.specs
    metabase.mbql.util
    metabase.models.card
    metabase.models.table
    metabase.util
    schema.core}]
 [metabase.transforms.specs
  #{medley.core
    metabase.domain-entities.specs
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.mbql.util
    metabase.util
    metabase.util.schema
    metabase.util.yaml
    schema.coerce
    schema.core}]
 [metabase.transforms.core
  #{medley.core
    metabase.domain-entities.core
    metabase.domain-entities.specs
    metabase.driver
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.transforms.materialize
    metabase.transforms.specs
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.api.table
  #{clojure.tools.logging
    compojure.core
    medley.core
    metabase.api.common
    metabase.driver
    metabase.driver.util
    metabase.models.card
    metabase.models.field
    metabase.models.field-values
    metabase.models.interface
    metabase.models.table
    metabase.related
    metabase.sync
    metabase.sync.field-values
    metabase.types
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.sample-data
  #{clojure.java.io
    clojure.string
    clojure.tools.logging
    metabase.models.database
    metabase.sync
    metabase.util.i18n
    toucan.db}]
 [metabase.sync.schedules #{metabase.util.cron metabase.util.schema schema.core}]
 [metabase.api.database
  #{clojure.string
    clojure.tools.logging
    compojure.core
    medley.core
    metabase.api.common
    metabase.api.table
    metabase.config
    metabase.driver
    metabase.driver.util
    metabase.events
    metabase.mbql.schema
    metabase.mbql.util
    metabase.models.card
    metabase.models.collection
    metabase.models.database
    metabase.models.field
    metabase.models.field-values
    metabase.models.interface
    metabase.models.permissions
    metabase.models.table
    metabase.public-settings
    metabase.sample-data
    metabase.sync.analyze
    metabase.sync.field-values
    metabase.sync.schedules
    metabase.sync.sync-metadata
    metabase.util
    metabase.util.cron
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.api.query-description
  #{clojure.string
    clojure.tools.logging
    metabase.mbql.predicates
    metabase.mbql.util
    metabase.models.field
    metabase.models.metric
    metabase.models.segment
    metabase.util.i18n
    toucan.db}]
 [metabase.server.middleware.exceptions
  #{clojure.java.jdbc clojure.string clojure.tools.logging metabase.server.middleware.security metabase.util.i18n}]
 [metabase.search.scoring
  #{clojure.core.memoize
    clojure.string
    clojure.tools.logging
    java-time
    metabase.plugins.classloader
    metabase.search.config
    metabase.util
    potemkin.types
    schema.core}]
 [metabase.api.setup
  #{compojure.core
    metabase.api.common
    metabase.api.database
    metabase.driver
    metabase.email
    metabase.events
    metabase.integrations.slack
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.database
    metabase.models.metric
    metabase.models.pulse
    metabase.models.segment
    metabase.models.session
    metabase.models.setting.cache
    metabase.models.table
    metabase.models.user
    metabase.public-settings
    metabase.server.middleware.session
    metabase.setup
    metabase.sync.schedules
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db
    toucan.models}]
 [metabase.api.search
  #{clojure.string
    clojure.tools.logging
    compojure.core
    flatland.ordered.map
    honeysql.core
    honeysql.helpers
    metabase.api.common
    metabase.db
    metabase.models.card
    metabase.models.card-favorite
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-favorite
    metabase.models.database
    metabase.models.interface
    metabase.models.metric
    metabase.models.permissions
    metabase.models.pulse
    metabase.models.segment
    metabase.models.table
    metabase.search.config
    metabase.search.scoring
    metabase.server.middleware.offset-paging
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.integrations.ldap
  #{cheshire.core
    clj-ldap.client
    clojure.tools.logging
    metabase.integrations.ldap.default-implementation
    metabase.integrations.ldap.interface
    metabase.models.setting
    metabase.models.user
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.api.activity
  #{clojure.set
    compojure.core
    metabase.api.common
    metabase.models.activity
    metabase.models.card
    metabase.models.dashboard
    metabase.models.interface
    metabase.models.view-log
    toucan.db
    toucan.hydrate}]
 [metabase.api.session
  #{cemerick.friend.credentials
    clojure.tools.logging
    compojure.core
    metabase.api.common
    metabase.config
    metabase.email.messages
    metabase.events
    metabase.integrations.google
    metabase.integrations.ldap
    metabase.models.login-history
    metabase.models.session
    metabase.models.setting
    metabase.models.user
    metabase.public-settings
    metabase.server.middleware.session
    metabase.server.request.util
    metabase.util
    metabase.util.i18n
    metabase.util.password
    metabase.util.schema
    schema.core
    throttle.core
    toucan.db
    toucan.models}]
 [metabase.api.pulse
  #{clojure.tools.logging
    compojure.core
    hiccup.core
    metabase.api.common
    metabase.email
    metabase.events
    metabase.integrations.slack
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.interface
    metabase.models.pulse
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.plugins.classloader
    metabase.pulse
    metabase.pulse.render
    metabase.query-processor
    metabase.query-processor.middleware.permissions
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    metabase.util.urls
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.api.notify
  #{compojure.core
    metabase.api.common
    metabase.models.database
    metabase.models.table
    metabase.sync
    metabase.sync.sync-metadata
    metabase.util.schema
    schema.core}]
 [metabase.server.routes.index
  #{cheshire.core
    clojure.java.io
    clojure.string
    clojure.tools.logging
    hiccup.util
    metabase.core.initialization-status
    metabase.models.setting
    metabase.public-settings
    metabase.util.embed
    metabase.util.i18n
    ring.util.response
    stencil.core}]
 [robert.hooke nil]
 [clj-http.fake #{clj-http.core clojure.math.combinatorics clojure.string ring.util.codec robert.hooke}]
 [metabase.public-settings.metastore-test
  #{cheshire.core
    clj-http.fake
    clojure.test
    metabase.models.user
    metabase.public-settings.metastore
    metabase.test.util
    toucan.util.test}]
 [metabase.test.data.sql
  #{clojure.string
    clojure.tools.logging
    metabase.driver
    metabase.driver.sql.util
    metabase.query-processor
    metabase.test.data
    metabase.test.data.interface}]
 [metabase.sync.analyze.classifiers.name-test
  #{clojure.test
    metabase.models.field
    metabase.models.table
    metabase.sync.analyze.classifiers.name
    metabase.test
    metabase.test.util}]
 [metabase.api.revision-test
  #{clojure.test
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.revision
    metabase.test
    metabase.test.data.users
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.util.password-test
  #{clojure.test metabase.test metabase.test.fixtures metabase.test.util metabase.util.password}]
 [metabase.pulse.test-util
  #{clojure.walk
    medley.core
    metabase.integrations.slack
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.pulse
    metabase.query-processor-test
    metabase.test
    metabase.test.data.users
    metabase.util
    toucan.util.test}]
 [metabase.models.permissions-group-membership-test
  #{clojure.test
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.user
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.sync.analyze.fingerprint.insights-test
  #{clojure.test metabase.sync.analyze.fingerprint.insights metabase.test.util}]
 [ring.util.request #{ring.util.parsing}]
 [ring.middleware.params #{ring.util.codec ring.util.request}]
 [metabase.api.activity-test
  #{clojure.test
    metabase.api.activity
    metabase.db
    metabase.models.activity
    metabase.models.card
    metabase.models.dashboard
    metabase.models.interface
    metabase.models.view-log
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.cmd.reset-password #{metabase.db metabase.models.user metabase.util metabase.util.i18n toucan.db}]
 [metabase.cmd.reset-password-test
  #{clojure.test metabase.cmd.reset-password metabase.models.user metabase.test metabase.test.util metabase.util}]
 [metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing-test
  #{clojure.test
    metabase.query-processor.middleware.reconcile-breakout-and-order-by-bucketing
    metabase.test
    metabase.test.util}]
 [metabase.integrations.common-test
  #{clojure.test
    metabase.integrations.common
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.user
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.test.util.log
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.api.metric-test
  #{clojure.test
    metabase.http-client
    metabase.models.database
    metabase.models.metric
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.revision
    metabase.models.table
    metabase.server.middleware.util
    metabase.test
    metabase.test.data
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.query-processor.middleware.parameters.mbql-test
  #{clojure.test
    metabase.driver
    metabase.driver.common.parameters
    metabase.mbql.normalize
    metabase.query-processor
    metabase.query-processor.error-type
    metabase.query-processor.middleware.parameters.mbql
    metabase.test
    metabase.test.util}]
 [metabase.pulse.render.style-test #{clojure.test metabase.pulse.render.style metabase.test.util}]
 [metabase.query-processor.middleware.format-rows-test
  #{clojure.test
    java-time
    metabase.driver
    metabase.query-processor-test
    metabase.query-processor.middleware.format-rows
    metabase.test
    metabase.test.util}]
 [metabase.driver.sql.parameters.substitution-test
  #{clojure.test
    metabase.driver.common.parameters
    metabase.driver.sql.parameters.substitution
    metabase.models
    metabase.test
    metabase.test.util}]
 [metabase.db.data-migrations
  #{cemerick.friend.credentials
    cheshire.core
    clojure.tools.logging
    clojure.walk
    medley.core
    metabase.db.util
    metabase.mbql.schema
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.database
    metabase.models.field
    metabase.models.humanization
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.pulse
    metabase.models.setting
    metabase.models.user
    metabase.public-settings
    metabase.util
    metabase.util.i18n
    toucan.db
    toucan.models}]
 [metabase.cmd.copy
  #{clojure.java.jdbc
    clojure.string
    clojure.tools.logging
    honeysql.format
    metabase.db.connection
    metabase.db.data-migrations
    metabase.db.setup
    metabase.models
    metabase.util
    metabase.util.i18n
    metabase.util.schema
    schema.core}]
 [metabase.cmd.copy.h2
  #{clojure.java.io clojure.string clojure.tools.logging metabase.db.spec metabase.util metabase.util.i18n}]
 [metabase.cmd.load-from-h2 #{metabase.cmd.copy metabase.cmd.copy.h2 metabase.db.connection metabase.db.env}]
 [metabase.cmd.rotate-encryption-key
  #{cheshire.core
    clojure.java.jdbc
    metabase.db
    metabase.db.connection
    metabase.models
    metabase.models.setting.cache
    metabase.util.encryption
    metabase.util.i18n
    toucan.db}]
 [metabase.cmd.dump-to-h2
  #{clojure.tools.logging
    metabase.cmd.copy
    metabase.cmd.copy.h2
    metabase.cmd.rotate-encryption-key
    metabase.db.connection
    toucan.db}]
 [metabase.cmd.test-util #{metabase.util.files}]
 [metabase.cmd.load-and-dump-test
  #{clojure.java.io
    clojure.test
    metabase.cmd.compare-h2-dbs
    metabase.cmd.copy.h2
    metabase.cmd.dump-to-h2
    metabase.cmd.load-from-h2
    metabase.cmd.test-util
    metabase.db.connection
    metabase.db.spec
    metabase.driver
    metabase.models.setting
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util.i18n.impl}]
 [metabase.api.query-description-test
  #{clojure.test
    metabase.api.query-description
    metabase.models.metric
    metabase.models.segment
    metabase.models.table
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util.i18n
    toucan.util.test}]
 [metabase.events-test #{clojure.core.async clojure.test metabase.events metabase.test.util}]
 [metabase.driver.sql.query-processor-test
  #{clojure.string
    clojure.test
    honeysql.core
    metabase.driver
    metabase.driver.sql
    metabase.driver.sql-jdbc.test-util
    metabase.driver.sql.query-processor
    metabase.models.field
    metabase.models.setting
    metabase.query-processor
    metabase.query-processor.interface
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.honeysql-extensions
    pretty.core
    schema.core}]
 [metabase.models.native-query-snippet-test #{clojure.test metabase.models metabase.test metabase.test.util toucan.db}]
 [metabase.models.permissions-test
  #{clojure.test
    metabase.models.collection
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.table
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.models.params.chain-filter-test
  #{clojure.test metabase.models metabase.models.params.chain-filter metabase.test metabase.test.util toucan.db}]
 [metabase.api.pivots #{metabase.test}]
 [metabase.api.card-test
  #{cheshire.core
    clojure.string
    clojure.test
    dk.ative.docjure.spreadsheet
    java-time
    medley.core
    metabase.api.card
    metabase.api.pivots
    metabase.driver.sql-jdbc.execute
    metabase.http-client
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.revision
    metabase.models.user
    metabase.query-processor
    metabase.query-processor.async
    metabase.query-processor.middleware.constraints
    metabase.query-processor.middleware.results-metadata
    metabase.server.middleware.util
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.dashboard-test
  #{clojure.test
    metabase.api.common
    metabase.automagic-dashboards.core
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.dashboard-card-series
    metabase.models.database
    metabase.models.interface
    metabase.models.permissions
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.table
    metabase.models.user
    metabase.test
    metabase.test.data
    metabase.test.data.users
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.api.dashboard-test
  #{clojure.string
    clojure.test
    clojure.walk
    medley.core
    metabase.api.card-test
    metabase.api.dashboard
    metabase.http-client
    metabase.models
    metabase.models.dashboard-card
    metabase.models.dashboard-test
    metabase.models.params.chain-filter-test
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.revision
    metabase.server.middleware.util
    metabase.test
    metabase.test.util
    metabase.util
    ring.util.codec
    toucan.db}]
 [metabase.query-processor.middleware.resolve-source-table-test
  #{clojure.test
    metabase.models.database
    metabase.models.table
    metabase.query-processor.middleware.resolve-source-table
    metabase.query-processor.store
    metabase.test
    metabase.test.util}]
 [metabase.cmd.load-from-h2-test
  #{clojure.test
    metabase.cmd.load-from-h2
    metabase.cmd.test-util
    metabase.db.connection
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.models
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    toucan.db}]
 [ring.mock.request #{cheshire.core clojure.string ring.util.codec}]
 [metabase.server.middleware.offset-paging-test
  #{clojure.test
    metabase.server.middleware.offset-paging
    metabase.test.util
    ring.middleware.keyword-params
    ring.middleware.params
    ring.mock.request
    ring.util.response
    schema.core}]
 [clojure.test.check.rose-tree #{clojure.core}]
 [clojure.test.check.generators #{clojure.core clojure.string clojure.test.check.random clojure.test.check.rose-tree}]
 [metabase.util.i18n.impl-test #{clojure.test metabase.test metabase.test.util metabase.util.i18n.impl}]
 [metabase.sync.analyze.classifiers.category-test
  #{clojure.test metabase.sync.analyze.classifiers.category metabase.test.util}]
 [metabase.api.util-test #{clojure.test metabase.test metabase.test.util}]
 [metabase.test.mock.util nil]
 [metabase.test.mock.toucanery #{medley.core metabase.driver metabase.test.mock.util}]
 [metabase.sync.sync-metadata.fields.sync-instances-test
  #{clojure.test
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.sync.sync-metadata
    metabase.sync.sync-metadata.fields
    metabase.test.mock.toucanery
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.email.messages-test
  #{clojure.string clojure.test metabase.email-test metabase.email.messages metabase.test.util}]
 [metabase.models.setting.multi-setting-test
  #{clojure.test
    metabase.models.setting
    metabase.models.setting.multi-setting
    metabase.test.fixtures
    metabase.test.util}]
 [clojurewerkz.quartzite.schedule.cron nil]
 [metabase.task.task-history-cleanup
  #{clojure.tools.logging
    clojurewerkz.quartzite.jobs
    clojurewerkz.quartzite.schedule.cron
    clojurewerkz.quartzite.triggers
    metabase.models.task-history
    metabase.task
    metabase.util.i18n}]
 [metabase.models.task-history-test
  #{clojure.test java-time metabase.models.task-history metabase.test metabase.test.util metabase.util toucan.db}]
 [metabase.task.task-history-cleanup-test
  #{clojure.test
    java-time
    metabase.models.task-history
    metabase.models.task-history-test
    metabase.task.task-history-cleanup
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor.middleware.auto-parse-filter-values-test
  #{clojure.test metabase.query-processor.middleware.auto-parse-filter-values metabase.test metabase.test.util}]
 [metabase.test.data.one-off-dbs
  #{clojure.java.jdbc
    clojure.string
    metabase.db.spec
    metabase.models.database
    metabase.sync
    metabase.test.data
    metabase.test.util
    toucan.util.test}]
 [metabase.sync.sync-metadata.fields-test
  #{clojure.java.jdbc
    clojure.test
    medley.core
    metabase.models
    metabase.query-processor
    metabase.sync
    metabase.sync.util-test
    metabase.test
    metabase.test.data.one-off-dbs
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.task.follow-up-emails
  #{clojure.tools.logging
    clojurewerkz.quartzite.jobs
    clojurewerkz.quartzite.schedule.cron
    clojurewerkz.quartzite.triggers
    java-time
    metabase.email
    metabase.email.messages
    metabase.models.activity
    metabase.models.setting
    metabase.models.user
    metabase.models.view-log
    metabase.public-settings
    metabase.task
    metabase.util.date-2
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.mbql.util.match-test #{clojure.test metabase.mbql.util.match metabase.test.util}]
 [metabase.api.common.internal-test
  #{clojure.test medley.core metabase.api.common.internal metabase.test metabase.test.util metabase.util}]
 [metabase.timeseries-query-processor-test.util
  #{metabase.test metabase.test.data.dataset-definitions metabase.test.data.interface}]
 [metabase.events.last-login
  #{clojure.core.async clojure.tools.logging metabase.events metabase.models.user toucan.db}]
 [ring.adapter.jetty #{ring.util.servlet}]
 [metabase.server
  #{clojure.core
    clojure.string
    clojure.tools.logging
    medley.core
    metabase.config
    metabase.server.protocols
    metabase.util
    metabase.util.i18n
    ring.adapter.jetty
    ring.util.servlet}]
 [metabase.server.middleware.log
  #{clojure.core.async
    clojure.string
    clojure.tools.logging
    metabase.async.streaming-response
    metabase.async.streaming-response.thread-pool
    metabase.async.util
    metabase.driver.sql-jdbc.execute.diagnostic
    metabase.server
    metabase.server.request.util
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.models.card-test
  #{cheshire.core
    clojure.test
    metabase.models
    metabase.models.card
    metabase.query-processor
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.models.dashboard-card-test
  #{clojure.test
    metabase.models.card
    metabase.models.card-test
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.dashboard-card-series
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor.middleware.resolve-joined-fields-test
  #{clojure.test
    metabase.query-processor
    metabase.query-processor.middleware.resolve-joined-fields
    metabase.test
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.driver.sql.query-processor.empty-string-is-null #{metabase.driver metabase.driver.sql.query-processor}]
 [metabase.query-processor-test.share-test
  #{clojure.test
    metabase.driver
    metabase.models.metric
    metabase.models.segment
    metabase.query-processor-test
    metabase.test
    metabase.test.util}]
 [metabase.pulse.render.test-util nil]
 [metabase.pulse.render.table-test
  #{clojure.test
    metabase.pulse.render.color
    metabase.pulse.render.table
    metabase.pulse.render.test-util
    metabase.test.util}]
 [metabase.pulse-test
  #{clojure.java.io
    clojure.string
    clojure.test
    medley.core
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.pulse
    metabase.pulse
    metabase.pulse.render
    metabase.pulse.render.body
    metabase.pulse.test-util
    metabase.query-processor.middleware.constraints
    metabase.test
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.api.notify-test
  #{clj-http.client
    clojure.test
    metabase.api.notify
    metabase.http-client
    metabase.models.database
    metabase.server.middleware.util
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util}]
 [metabase.models.field-test
  #{clojure.test metabase.models.field metabase.test metabase.test.util metabase.util toucan.db}]
 [metabase.events.revision
  #{clojure.core.async
    clojure.tools.logging
    metabase.events
    metabase.models.card
    metabase.models.dashboard
    metabase.models.metric
    metabase.models.revision
    metabase.models.segment}]
 [metabase.events.revision-test
  #{clojure.test metabase.events.revision metabase.models metabase.test metabase.test.util metabase.util toucan.db}]
 [metabase.db.spec-test #{clojure.test metabase.config metabase.db.spec metabase.test.util}]
 [metabase.test.integrations.ldap #{clojure.java.io metabase.test.util metabase.util}]
 [metabase.integrations.ldap-test
  #{clojure.test
    metabase.integrations.ldap
    metabase.integrations.ldap.default-implementation
    metabase.models.user
    metabase.public-settings.metastore
    metabase.test
    metabase.test.integrations.ldap
    metabase.test.util
    toucan.db}]
 [metabase.driver.mysql
  #{clojure.java.jdbc
    clojure.set
    clojure.string
    clojure.tools.logging
    honeysql.core
    java-time
    metabase.db.spec
    metabase.driver
    metabase.driver.common
    metabase.driver.sql-jdbc
    metabase.driver.sql-jdbc.common
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql-jdbc.sync
    metabase.driver.sql.query-processor
    metabase.driver.sql.util.unprepare
    metabase.query-processor.timezone
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    metabase.util.ssh}]
 [metabase.driver.mysql-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    honeysql.core
    java-time
    metabase.db.metadata-queries
    metabase.driver
    metabase.driver.mysql
    metabase.driver.sql-jdbc.connection
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.query-processor-test.string-extracts-test
    metabase.sync
    metabase.sync.analyze.fingerprint
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    metabase.util.date-2
    metabase.util.honeysql-extensions
    toucan.db
    toucan.hydrate
    toucan.util.test}]
 [metabase.sync-test
  #{clojure.test
    metabase.driver
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.sync
    metabase.test
    metabase.test.mock.util
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.mbql.normalize-test #{clojure.set clojure.test metabase.mbql.normalize metabase.test.util}]
 [metabase.public-settings-test
  #{clojure.test
    metabase.models.setting
    metabase.public-settings
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util.i18n}]
 [metabase.driver.h2
  #{clojure.string
    clojure.tools.logging
    honeysql.core
    java-time
    metabase.db.jdbc-protocols
    metabase.db.spec
    metabase.driver
    metabase.driver.common
    metabase.driver.sql-jdbc
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql-jdbc.sync
    metabase.driver.sql.query-processor
    metabase.plugins.classloader
    metabase.query-processor.error-type
    metabase.query-processor.store
    metabase.util
    metabase.util.honeysql-extensions
    metabase.util.i18n
    metabase.util.ssh}]
 [metabase.driver.h2-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    honeysql.core
    metabase.db.spec
    metabase.driver
    metabase.driver.h2
    metabase.driver.sql.query-processor
    metabase.models
    metabase.query-processor
    metabase.test
    metabase.test.util
    metabase.util.honeysql-extensions}]
 [metabase.api.native-query-snippet-test
  #{clojure.string
    clojure.test
    metabase.models
    metabase.models.native-query-snippet
    metabase.test
    metabase.test.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.util.test}]
 [metabase.server.middleware.ssl
  #{clojure.string metabase.public-settings metabase.server.request.util ring.util.request ring.util.response}]
 [metabase.server.middleware.ssl-test
  #{clojure.test metabase.server.middleware.ssl metabase.test.util ring.mock.request ring.util.response}]
 [metabase.timeseries-query-processor-test
  #{clojure.test
    metabase.query-processor-test
    metabase.test
    metabase.test.util
    metabase.timeseries-query-processor-test.util}]
 [metabase.db.metadata-queries-test
  #{clojure.test
    metabase.db.metadata-queries
    metabase.driver
    metabase.driver.sql-jdbc.test-util
    metabase.models
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.test
    metabase.test.util}]
 [metabase.query-processor.middleware.add-rows-truncated-test
  #{clojure.test
    metabase.query-processor
    metabase.query-processor.middleware.add-rows-truncated
    metabase.test
    metabase.test.util}]
 [metabase.pulse.render.datetime-test #{clojure.test java-time metabase.pulse.render.datetime metabase.test.util}]
 [metabase.api.moderation-review-test
  #{clojure.test metabase.models.card metabase.models.moderation-review metabase.test metabase.test.util toucan.db}]
 [metabase.query-processor.store-test #{clojure.test metabase.query-processor.store metabase.test.util}]
 [metabase.query-processor.middleware.permissions-test
  #{clojure.test
    metabase.api.common
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.query-processor.error-type
    metabase.query-processor.middleware.permissions
    metabase.test
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.sync.analyze.fingerprint-test
  #{clojure.test
    metabase.db.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.sync.analyze.fingerprint
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.interface
    metabase.test
    metabase.test.data
    metabase.test.util
    metabase.util
    schema.core
    toucan.db
    toucan.util.test}]
 [metabase.metabot.test-util #{medley.core metabase.metabot.slack metabase.pulse}]
 [metabase.metabot.events-test
  #{cheshire.core
    clojure.test
    metabase.metabot.command
    metabase.metabot.events
    metabase.metabot.slack
    metabase.metabot.test-util
    metabase.test.util}]
 [metabase.test.sync
  #{clojure.test
    metabase.models.database
    metabase.models.task-history
    metabase.sync
    metabase.test
    metabase.test.data
    toucan.db}]
 [clj-time.predicates #{clj-time.coerce clj-time.core}]
 [metabase.task.send-pulses
  #{clj-time.core
    clj-time.predicates
    clojure.tools.logging
    clojurewerkz.quartzite.jobs
    clojurewerkz.quartzite.schedule.cron
    clojurewerkz.quartzite.triggers
    metabase.models.pulse
    metabase.models.pulse-channel
    metabase.models.setting
    metabase.models.task-history
    metabase.pulse
    metabase.task
    metabase.util.i18n
    schema.core}]
 [clojure.test.check.results nil]
 [clojure.test.check.properties #{clojure.test.check.generators clojure.test.check.results}]
 [metabase.driver.sql-jdbc.execute.diagnostic-test
  #{clojure.test
    metabase.driver
    metabase.driver.sql-jdbc.execute.diagnostic
    metabase.driver.sql-jdbc.test-util
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.query-processor.streaming.xlsx-test
  #{cheshire.generate clojure.test dk.ative.docjure.spreadsheet metabase.test.util}]
 [clojure.spec.test.alpha #{clojure.future clojure.pprint clojure.spec.alpha clojure.spec.gen.alpha clojure.string}]
 [metabase.shared.models.visualization-settings-test
  #{clojure.spec.test.alpha
    clojure.test
    clojure.walk
    metabase.shared.models.visualization-settings
    metabase.test.util}]
 [metabase.cmd
  #{clojure.string
    clojure.tools.logging
    environ.core
    medley.core
    metabase.config
    metabase.mbql.util
    metabase.plugins.classloader
    metabase.util
    metabase.util.i18n}]
 [metabase.util.encryption-test
  #{clojure.string
    clojure.test
    metabase.models.setting.cache
    metabase.test.initialize
    metabase.test.util
    metabase.util.encryption}]
 [metabase.cmd.rotate-encryption-key-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    metabase.cmd
    metabase.cmd.load-from-h2
    metabase.cmd.rotate-encryption-key
    metabase.cmd.test-util
    metabase.db.connection
    metabase.db.spec
    metabase.driver
    metabase.models
    metabase.models.interface
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util.encryption
    metabase.util.encryption-test
    toucan.db
    toucan.models}]
 [metabase.models.permissions-group-test
  #{clojure.test
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.user
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.honeysql-extensions
    toucan.db}]
 [ring.middleware.json
  #{cheshire.core
    cheshire.parse
    clojure.java.io
    ring.core.protocols
    ring.util.io
    ring.util.request
    ring.util.response}]
 [metabase.server.middleware.json
  #{cheshire.core cheshire.generate metabase.util.date-2 ring.middleware.json ring.util.io ring.util.response}]
 [metabase.api.common-test
  #{clojure.test
    metabase.api.common
    metabase.api.common.internal
    metabase.server.middleware.exceptions
    metabase.server.middleware.misc
    metabase.server.middleware.security
    metabase.test.data
    metabase.test.util
    metabase.util.schema}]
 [metabase.query-processor-test.expressions-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    java-time
    medley.core
    metabase.driver
    metabase.query-processor
    metabase.sync
    metabase.test
    metabase.test.data.one-off-dbs
    metabase.test.util
    metabase.util
    metabase.util.date-2}]
 [metabase.integrations.slack-test
  #{cheshire.core
    clj-http.fake
    clojure.core.memoize
    clojure.java.io
    clojure.test
    medley.core
    metabase.integrations.slack
    metabase.test.util
    schema.core}]
 [metabase.driver.util-test #{clojure.test metabase.driver.util metabase.test.util}]
 [metabase.query-processor.middleware.annotate-test
  #{clojure.test
    metabase.driver
    metabase.models
    metabase.query-processor
    metabase.query-processor.middleware.annotate
    metabase.query-processor.store
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.query-processor.middleware.add-implicit-joins-test
  #{clojure.test
    medley.core
    metabase.driver
    metabase.query-processor
    metabase.query-processor.middleware.add-implicit-joins
    metabase.query-processor.store
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.domain-entities.specs-test #{clojure.test metabase.domain-entities.specs metabase.test.util schema.core}]
 [metabase.sync.sync-metadata.comments-test
  #{clojure.test
    metabase.driver
    metabase.models.field
    metabase.models.table
    metabase.sync
    metabase.sync.sync-metadata.tables
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor-test.fields-test
  #{clojure.test metabase.query-processor-test metabase.test metabase.test.util}]
 [metabase.util.embed-test
  #{buddy.sign.jwt clojure.test crypto.random metabase.test metabase.test.util metabase.util.embed}]
 [metabase.automagic-dashboards.filters-test #{clojure.test metabase.automagic-dashboards.filters metabase.test.util}]
 [metabase.models.pulse-test
  #{clojure.test
    medley.core
    metabase.api.common
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.database
    metabase.models.interface
    metabase.models.permissions
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.models.table
    metabase.test
    metabase.test.mock.util
    metabase.test.util
    metabase.util
    schema.core
    toucan.db
    toucan.hydrate
    toucan.util.test}]
 [metabase.test.domain-entities #{clojure.test metabase.domain-entities.specs}]
 [metabase.domain-entities.core-test
  #{clojure.test
    metabase.domain-entities.core
    metabase.models.field
    metabase.models.table
    metabase.test.data
    metabase.test.domain-entities
    metabase.test.util
    toucan.hydrate}]
 [metabase.driver.sql.query-processor.empty-string-is-null-test
  #{clojure.test
    metabase.driver
    metabase.driver.sql
    metabase.driver.sql.query-processor
    metabase.driver.sql.query-processor.empty-string-is-null
    metabase.test.util}]
 [metabase.events.activity-feed
  #{clojure.core.async
    clojure.tools.logging
    metabase.events
    metabase.mbql.util
    metabase.models.activity
    metabase.models.card
    metabase.models.dashboard
    metabase.models.table
    metabase.query-processor
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.events.activity-feed-test
  #{clojure.test
    metabase.events.activity-feed
    metabase.mbql.schema
    metabase.models
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.api.field-test
  #{clojure.test
    medley.core
    metabase.api.field
    metabase.driver.util
    metabase.models
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.timeseries-query-processor-test.util
    metabase.util
    ring.util.codec
    toucan.db
    toucan.hydrate}]
 [metabase.sync.sync-metadata.fields.fetch-metadata-test
  #{clojure.test
    clojure.walk
    medley.core
    metabase.models.database
    metabase.models.table
    metabase.sync.sync-metadata
    metabase.sync.sync-metadata.fields.fetch-metadata
    metabase.test
    metabase.test.mock.toucanery
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.api.table-test
  #{cheshire.core
    clojure.test
    clojure.walk
    medley.core
    metabase.api.table
    metabase.driver.util
    metabase.http-client
    metabase.mbql.util
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.table
    metabase.server.middleware.util
    metabase.test
    metabase.test.mock.util
    metabase.test.util
    metabase.timeseries-query-processor-test.util
    metabase.util
    toucan.db}]
 [metabase.api.search-test
  #{clojure.string
    clojure.test
    honeysql.core
    metabase.api.search
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.search.config
    metabase.test
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [clojure.test.check.impl nil]
 [clojure.test.check
  #{clojure.test.check.generators
    clojure.test.check.impl
    clojure.test.check.random
    clojure.test.check.results
    clojure.test.check.rose-tree}]
 [clojure.test.check.clojure-test.assertions #{clojure.test}]
 [clojure.test.check.clojure-test
  #{clojure.test clojure.test.check clojure.test.check.clojure-test.assertions clojure.test.check.impl}]
 [metabase.cmd.copy-test
  #{clojure.test
    flatland.ordered.map
    metabase.cmd.copy
    metabase.plugins.classloader
    metabase.test.util
    metabase.util
    toucan.models}]
 [metabase.api.session-test
  #{cheshire.core
    clj-http.client
    clojure.test
    metabase.api.session
    metabase.driver.h2
    metabase.email-test
    metabase.http-client
    metabase.models
    metabase.models.session
    metabase.models.setting
    metabase.models.user
    metabase.public-settings
    metabase.server.middleware.session
    metabase.test
    metabase.test.data.users
    metabase.test.fixtures
    metabase.test.integrations.ldap
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.pulse.render.sparkline-test
  #{clojure.test java-time metabase.models.card metabase.pulse.render.sparkline metabase.test metabase.test.util}]
 [metabase.pulse.render.body-test
  #{clojure.test
    clojure.walk
    hiccup.core
    metabase.pulse.render.body
    metabase.pulse.render.common
    metabase.pulse.render.test-util
    metabase.test.util
    schema.core}]
 [metabase.test.automagic-dashboards
  #{clojure.test
    metabase.mbql.normalize
    metabase.mbql.schema
    metabase.models
    metabase.test
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.automagic-dashboards.core-test
  #{clojure.core.async
    clojure.test
    java-time
    metabase.api.common
    metabase.automagic-dashboards.core
    metabase.automagic-dashboards.rules
    metabase.mbql.schema
    metabase.models
    metabase.models.field
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.query
    metabase.query-processor.async
    metabase.test
    metabase.test.automagic-dashboards
    metabase.test.util
    metabase.util
    metabase.util.date-2
    metabase.util.i18n
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.constraints-test
  #{clojure.test metabase.query-processor.middleware.constraints metabase.test metabase.test.util}]
 [metabase.sync.field-values-test
  #{clojure.test
    metabase.models.field
    metabase.models.field-values
    metabase.models.table
    metabase.sync
    metabase.sync.util-test
    metabase.test
    metabase.test.data
    metabase.test.data.one-off-dbs
    metabase.test.util
    toucan.db}]
 [metabase.query-processor.middleware.cache.impl-test
  #{clojure.core.async clojure.test metabase.query-processor.middleware.cache.impl metabase.test.util potemkin.types}]
 [metabase.sync.analyze.classifiers.no-preview-display-test
  #{clojure.test metabase.models.field metabase.sync.analyze.classifiers.no-preview-display metabase.test.util}]
 [metabase.pulse.render.png-test
  #{clojure.test metabase.pulse.render.png metabase.test metabase.test.util schema.core}]
 [metabase.query-processor-test.parameters-test
  #{clojure.test
    medley.core
    metabase.driver
    metabase.models
    metabase.query-processor
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.query-processor-test.nested-field-test #{clojure.test metabase.test metabase.test.util}]
 [metabase.api.public-test
  #{cheshire.core
    clojure.string
    clojure.test
    dk.ative.docjure.spreadsheet
    metabase.api.dashboard-test
    metabase.api.pivots
    metabase.api.public
    metabase.http-client
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.api.embed-test
  #{buddy.sign.jwt
    buddy.sign.util
    clj-time.core
    clojure.data.csv
    clojure.string
    clojure.test
    crypto.random
    dk.ative.docjure.spreadsheet
    metabase.api.dashboard-test
    metabase.api.embed
    metabase.api.pivots
    metabase.api.public-test
    metabase.http-client
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor-test
    metabase.query-processor.middleware.constraints
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.api.preview-embed-test
  #{clojure.test
    metabase.api.embed-test
    metabase.api.pivots
    metabase.models.card
    metabase.models.dashboard
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.api.pulse-test
  #{clojure.test
    metabase.api.card-test
    metabase.api.pulse
    metabase.http-client
    metabase.integrations.slack
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.pulse
    metabase.models.pulse-test
    metabase.pulse.render.png
    metabase.server.middleware.util
    metabase.test
    metabase.test.mock.util
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.api.tiles-test #{cheshire.core clojure.test metabase.test metabase.test.util schema.core}]
 [metabase.sync.analyze.query-results-test
  #{clojure.string
    clojure.test
    metabase.mbql.schema
    metabase.models.card
    metabase.query-processor
    metabase.query-processor.test-util
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.analyze.fingerprint.insights
    metabase.sync.analyze.query-results
    metabase.test
    metabase.test.data
    metabase.test.mock.util
    metabase.test.sync
    metabase.test.util
    metabase.util}]
 [metabase.models.dependency-test
  #{clojure.test
    metabase.models.dependency
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    toucan.db
    toucan.models}]
 [metabase.query-processor-test.alternative-date-test
  #{clojure.test
    metabase.driver
    metabase.driver.sql-jdbc.test-util
    metabase.driver.sql.query-processor
    metabase.query-processor
    metabase.query-processor-test
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.query-processor-test.field-visibility-test
  #{clojure.test metabase.models.field metabase.query-processor-test metabase.test metabase.test.util metabase.util}]
 [metabase.driver.common.parameters.dates-test
  #{clojure.test
    java-time
    metabase.driver.common.parameters.dates
    metabase.test
    metabase.test.util
    metabase.util.date-2}]
 [metabase.models.permissions.parse-test #{clojure.test metabase.models.permissions.parse metabase.test.util}]
 [metabase.db.connection-pool-setup-test
  #{clojure.java.jdbc
    clojure.test
    metabase.connection-pool
    metabase.db.connection-pool-setup
    metabase.test
    metabase.test.util}]
 [metabase.query-processor-test.failure-test
  #{clojure.test
    metabase.query-processor
    metabase.query-processor.interface
    metabase.test
    metabase.test.util
    metabase.util.schema
    schema.core}]
 [metabase.metabot.command-test
  #{clojure.string
    clojure.test
    metabase.metabot.command
    metabase.metabot.test-util
    metabase.models.card
    metabase.models.collection
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.test
    metabase.test.data
    metabase.test.util
    metabase.util
    metabase.util.i18n
    toucan.db}]
 [metabase.plugins.classloader-test #{clojure.test metabase.plugins.classloader metabase.test.util}]
 [metabase.util.cron-test #{clojure.test metabase.test.util metabase.util.cron}]
 [metabase.test.transforms #{clojure.test metabase.transforms.specs}]
 [metabase.sync.analyze.classify-test
  #{clojure.test
    metabase.models.database
    metabase.models.field
    metabase.models.field-values
    metabase.models.table
    metabase.sync.analyze.classify
    metabase.sync.interface
    metabase.test.util
    metabase.util
    toucan.util.test}]
 [metabase.query-processor.middleware.splice-params-in-response-test
  #{clojure.test
    metabase.driver
    metabase.query-processor
    metabase.query-processor.middleware.splice-params-in-response
    metabase.test
    metabase.test.data
    metabase.test.util}]
 [metabase.query-processor.middleware.process-userland-query-test
  #{clojure.core.async
    clojure.test
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.query-processor.middleware.process-userland-query
    metabase.query-processor.util
    metabase.test
    metabase.test.util}]
 [metabase.query-processor.middleware.validate-temporal-bucketing-test
  #{clojure.test
    metabase.models
    metabase.query-processor.middleware.validate-temporal-bucketing
    metabase.test
    metabase.test.util
    toucan.db}]
 [metabase.query-processor-test.case-test
  #{clojure.test metabase.driver metabase.models metabase.test metabase.test.util}]
 [metabase.types-test #{clojure.test metabase.test.util metabase.types metabase.types.coercion-hierarchies}]
 [metabase.query-processor.streaming.csv-test
  #{cheshire.core
    clojure.data.csv
    clojure.test
    metabase.test
    metabase.test.data.dataset-definitions
    metabase.test.util}]
 [metabase.driver.common.parameters.operators-test
  #{clojure.test
    metabase.driver.common.parameters.operators
    metabase.query-processor.error-type
    metabase.test.util
    schema.core}]
 [metabase.query-processor.middleware.add-dimension-projections-test
  #{clojure.test
    medley.core
    metabase.query-processor.middleware.add-dimension-projections
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    toucan.hydrate}]
 [metabase.server.middleware.security-test
  #{clojure.string clojure.test metabase.config metabase.server.middleware.security metabase.test.util}]
 [metabase.task-test
  #{clojure.test
    clojurewerkz.quartzite.jobs
    clojurewerkz.quartzite.schedule.cron
    clojurewerkz.quartzite.scheduler
    clojurewerkz.quartzite.triggers
    metabase.task
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.expand-macros-test
  #{clojure.test
    metabase.models.database
    metabase.models.metric
    metabase.models.segment
    metabase.models.table
    metabase.query-processor-test
    metabase.query-processor.middleware.expand-macros
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.driver.postgres-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    honeysql.core
    metabase.config
    metabase.driver
    metabase.driver.postgres
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.execute
    metabase.driver.sql.query-processor
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.sync
    metabase.sync.sync-metadata
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.honeysql-extensions
    toucan.db}]
 [metabase.query-processor-test.constraints-test
  #{clojure.test metabase.query-processor metabase.test metabase.test.util}]
 [metabase.integrations.google-test
  #{clojure.test
    metabase.email-test
    metabase.integrations.google
    metabase.integrations.google.interface
    metabase.models.user
    metabase.public-settings.metastore
    metabase.test
    metabase.test.util
    toucan.db}]
 [metabase.query-processor.middleware.parameters-test
  #{clojure.test
    metabase.driver
    metabase.mbql.normalize
    metabase.models.card
    metabase.models.native-query-snippet
    metabase.query-processor.middleware.parameters
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.resolve-referenced-test
  #{clojure.test
    metabase.models.card
    metabase.models.database
    metabase.query-processor.middleware.parameters-test
    metabase.query-processor.middleware.resolve-referenced
    metabase.query-processor.store
    metabase.test
    metabase.test.util
    toucan.db}]
 [metabase.driver.common.parameters.values-test
  #{clojure.test
    metabase.driver
    metabase.driver.common.parameters
    metabase.driver.common.parameters.values
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.query-processor.middleware.permissions
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.server.routes.index-test
  #{cheshire.core clojure.test metabase.server.routes.index metabase.test metabase.test.util metabase.util.i18n}]
 [metabase.events.dependencies
  #{clojure.core.async
    clojure.tools.logging
    metabase.events
    metabase.models.card
    metabase.models.dependency
    metabase.models.metric}]
 [metabase.events.dependencies-test
  #{clojure.test
    metabase.events.dependencies
    metabase.models
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.driver-test
  #{clojure.test metabase.driver metabase.driver.impl metabase.plugins.classloader metabase.test.util}]
 [metabase.sync.analyze.fingerprint.fingerprinters-test
  #{cheshire.core
    clojure.string
    clojure.test
    metabase.models.field
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.test
    metabase.test.util
    schema.core
    toucan.db}]
 [metabase.db.schema-migrations-test.impl
  #{clojure.java.jdbc
    clojure.test
    clojure.tools.logging
    metabase.db
    metabase.db.liquibase
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.test
    metabase.test.data.interface
    metabase.test.initialize
    metabase.util
    toucan.db}]
 [metabase.db.schema-migrations-test
  #{clojure.test
    metabase.db.schema-migrations-test.impl
    metabase.models
    metabase.models.user
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.models.revision-test
  #{clojure.test metabase.models.card metabase.models.revision metabase.test metabase.test.util toucan.models}]
 [metabase.sync.sync-metadata-test
  #{clojure.test
    metabase.sync.sync-metadata.fields
    metabase.sync.sync-metadata.fks
    metabase.sync.sync-metadata.metabase-metadata
    metabase.sync.sync-metadata.sync-timezone
    metabase.sync.sync-metadata.tables
    metabase.test.sync
    metabase.test.util}]
 [metabase.models.interface-test
  #{cheshire.core clojure.test metabase.mbql.normalize metabase.test.util toucan.models}]
 [metabase.util.schema-test
  #{clojure.test compojure.core metabase.api.common metabase.test metabase.test.util metabase.util.schema schema.core}]
 [metabase.events.last-login-test
  #{clojure.test metabase.events.last-login metabase.models.user metabase.test metabase.test.util toucan.db}]
 [metabase.query-processor.middleware.fetch-source-query-test
  #{cheshire.core
    clojure.set
    clojure.test
    metabase.mbql.schema
    metabase.models
    metabase.query-processor
    metabase.query-processor.middleware.fetch-source-query
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.async.api-response
  #{cheshire.core
    clojure.core.async
    clojure.java.io
    clojure.tools.logging
    compojure.response
    metabase.server.middleware.exceptions
    metabase.util
    metabase.util.i18n
    ring.core.protocols
    ring.util.response}]
 [metabase.cmd.dump-to-h2-test
  #{clojure.java.io
    clojure.java.jdbc
    clojure.test
    metabase.cmd
    metabase.cmd.copy
    metabase.cmd.copy.h2
    metabase.cmd.dump-to-h2
    metabase.cmd.load-from-h2
    metabase.cmd.test-util
    metabase.db.connection
    metabase.db.spec
    metabase.driver
    metabase.models
    metabase.models.setting
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util.encryption-test
    metabase.util.i18n.impl
    toucan.db}]
 [metabase.models.login-history-test
  #{clojure.string
    clojure.test
    java-time
    metabase.models
    metabase.models.login-history
    metabase.server.request.util
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.date-2
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.util-test #{clojure.test metabase.query-processor.util metabase.test.util}]
 [metabase.driver.sql-jdbc-test
  #{clojure.test
    metabase.db.metadata-queries
    metabase.driver
    metabase.driver.sql-jdbc.test-util
    metabase.driver.util
    metabase.models.field
    metabase.models.table
    metabase.query-processor
    metabase.test
    metabase.test.util
    metabase.test.util.log}]
 [metabase.task.follow-up-emails-test
  #{clojure.test
    java-time
    metabase.email-test
    metabase.task.follow-up-emails
    metabase.test.fixtures
    metabase.test.util}]
 [metabase.sync.analyze.classifiers.text-fingerprint-test
  #{clojure.test metabase.models.field metabase.sync.analyze.classifiers.text-fingerprint metabase.test.util}]
 [metabase.query-processor-test.order-by-test #{clojure.test metabase.driver metabase.test metabase.test.util}]
 [metabase.plugins.driver-deprecation-test
  #{clojure.test metabase.models.setting metabase.test metabase.test.fixtures metabase.test.util}]
 [metabase.query-processor.middleware.catch-exceptions-test
  #{clojure.test
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.query-processor.context
    metabase.query-processor.error-type
    metabase.query-processor.middleware.catch-exceptions
    metabase.test
    metabase.test.data
    metabase.test.data.users
    metabase.test.util
    metabase.test.util.log
    schema.core}]
 [metabase.driver.common.parameters.parse-test
  #{clojure.test metabase.driver.common.parameters.parse metabase.test.util}]
 [metabase.server.request.util-test
  #{clojure.test
    clojure.tools.reader.edn
    java-time
    metabase.server.request.util
    metabase.test
    metabase.test.util
    ring.mock.request}]
 [metabase.models.table-test
  #{clojure.java.jdbc
    clojure.test
    metabase.models.table
    metabase.sync
    metabase.test
    metabase.test.data.one-off-dbs
    metabase.test.util
    toucan.db}]
 [metabase.api.task-test
  #{clojure.test java-time metabase.models.task-history metabase.test metabase.test.util metabase.util toucan.db}]
 [metabase.pulse.render.color-test
  #{clojure.test metabase.pulse.render.color metabase.pulse.render.js-engine metabase.test.util}]
 [metabase.driver.common-test
  #{clojure.test metabase.driver metabase.driver.common metabase.models.setting metabase.test.util}]
 [metabase.transforms.specs-test
  #{clojure.test metabase.test metabase.test.util metabase.transforms.specs metabase.util.schema}]
 [metabase.server.middleware.misc-test
  #{clojure.test
    medley.core
    metabase.public-settings
    metabase.server.middleware.misc
    metabase.test
    metabase.test.util
    ring.mock.request}]
 [metabase.util.stats-test
  #{clojure.test
    metabase.email
    metabase.integrations.slack
    metabase.models.card
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.pulse-channel
    metabase.models.query-execution
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.stats
    schema.core
    toucan.db
    toucan.util.test}]
 [metabase.query-processor-test.breakout-test
  #{clojure.test
    metabase.mbql.schema
    metabase.models.card
    metabase.models.field
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.middleware.add-dimension-projections
    metabase.query-processor.middleware.add-source-metadata
    metabase.query-processor.test-util
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.query-processor.pivot-test
  #{clojure.set
    clojure.test
    medley.core
    metabase.api.pivots
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.query-processor.pivot
    metabase.test
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.query-processor-test.date-bucketing-test
  #{clojure.string
    clojure.test
    java-time
    metabase.driver
    metabase.driver.sql-jdbc.sync
    metabase.driver.sql.query-processor
    metabase.driver.sql.query-processor-test
    metabase.models.database
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.middleware.format-rows
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.date-2
    metabase.util.honeysql-extensions
    potemkin.types
    pretty.core
    toucan.db}]
 [metabase.config-test #{clojure.test environ.core metabase.config metabase.test.util}]
 [metabase.server.middleware.session-test
  #{clojure.string
    clojure.test
    environ.core
    metabase.api.common
    metabase.config
    metabase.core.initialization-status
    metabase.db
    metabase.driver.sql.query-processor
    metabase.models
    metabase.server.middleware.session
    metabase.test
    metabase.test.util
    metabase.util.i18n
    ring.mock.request
    toucan.db}]
 [metabase.task.sync-databases
  #{clojure.tools.logging
    clojurewerkz.quartzite.conversion
    clojurewerkz.quartzite.jobs
    clojurewerkz.quartzite.schedule.cron
    clojurewerkz.quartzite.triggers
    java-time
    metabase.models.database
    metabase.sync.analyze
    metabase.sync.field-values
    metabase.sync.schedules
    metabase.sync.sync-metadata
    metabase.task
    metabase.util
    metabase.util.cron
    metabase.util.i18n
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.models.database-test
  #{cheshire.core
    clojure.string
    clojure.test
    metabase.driver
    metabase.driver.h2
    metabase.driver.util
    metabase.models
    metabase.models.database
    metabase.models.permissions
    metabase.models.user
    metabase.server.middleware.session
    metabase.task
    metabase.task.sync-databases
    metabase.test
    metabase.test.util
    schema.core
    toucan.db}]
 [metabase.transforms.core-test
  #{clojure.test
    medley.core
    metabase.domain-entities.core
    metabase.domain-entities.specs
    metabase.models.card
    metabase.models.collection
    metabase.models.table
    metabase.query-processor
    metabase.test
    metabase.test.domain-entities
    metabase.test.transforms
    metabase.test.util
    metabase.transforms.core
    metabase.transforms.specs
    metabase.util
    toucan.db}]
 [metabase.api.email-test #{clojure.test metabase.email metabase.models.setting metabase.test metabase.test.util}]
 [metabase.driver.sql.util-test
  #{clojure.test metabase.driver.sql.util metabase.test.util metabase.util.honeysql-extensions}]
 [metabase.api.segment-test
  #{clojure.test
    metabase.http-client
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.revision
    metabase.models.segment
    metabase.models.table
    metabase.server.middleware.util
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.models.collection-test
  #{clojure.math.combinatorics
    clojure.string
    clojure.test
    metabase.api.common
    metabase.models
    metabase.models.collection
    metabase.models.permissions
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.models.user-test
  #{clojure.set
    clojure.string
    clojure.test
    metabase.http-client
    metabase.models.collection
    metabase.models.collection-test
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.session
    metabase.models.table
    metabase.models.user
    metabase.test
    metabase.test.data.users
    metabase.test.util
    metabase.util
    metabase.util.password
    toucan.db
    toucan.hydrate}]
 [metabase.api.database-test
  #{clojure.test
    medley.core
    metabase.api.database
    metabase.api.table
    metabase.driver
    metabase.driver.sql-jdbc
    metabase.driver.util
    metabase.mbql.schema
    metabase.models
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.sync.analyze
    metabase.sync.field-values
    metabase.sync.sync-metadata
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.cron
    metabase.util.schema
    ring.util.codec
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.query-processor.middleware.add-implicit-clauses-test
  #{clojure.test
    metabase.mbql.util
    metabase.models.field
    metabase.query-processor
    metabase.query-processor.middleware.add-implicit-clauses
    metabase.query-processor.test-util
    metabase.test
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.results-metadata-test
  #{clojure.test
    metabase.mbql.schema
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.query-processor.middleware.results-metadata
    metabase.query-processor.util
    metabase.sync.analyze.query-results
    metabase.test
    metabase.test.mock.util
    metabase.test.util
    metabase.util
    metabase.util.encryption
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.events.view-log
  #{clojure.core.async clojure.tools.logging metabase.events metabase.models.view-log toucan.db}]
 [metabase.events.view-log-test
  #{clojure.test metabase.events.view-log metabase.models metabase.test metabase.test.util toucan.db}]
 [metabase.sample-dataset-test
  #{clojure.test
    metabase.models
    metabase.sample-data
    metabase.sync
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.api.transform-test
  #{clojure.test
    metabase.models.card
    metabase.models.collection
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.test
    metabase.test.domain-entities
    metabase.test.fixtures
    metabase.test.transforms
    metabase.test.util}]
 [metabase.db.fix-mysql-utf8-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    metabase.db.setup
    metabase.driver.sql-jdbc.connection
    metabase.models
    metabase.test
    metabase.test.util
    toucan.db}]
 [metabase.db.setup-test #{clojure.java.jdbc clojure.test metabase.db.setup metabase.test metabase.test.util}]
 [metabase.util-test
  #{clojure.test
    clojure.test.check.clojure-test
    clojure.test.check.generators
    clojure.test.check.properties
    flatland.ordered.map
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.driver.sql.parameters.substitute-test
  #{clojure.test
    java-time
    metabase.driver
    metabase.driver.common.parameters
    metabase.driver.common.parameters.parse
    metabase.driver.sql.parameters.substitute
    metabase.mbql.normalize
    metabase.models
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.middleware.parameters.native
    metabase.query-processor.test-util
    metabase.test
    metabase.test.util
    metabase.util.schema
    schema.core}]
 [metabase.models.on-demand-test
  #{clojure.test
    metabase.models.card
    metabase.models.dashboard
    metabase.models.database
    metabase.models.field
    metabase.models.field-values
    metabase.models.table
    metabase.test
    metabase.test.data
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.models.setting-test
  #{clojure.test
    environ.core
    medley.core
    metabase.models.setting
    metabase.models.setting.cache
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.encryption-test
    metabase.util.i18n
    toucan.db}]
 [metabase.models.setting.cache-test
  #{clojure.test
    honeysql.core
    metabase.db
    metabase.models.setting
    metabase.models.setting-test
    metabase.models.setting.cache
    metabase.public-settings
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    toucan.db}]
 [metabase.query-processor.middleware.cache-test
  #{buddy.core.codecs
    clojure.core.async
    clojure.data.csv
    clojure.test
    clojure.tools.logging
    java-time
    medley.core
    metabase.driver.sql-jdbc.execute
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.query
    metabase.public-settings
    metabase.query-processor
    metabase.query-processor.context.default
    metabase.query-processor.middleware.cache
    metabase.query-processor.middleware.cache-backend.interface
    metabase.query-processor.middleware.cache.impl
    metabase.query-processor.middleware.cache.impl-test
    metabase.query-processor.middleware.process-userland-query
    metabase.query-processor.streaming
    metabase.query-processor.util
    metabase.server.middleware.session
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    pretty.core
    schema.core
    toucan.db}]
 [metabase.util.honeysql-extensions-test
  #{clojure.test honeysql.core honeysql.format metabase.test metabase.test.util metabase.util.honeysql-extensions}]
 [metabase.query-processor.query-to-expected-cols-test
  #{clojure.test metabase.query-processor metabase.test metabase.test.util}]
 [metabase.models.params.chain-filter.dedupe-joins-test
  #{clojure.test metabase.models.params.chain-filter.dedupe-joins metabase.test.util}]
 [metabase.test.mock.moviedb #{metabase.driver}]
 [metabase.query-processor.middleware.wrap-value-literals-test
  #{clojure.test
    java-time
    metabase.driver
    metabase.query-processor.middleware.wrap-value-literals
    metabase.query-processor.timezone
    metabase.test
    metabase.test.util}]
 [metabase.query-processor-test.nested-queries-test
  #{clojure.test
    honeysql.core
    java-time
    metabase.driver
    metabase.mbql.schema
    metabase.models
    metabase.models.card
    metabase.models.collection
    metabase.models.interface
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.query.permissions
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.middleware.permissions
    metabase.test
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.api.login-history-test #{clojure.test metabase.models metabase.test metabase.test.util metabase.util}]
 [metabase.query-processor.middleware.binning-test
  #{clojure.test
    metabase.models.card
    metabase.models.field
    metabase.query-processor.middleware.binning
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.api.permissions-test
  #{clojure.test
    metabase.api.permissions
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.table
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.add-default-temporal-unit-test
  #{clojure.test metabase.query-processor.middleware.add-default-temporal-unit metabase.test metabase.test.util}]
 [metabase.query-processor-test.native-test
  #{clojure.test metabase.query-processor metabase.query-processor-test metabase.test metabase.test.util}]
 [metabase.models.revision.diff-test #{clojure.data clojure.test metabase.models.revision.diff metabase.test.util}]
 [metabase.async.util-test
  #{clojure.core.async clojure.test metabase.async.util metabase.test.util metabase.test.util.async}]
 [metabase.api.alert-test
  #{clojure.test
    medley.core
    metabase.email-test
    metabase.http-client
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.pulse
    metabase.models.pulse-test
    metabase.server.middleware.util
    metabase.test
    metabase.test.data.users
    metabase.test.mock.util
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.query-processor-test.implicit-joins-test #{clojure.test metabase.driver metabase.test metabase.test.util}]
 [metabase.query-processor.middleware.pre-alias-aggregations-test
  #{clojure.test
    metabase.driver
    metabase.driver.sql
    metabase.query-processor.middleware.pre-alias-aggregations
    metabase.test
    metabase.test.data
    metabase.test.util}]
 [metabase.api.setting-test
  #{clojure.test metabase.models.setting-test metabase.test metabase.test.fixtures metabase.test.util}]
 [metabase.models.session-test
  #{clojure.test
    metabase.models.session
    metabase.server.middleware.misc
    metabase.test
    metabase.test.util
    toucan.db
    toucan.models}]
 [metabase.db.env-test #{clojure.test metabase.db.env metabase.test.util}]
 [metabase.task.sync-databases-test
  #{clojure.string
    clojure.test
    java-time
    metabase.models.database
    metabase.sync.schedules
    metabase.task.sync-databases
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.cron
    toucan.db}]
 [metabase.query-processor.middleware.add-source-metadata-test
  #{clojure.string
    clojure.test
    metabase.driver
    metabase.query-processor
    metabase.query-processor.middleware.add-source-metadata
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.query-processor.middleware.optimize-temporal-filters-test
  #{clojure.string
    clojure.test
    java-time
    metabase.driver
    metabase.query-processor
    metabase.query-processor.middleware.optimize-temporal-filters
    metabase.test
    metabase.test.util
    metabase.util.date-2}]
 [metabase.query-processor-test.timezones-test
  #{clojure.set
    clojure.test
    honeysql.core
    java-time
    metabase.driver
    metabase.driver.sql.query-processor
    metabase.models
    metabase.query-processor
    metabase.test
    metabase.test.data.sql
    metabase.test.util
    metabase.util.honeysql-extensions
    toucan.db}]
 [metabase.query-processor-test.explicit-joins-test
  #{clojure.set
    clojure.test
    metabase.driver
    metabase.models
    metabase.query-processor
    metabase.query-processor-test.timezones-test
    metabase.query-processor.test-util
    metabase.test
    metabase.test.data.interface
    metabase.test.util}]
 [metabase.query-processor.streaming.json-test
  #{clojure.test metabase.query-processor.streaming.json metabase.test.util}]
 [metabase.api.automagic-dashboards-test
  #{clojure.test
    metabase.automagic-dashboards.core
    metabase.models
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.query-processor
    metabase.test
    metabase.test.automagic-dashboards
    metabase.test.domain-entities
    metabase.test.fixtures
    metabase.test.transforms
    metabase.test.util
    metabase.transforms.core
    metabase.transforms.materialize
    metabase.transforms.specs
    toucan.util.test}]
 [metabase.query-processor-test.sum-where-test
  #{clojure.test metabase.models.metric metabase.models.segment metabase.test metabase.test.util}]
 [metabase.util.regex-test #{clojure.test metabase.test.util metabase.util.regex}]
 [metabase.api.user-test
  #{clojure.test
    metabase.http-client
    metabase.models.collection
    metabase.models.permissions-group
    metabase.models.permissions-group-membership
    metabase.models.user
    metabase.models.user-test
    metabase.server.middleware.util
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.i18n
    schema.core
    toucan.db
    toucan.hydrate}]
 [metabase.db.data-migrations-test
  #{cheshire.core
    clojure.set
    clojure.test
    medley.core
    metabase.db.data-migrations
    metabase.models.card
    metabase.models.collection
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.database
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.pulse
    metabase.models.user
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.password
    toucan.db}]
 [metabase.driver.impl-test
  #{clojure.core.async clojure.test metabase.driver metabase.driver.impl metabase.test.util metabase.test.util.async}]
 [metabase.query-processor.middleware.desugar-test
  #{clojure.test metabase.query-processor.middleware.desugar metabase.test metabase.test.util}]
 [metabase.query-processor.middleware.resolve-joins-test
  #{clojure.test
    metabase.models
    metabase.query-processor
    metabase.query-processor.middleware.resolve-joins
    metabase.query-processor.store
    metabase.query-processor.test-util
    metabase.test
    metabase.test.util}]
 [metabase.models.metric-test
  #{clojure.test
    metabase.models.database
    metabase.models.metric
    metabase.models.table
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.models.pulse-card-test
  #{clojure.test
    metabase.models.card
    metabase.models.dashboard
    metabase.models.dashboard-card
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.test.util
    toucan.util.test}]
 [metabase.models.query.permissions-test
  #{clojure.test
    metabase.api.common
    metabase.mbql.schema
    metabase.models.card
    metabase.models.collection
    metabase.models.database
    metabase.models.field
    metabase.models.interface
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.query.permissions
    metabase.models.table
    metabase.query-processor.test-util
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.mbql.schema-test #{clojure.test metabase.mbql.schema metabase.test.util schema.core}]
 [metabase.query-processor.middleware.limit-test
  #{clojure.test
    metabase.query-processor.interface
    metabase.query-processor.middleware.limit
    metabase.test
    metabase.test.util}]
 [metabase.server.middleware.log-test #{clojure.test metabase.server.middleware.log metabase.test.util}]
 [metabase.async.streaming-response-test
  #{clj-http.client
    clojure.core.async
    clojure.test
    metabase.async.streaming-response
    metabase.async.streaming-response.thread-pool
    metabase.driver
    metabase.http-client
    metabase.models
    metabase.query-processor.context
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.models.field-values-test
  #{cheshire.core
    clojure.java.jdbc
    clojure.string
    clojure.test
    metabase.db.metadata-queries
    metabase.models.database
    metabase.models.field
    metabase.models.field-values
    metabase.models.table
    metabase.sync
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.task.send-pulses-test
  #{clojure.test
    metabase.email
    metabase.email-test
    metabase.models.card
    metabase.models.pulse
    metabase.models.pulse-card
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.pulse.test-util
    metabase.task.send-pulses
    metabase.test
    metabase.test.util}]
 [metabase.driver.sql-jdbc.connection-test
  #{clojure.java.jdbc
    clojure.test
    metabase.db.spec
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.test-util
    metabase.driver.util
    metabase.models.database
    metabase.test
    metabase.test.data
    metabase.test.fixtures
    metabase.test.util
    metabase.util}]
 [metabase.query-processor.async-test
  #{clojure.test metabase.query-processor.async metabase.test metabase.test.util metabase.test.util.async}]
 [metabase.metabot.instance-test #{clojure.test metabase.metabot.instance metabase.test.util metabase.util.date-2}]
 [metabase.driver.sql.util.unprepare-test
  #{clojure.string
    clojure.test
    java-time
    metabase.driver
    metabase.driver.sql
    metabase.driver.sql.util.unprepare
    metabase.test.util
    metabase.util.date-2}]
 [metabase.db.liquibase-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    metabase.db.liquibase
    metabase.driver.sql-jdbc.connection
    metabase.test
    metabase.test.util}]
 [metabase.models.collection.graph-test
  #{clojure.java.jdbc
    clojure.test
    medley.core
    metabase.api.common
    metabase.models
    metabase.models.collection
    metabase.models.collection-permission-graph-revision
    metabase.models.collection.graph
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db
    toucan.util.test}]
 [metabase.driver.sql-jdbc.sync.describe-table-test
  #{clojure.java.jdbc
    clojure.string
    clojure.test
    metabase.driver
    metabase.driver.sql-jdbc.sync.describe-table
    metabase.driver.sql-jdbc.sync.interface
    metabase.models.table
    metabase.test
    metabase.test.util}]
 [metabase.api.setup-test
  #{clojure.core.async
    clojure.test
    medley.core
    metabase.api.setup
    metabase.email
    metabase.events
    metabase.http-client
    metabase.integrations.slack
    metabase.models
    metabase.models.setting
    metabase.models.setting.cache-test
    metabase.public-settings
    metabase.setup
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.query-processor.middleware.upgrade-field-literals-test
  #{clojure.test
    metabase.query-processor
    metabase.query-processor.middleware.upgrade-field-literals
    metabase.test
    metabase.test.util}]
 [metabase.query-processor.middleware.auto-bucket-datetimes-test
  #{clojure.test
    metabase.models.field
    metabase.query-processor.middleware.auto-bucket-datetimes
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.dashboard-subscription-test
  #{clojure.test
    metabase.models
    metabase.models.pulse
    metabase.pulse
    metabase.pulse.render.body
    metabase.pulse.test-util
    metabase.test
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.sync.sync-metadata.tables-test
  #{clojure.test
    metabase.models
    metabase.sync.sync-metadata.tables
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor-test.count-where-test
  #{clojure.test metabase.models.metric metabase.models.segment metabase.test metabase.test.util}]
 [metabase.server.middleware.auth-test
  #{clojure.test
    java-time
    metabase.models.session
    metabase.server.middleware.auth
    metabase.server.middleware.session
    metabase.server.middleware.util
    metabase.test
    metabase.test.data.users
    metabase.test.fixtures
    metabase.test.util
    ring.mock.request
    toucan.db
    toucan.util.test}]
 [metabase.query-processor-test.aggregation-test
  #{clojure.test
    metabase.models.field
    metabase.query-processor-test
    metabase.test
    metabase.test.data
    metabase.test.util}]
 [metabase.query-processor-test.time-field-test
  #{clojure.test metabase.driver metabase.query-processor-test metabase.test metabase.test.util}]
 [metabase.query-processor.middleware.large-int-id-test
  #{clojure.test
    metabase.query-processor
    metabase.query-processor.middleware.large-int-id
    metabase.test
    metabase.test.util}]
 [metabase.query-processor.middleware.parameters.native-test
  #{clojure.test
    metabase.driver
    metabase.models.card
    metabase.query-processor.middleware.parameters.native
    metabase.test
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core}]
 [metabase.driver.sql-jdbc.sync.describe-database-test
  #{clojure.java.jdbc
    clojure.test
    metabase.driver
    metabase.driver.sql-jdbc.connection
    metabase.driver.sql-jdbc.sync.describe-database
    metabase.driver.sql-jdbc.sync.interface
    metabase.models.table
    metabase.query-processor
    metabase.sync
    metabase.test
    metabase.test.data.one-off-dbs
    metabase.test.util
    toucan.db}]
 [metabase.sync.analyze-test
  #{clojure.test
    metabase.api.table
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.sync.analyze
    metabase.sync.analyze.classifiers.category
    metabase.sync.analyze.classifiers.name
    metabase.sync.analyze.classifiers.no-preview-display
    metabase.sync.analyze.classifiers.text-fingerprint
    metabase.sync.analyze.fingerprint.fingerprinters
    metabase.sync.interface
    metabase.sync.sync-metadata
    metabase.test
    metabase.test.data
    metabase.test.sync
    metabase.test.util
    metabase.util
    toucan.db
    toucan.util.test}]
 [metabase.driver.sql-jdbc.native-test
  #{clojure.test
    medley.core
    metabase.query-processor
    metabase.test.data
    metabase.test.util
    metabase.test.util.log
    metabase.util.schema
    schema.core}]
 [metabase.query-processor.middleware.visualization-settings-test
  #{clojure.test
    metabase.models
    metabase.query-processor.middleware.visualization-settings
    metabase.shared.models.visualization-settings
    metabase.test
    metabase.test.util}]
 [metabase.models.humanization-test
  #{clojure.test metabase.models.humanization metabase.models.table metabase.test.util toucan.db toucan.util.test}]
 [metabase.server-test #{clojure.test metabase.config metabase.server metabase.test.util}]
 [metabase.util.i18n-test #{clojure.test clojure.walk metabase.test metabase.test.util metabase.util.i18n}]
 [metabase.query-processor.middleware.add-timezone-info-test
  #{clojure.test
    metabase.driver
    metabase.query-processor.middleware.add-timezone-info
    metabase.test
    metabase.test.util}]
 [metabase.query-processor.streaming-test
  #{cheshire.core
    clojure.data.csv
    clojure.test
    dk.ative.docjure.spreadsheet
    medley.core
    metabase.query-processor
    metabase.query-processor.streaming
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor.middleware.cumulative-aggregations-test
  #{clojure.test metabase.query-processor.middleware.cumulative-aggregations metabase.test metabase.test.util}]
 [metabase.query-processor-test.query-to-native-test
  #{clojure.test
    metabase.api.common
    metabase.models.permissions
    metabase.query-processor
    metabase.test
    metabase.test.util
    schema.core}]
 [metabase.sync.sync-dynamic-test
  #{clojure.test
    metabase.models
    metabase.sync
    metabase.test
    metabase.test.mock.toucanery
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.models.query-test #{clojure.test metabase.models metabase.models.query metabase.test metabase.test.util}]
 [metabase.models.params-test
  #{clojure.test
    metabase.api.public-test
    metabase.models
    metabase.models.params
    metabase.test
    metabase.test.util
    toucan.db
    toucan.hydrate
    toucan.util.test}]
 [metabase.async.api-response-test
  #{cheshire.core
    clojure.core.async
    clojure.test
    metabase.async.api-response
    metabase.test.util
    metabase.test.util.async
    ring.core.protocols
    schema.core}]
 [metabase.pulse.render-test
  #{clojure.test
    metabase.mbql.util
    metabase.models.card
    metabase.pulse
    metabase.pulse.render
    metabase.query-processor
    metabase.test
    metabase.test.util}]
 [metabase.related-test
  #{clojure.java.jdbc
    clojure.test
    medley.core
    metabase.models
    metabase.related
    metabase.sync
    metabase.test
    metabase.test.data.one-off-dbs
    metabase.test.util}]
 [metabase.api.dataset-test
  #{cheshire.core
    clojure.data.csv
    clojure.string
    clojure.test
    medley.core
    metabase.api.pivots
    metabase.http-client
    metabase.mbql.schema
    metabase.models.card
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.query-execution
    metabase.query-processor-test
    metabase.query-processor.middleware.constraints
    metabase.query-processor.util
    metabase.test
    metabase.test.data.users
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    metabase.util.schema
    schema.core
    toucan.db}]
 [metabase.automagic-dashboards.comparison-test
  #{clojure.test
    metabase.automagic-dashboards.comparison
    metabase.automagic-dashboards.core
    metabase.models
    metabase.models.query
    metabase.test
    metabase.test.automagic-dashboards
    metabase.test.util}]
 [metabase.util.ssh-test
  #{clojure.java.io
    clojure.test
    clojure.tools.logging
    metabase.driver.sql-jdbc.connection
    metabase.models.database
    metabase.query-processor
    metabase.query-processor-test
    metabase.sync
    metabase.test
    metabase.test.data.interface
    metabase.test.util
    metabase.util
    metabase.util.ssh}]
 [metabase.sync.schedules-test #{clojure.test metabase.sync.schedules metabase.test.util}]
 [metabase.util.date-2-test
  #{clojure.string
    clojure.test
    java-time
    metabase.test
    metabase.test.util
    metabase.test.util.timezone
    metabase.util.date-2
    metabase.util.date-2.common}]
 [metabase.server.middleware.json-test
  #{cheshire.core clojure.test metabase.server.middleware.json metabase.test.util}]
 [metabase.models.pulse-channel-test
  #{clojure.test
    medley.core
    metabase.models.pulse
    metabase.models.pulse-channel
    metabase.models.pulse-channel-recipient
    metabase.models.user
    metabase.test
    metabase.test.util
    toucan.db
    toucan.hydrate}]
 [metabase.search.scoring-test
  #{clojure.test java-time metabase.search.config metabase.search.scoring metabase.test.util}]
 [metabase.models.segment-test
  #{clojure.test
    metabase.models.database
    metabase.models.segment
    metabase.models.table
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor-test.advanced-math-test
  #{clojure.test metabase.query-processor-test metabase.test metabase.test.data metabase.test.util metabase.util}]
 [metabase.api.testing-test
  #{clojure.java.io
    clojure.test
    metabase.api.testing
    metabase.db.connection
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.mbql.util-test #{clojure.test metabase.mbql.util metabase.test.util metabase.types}]
 [metabase.query-processor-test.page-test
  #{clojure.test metabase.query-processor-test metabase.test metabase.test.data metabase.test.util}]
 [metabase.api.collection-test
  #{clojure.string
    clojure.test
    honeysql.core
    metabase.api.collection
    metabase.models
    metabase.models.collection
    metabase.models.collection-test
    metabase.models.collection.graph
    metabase.models.collection.graph-test
    metabase.models.permissions
    metabase.models.permissions-group
    metabase.models.revision
    metabase.test
    metabase.test.fixtures
    metabase.test.util
    metabase.util
    schema.core
    toucan.db}]
 [metabase.api.geojson-test
  #{clojure.test
    metabase.api.geojson
    metabase.http-client
    metabase.server.middleware.security
    metabase.test
    metabase.test.util
    metabase.util
    schema.core}]
 [metabase.sync.sync-metadata.fields.sync-metadata-test
  #{clojure.test
    metabase.models.table
    metabase.sync.sync-metadata.fields.sync-metadata
    metabase.test.util
    toucan.db
    toucan.util.test}]
 [metabase.cmd.copy.h2-test #{clojure.test metabase.cmd.copy.h2 metabase.test.util}]
 [metabase.query-processor-test.filter-test
  #{clojure.test
    metabase.driver
    metabase.query-processor
    metabase.query-processor-test
    metabase.test
    metabase.test.util}]
 [metabase.sync.sync-metadata.metabase-metadata-test
  #{clojure.test
    metabase.models.database
    metabase.models.field
    metabase.models.table
    metabase.sync.sync-metadata.metabase-metadata
    metabase.test
    metabase.test.mock.moviedb
    metabase.test.util
    metabase.util
    toucan.db
    toucan.hydrate}]
 [metabase.sync.sync-metadata.sync-timezone-test
  #{clj-time.core
    clojure.test
    metabase.driver
    metabase.models.database
    metabase.sync.util-test
    metabase.test
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor-test.expression-aggregations-test
  #{clojure.test
    metabase.driver
    metabase.models.metric
    metabase.query-processor-test
    metabase.test
    metabase.test.util
    metabase.util}]
 [metabase.test.util-test
  #{clojure.test
    metabase.models.field
    metabase.models.setting
    metabase.test
    metabase.test.data
    metabase.test.util
    metabase.util
    toucan.db}]
 [metabase.query-processor-test.remapping-test
  #{clojure.test
    metabase.models.field
    metabase.query-processor
    metabase.query-processor-test
    metabase.query-processor.middleware.add-dimension-projections
    metabase.test
    metabase.test.util
    toucan.db}]]
